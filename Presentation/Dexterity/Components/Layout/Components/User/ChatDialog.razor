@layout MainLayout
@using Dexterity.Extensions
@using Services.Features.UserAccounts.Dtos.User
@using Domain.Entities.UserAccounts
<DexDialog>
    <DialogTitle>Instant Messaging</DialogTitle>
    <Content>
        <MudGrid>
            <MudItem md="8">
                <MudPaper Elevation="25" Class="py-4 flex-grow-1">
                    <MudToolBar Dense="true">
                        @if (ContactId == Guid.Empty)
                        {
                            <MudIcon Icon="@MudIcons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                            <MudText Typo="Typo.h6">chat</MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@MudIcons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                            <MudText Typo="Typo.h6">@ContactName</MudText>
                        }
                    </MudToolBar>
                    <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:auto;"
                         id="chatContainer">
                        <div class="msg-body">
                            <ul>
                                @foreach (var message in _messages.Where(x => x.Id > 0))
                                {
                                    if (message.ToUserId == ContactId)
                                    {
                                        <li class="reply">
                                            <p> @message.Message </p>
                                            <span class="time">@message.CreatedDate.ToString("t")</span>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="sender">
                                            <p> @message.Message </p>
                                            <span class="time">@message.CreatedDate.ToString("t")</span>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                    <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
                        <MudTextField T="string" Placeholder="Enter your message..." Class="mt-n2 mx-4"
                                      @bind-Value="CurrentMessage" For="@(() => CurrentMessage)"/>
                        <MudButton OnClick="SubmitAsync" StartIcon="@MudIcons.Material.Outlined.Send"
                                   Color="Color.Primary"
                                   ButtonType="MudButtonType.Button">
                            Send
                        </MudButton>
                    </MudPaper>
                </MudPaper>

            </MudItem>
            <MudItem md="4">
                <MudToolBar Dense="true">
                    <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
                    <MudText Typo="Typo.h6">contacts</MudText>
                </MudToolBar>
                <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                    <MudList T="string">
                        @foreach (var user in ChatUsers)
                        {
                            <MudListItem T="string" Class="pa-0 px-2" Style="height: 50px"
                                         OnClick="@(() => LoadUserChat(user.Id))">
                                <div class="d-flex flex-row mt-n1 mb-n1">
                                    <div class="mr-4">
                                        <MudBadge Color="@(GetUserStatusBadgeColor(user.IsOnline))" Overlap="true"
                                                  Bordered="true" Dot="true">
                                            @if (user.Id == ContactId)
                                            {
                                                <MudAvatar Color="Color.Secondary">
                                                    @user.FullName.ToUpper().FirstOrDefault()
                                                </MudAvatar>
                                            }
                                            else
                                            {
                                                <MudAvatar Color="Color.Dark">
                                                    @user.FullName.ToUpper().FirstOrDefault()
                                                </MudAvatar>
                                            }
                                        </MudBadge>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.FullName</MudText>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </div>
            </MudItem>
        </MudGrid>
    </Content>
</DexDialog>

@code {
    [CascadingParameter] public HubConnection HubConnection { get; set; }
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }

    [Parameter] public List<UserResponseDto> ChatUsers { get; set; } = new();

    private string CurrentMessage { get; set; }
    private Guid CurrentUserId { get; set; }
    private string CurrentUserName { get; set; }
    private string ContactName { get; set; }
    private Guid ContactId { get; set; }

    private List<ChatMessage> _messages = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HubConnection = HubConnection.TryInitialize(NavigationManager);
            if (HubConnection.State == HubConnectionState.Disconnected)
            {
                await HubConnection.StartAsync();
                // Snackbar.SuccessMessage($"Connection has been made.{HubConnection.ConnectionId}");
            }

            HubConnection.On<Guid>(ApplicationConstants.SignalR.ConnectUser, (userId) =>
            {
                var connectedUser = ChatUsers.Find(x => x.Id.Equals(userId));
                if (connectedUser is {IsOnline: false})
                {
                    connectedUser.IsOnline = true;
                    // Snackbar.SuccessMessage($"{connectedUser.FullName} Logged In.");
                    MudDialog.StateHasChanged();
                    StateHasChanged();
                }
            });
            HubConnection.On<Guid>(ApplicationConstants.SignalR.DisconnectUser, (userId) =>
            {
                var disconnectedUser = ChatUsers.Find(x => x.Id.Equals(userId));
                if (disconnectedUser is {IsOnline: true})
                {
                    disconnectedUser.IsOnline = false;
                    Snackbar.SuccessMessage($"{disconnectedUser.FullName} Logged Out.");
                    MudDialog.StateHasChanged();
                    StateHasChanged();
                }
            });
            HubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
            {
                if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId) || (ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                {
                    if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId))
                    {
                        _messages.Add(new ChatMessage {Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new User() {Email = CurrentUserName}});
                        await HubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", ContactId, CurrentUserId);
                    }
                    else if ((ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                    {
                        _messages.Add(new ChatMessage {Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new User() {Email = ContactName}});
                    }

                    await JsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
                    MudDialog.StateHasChanged();
                    StateHasChanged();
                    LoadConversation();
                }
            });
            await GetUsersAsync();
            CurrentUserId = ApplicationState.Auth.CurrentUser.UserId;
            CurrentUserName = ApplicationState.Auth.CurrentUser.Name;
            if (ContactId != Guid.Empty)
            {
                await LoadUserChat(ContactId);
            }

            await HubConnection.SendAsync(ApplicationConstants.SignalR.PingRequest, CurrentUserId);
        }
        catch (Exception e)
        {
            Snackbar.FailMessage(e.Message);
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task SubmitAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage) && ContactId != Guid.Empty)
        {
            var chatHistory = new ChatMessage()
            {
                Message = CurrentMessage,
                ToUserId = ContactId,
                CreatedDate = DateTime.Now,
                FromUserId = CurrentUserId,
            };
            await UnitOfWork.Messaging.SaveMessageAsync(chatHistory);
            await HubConnection.SendAsync("SendMessageAsync", chatHistory, CurrentUserName);
            CurrentMessage = string.Empty;
            LoadConversation();
        }
    }

    async Task LoadUserChat(Guid userId)
    {
        try
        {
            var contact = await UnitOfWork.Messaging.GetUserDetailsAsync(userId);
            ContactId = contact.Id;
            ContactName = contact.FullName;
            _messages = new List<ChatMessage>();
            _messages = await UnitOfWork.Messaging.GetConversationAsync(ContactId);
        }
        catch (Exception e)
        {
            Snackbar.FailMessage(e.Message);
            Console.WriteLine(e);
            throw;
        }
     
    }

    private async Task LoadConversation()
    {
        _messages = [];
        _messages = await UnitOfWork.Messaging.GetConversationAsync(ContactId);
    }

    private Color GetUserStatusBadgeColor(bool isOnline)
    {
        switch (isOnline)
        {
            case false:
                return Color.Error;
            case true:
                return Color.Success;
        }
    }

    private async Task GetUsersAsync()
    {
        ChatUsers = await UnitOfWork.Messaging.GetUsers();
    }

}