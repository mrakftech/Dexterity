@using Shared.Constants.Permission
@using global::Services.Features.UserAccounts.Dtos.User
@using Dexterity.Components.Layout.Components.Common
<TabTitle Title="Users">
    <ActionButtons>
        <MudStack Row>
            <DexCreateButton Label="Add New User" OnClick="() => UpsertUserModal(Guid.Empty)"/>
            <DexButton Name="Refresh" Click="GetUsers"/>
        </MudStack>
    </ActionButtons>
</TabTitle>


<MudItem>
    <DexGrid DataSource="UsersList" Loading="@_userLoading">
        <DexGridColumns>
            <GridColumn Field="@nameof(UserResponseDto.CreatedDate)" Format="g" Type="ColumnType.DateTime"
                        HeaderText="Created Date" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(UserResponseDto.FullName)" HeaderText="Full Name" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(UserResponseDto.Username)" HeaderText="Username" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(UserResponseDto.Email)" HeaderText="Email" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(UserResponseDto.UserType)" HeaderText="User Type" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(UserResponseDto.IsActive)" HeaderText="Status" Width="120px">
                <Template>
                    @{
                        var item = (context as UserResponseDto);
                        @if (item!.IsActive)
                        {
                            <MudText Color="MudColor.Primary"> Active</MudText>
                        }
                        else
                        {
                            <MudText Color="MudColor.Error"> Inactive</MudText>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="Actions" Width="120">
                <Template>
                    @{
                        var item = (context as UserResponseDto);
                        <DexUpdateButton OnClick="() => UpsertUserModal(item.Id)"/>
                        <DexDeleteButton OnClick="() => DeleteUser(item.Id)"/>
                    }
                </Template>
            </GridColumn>
        </DexGridColumns>
    </DexGrid>
</MudItem>


@code {
    private List<UserResponseDto> UsersList { get; set; } = new();

    private bool _userLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        _userLoading = true;
        await Task.Delay(500);
        UsersList = await UnitOfWork.User.GetUsers();
        _userLoading = false;
    }

    private async Task DeleteUser(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.User.DeleteUser(id);
            var user = UsersList.FirstOrDefault(x => x.Id == id);
            UsersList.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessage(userRes.Messages.First());
        }
    }

    private async Task UpsertUserModal(Guid id)
    {
        var parameters = new DialogParameters {{"UserId", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertUserModal>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetUsers();
        }
    }

}