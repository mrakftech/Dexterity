@using Services.Features.Settings.Dtos
@using ButtonType = MudBlazor.ButtonType
@using Domain.Entities.UserAccounts
<MudItem Style="margin-top:5%">
    <MudStack >
        <MudItem md="12">
            <MudStack>
                <MudItem>
                    <MudStack>
                        <SfDropDownList TValue="int" TItem="ClinicDto"
                                        Placeholder="Select Clinic"
                                        @bind-Value="@_clinicId"
                                        DataSource="ClinicList">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <DexLoadingButton Name="Add Clinic" Processing="_processing" Type="ButtonType.Button" Click="AddUserClinic"/>
                    </MudStack>
                </MudItem>
            </MudStack>
        </MudItem>
        <MudItem md="12">
            <DexGrid DataSource="UserClinicList" Height="200" ShowPager="false">
                <DexGridColumns>
                    <GridColumn Field="@nameof(UserClinic.Clinic.Name)" HeaderText="Name" Width="120px">
                        <Template>
                            @{
                                var item = (context as UserClinic);
                                @item.Clinic.Name
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(UserClinic.Clinic.Address)" HeaderText="Address" Width="120px">
                        <Template>
                            @{
                                var item = (context as UserClinic);
                                @item.Clinic.Address
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn HeaderText="Actions" Width="120">
                        <Template>
                            @{
                                var item = (context as UserClinic);
                                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteUserClinic(item.Id)"/>
                            }
                        </Template>
                    </GridColumn>
                </DexGridColumns>
            </DexGrid>
        </MudItem>
    </MudStack>
</MudItem>

@code {
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;
    private bool _processing;
    private List<ClinicDto> ClinicList { get; set; } = new();
    private List<UserClinic> UserClinicList { get; set; } = new();
    private int _clinicId = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetUserClinics();
        await GetClinics();
    }

    private async Task GetUserClinics()
    {
        UserClinicList = await UnitOfWork.User.GetUserClinics(UserId);
    }

    private async Task GetClinics()
    {
        ClinicList = await UnitOfWork.Setting.GetClinics();
    }

    private async Task AddUserClinic()
    {
        _processing = true;

        if (_clinicId > 0)
        {
            var clinic = new UserClinic()
            {
                ClinicId = _clinicId,
                UserId = UserId
            };
            var res = await UnitOfWork.User.SaveUserClinic(0, clinic);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessage("Clinic added.");
                await GetUserClinics();
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());
            }
        }
        else
        {
            Snackbar.FailMessage("Please clinic");
        }

        _processing = false;
    }

    private async Task DeleteUserClinic(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.User.DeleteClinic(id);
            await GetUserClinics();
            StateHasChanged();
            Snackbar.SuccessMessage(userRes.Messages.First());
        }
    }

}