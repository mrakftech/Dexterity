@using Domain.Entities.Settings.Drugs
@using Services.Features.Settings.Dtos.Immunisations
<DexDialog>
    <DialogTitle>Batch Details</DialogTitle>
    <Content>
        <DexForm Model="Batch" ColumnCount="2" OnValidSubmit="SaveBatchDetails">
            <Fields>
                @if (BatchId != Guid.Empty)
                {
                    <FormItem Field="@nameof(UpsertBatchDto.BatchNumber)" LabelText="Selected Batch Number" ColumnSpan="1" IsEnabled="false"></FormItem>
                    <FormItem Field="@nameof(UpsertBatchDto.BatchNumber)" LabelText="Batch Number" ColumnSpan="2">
                        <Template>
                            <label class="e-form-label">Select Batch</label>
                            <SfAutoComplete TValue="string" TItem="Batch" Placeholder="Batch Number" DataSource="@_batchList">
                                <AutoCompleteFieldSettings Value="BatchNumber" Text="BatchNumber"/>
                                <AutoCompleteEvents TValue="string" TItem="Batch" ValueChange="OnChangeBatch"></AutoCompleteEvents>
                            </SfAutoComplete>
                        </Template>
                    </FormItem>
                }
                else
                {
                    <FormItem Field="@nameof(UpsertBatchDto.BatchNumber)" LabelText="Batch Number" ColumnSpan="1"></FormItem>
                }
                <FormItem Field="@nameof(UpsertBatchDto.Expiry)" EditorType="FormEditorType.DatePicker" ColumnSpan="2"></FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.BatchCount)" LabelText="Batch Count" ColumnSpan="1"></FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.Remaining)" ColumnSpan="1"></FormItem>
                @if (BatchId != Guid.Empty)
                {
                    <FormItem Field="@nameof(UpsertBatchDto.DrugName)" LabelText="Selected Drug" ColumnSpan="2" IsEnabled="false"></FormItem>
                }
                <FormItem Field="@nameof(UpsertBatchDto.DrugId)" LabelText="Drug" ColumnSpan="2">
                    <Template>
                        <label class="e-form-label">Drugs</label>
                        <SfAutoComplete TValue="string" TItem="Drug" Placeholder="Select a Drug" DataSource="@Drugs">
                            <AutoCompleteFieldSettings Value="GenericName" Text="GenericName"/>
                            <AutoCompleteEvents TValue="string" TItem="Drug" ValueChange="OnChangeDrug"></AutoCompleteEvents>
                        </SfAutoComplete>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.TradeName)" LabelText="Trade Name" ColumnSpan="1" IsEnabled="false"></FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.ManfactureName)" LabelText="Manufacture Name" ColumnSpan="1" IsEnabled="false"></FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.IsActive)" LabelText="Active" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem Field="@nameof(UpsertBatchDto.BatchCompleteWhenZero)" LabelText="Complete Batch when zero remaining" EditorType="FormEditorType.Checkbox"></FormItem>
            </Fields>
            <Buttons>
                <DexLoadingButton Name="Save" Type="MudButtonType.Submit"/>
            </Buttons>
        </DexForm>
    </Content>
</DexDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid BatchId { get; set; }
    [Parameter] public AssignShotToBatchDto AssignShotToBatch { get; set; } = new();
    public UpsertBatchDto Batch { get; set; } = new();
    private List<Drug> Drugs { get; set; } = new();
    private List<Batch> _batchList = new();

    protected override async Task OnInitializedAsync()
    {
        if (BatchId == Guid.Empty)
        {
            Batch.BatchNumber = AssignShotToBatch.BatchNumber;
        }
        else
        {
            var res = await UnitOfWork.Setting.GetUpdateBatchDetail(BatchId);
            Batch = res.Data;
        }

        await GetDrugs();
        await GetBatches();
    }

    private async Task GetBatches()
    {
        _batchList = await UnitOfWork.Setting.GetBatches();
        StateHasChanged();
    }

    private async Task GetDrugs()
    {
        Drugs = (await UnitOfWork.Setting.GetAllDrugsAsync()).ToList();
    }

    private void OnChangeDrug(ChangeEventArgs<string, Drug> args)
    {
        if (args.ItemData is not null)
        {
            var drug = args.ItemData;
            Batch.TradeName = drug.TradeName;
            Batch.ManfactureName = drug.Manufacture;
            Batch.DrugId = drug.Id;
        }
        else
        {
            Batch.TradeName = string.Empty;
            Batch.ManfactureName = string.Empty;
        }
    }

    private async Task SaveBatchDetails()
    {
        var res = await UnitOfWork.Setting.UpsertBatch(BatchId, AssignShotToBatch.ShotId, Batch);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDialog.Close();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }
    }

    private void OnChangeBatch(ChangeEventArgs<string, Batch> args)
    {
        if (args.ItemData is not null)
        {
            var batchDetail = args.ItemData;
            Batch.TradeName = batchDetail.TradeName;
            Batch.ManfactureName = batchDetail.ManfactureName;
            Batch.DrugId = batchDetail.DrugId;
        }
        else
        {
            Batch.TradeName = string.Empty;
            Batch.ManfactureName = string.Empty;
        }
    }

}