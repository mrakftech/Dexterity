@using Services.Features.Settings.Dtos
<TabTitle Title="Appointment Type" Icon="appointment-type.png">
    <ActionButtons>
        <MudStack Row>
            <DexCreateButton Label="Appointment Type" OnClick="() => UpsertAppointmentTypeModal(Guid.Empty)"/>
            <DexReadButton Label="Load Appointment Types" OnClick="GetAppointmentTypeList"/>
        </MudStack>
    </ActionButtons>
</TabTitle>
<MudItem>
    <DexGrid DataSource="AppointmentTypeList" Loading="@_processing">
        <DexGridColumns>
            <GridColumn Field="@nameof(AppointmentTypeDto.Name)" HeaderText="Name" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(AppointmentTypeDto.Duration)" HeaderText="Duration"
                        Width="120px"></GridColumn>
            <GridColumn HeaderText="Actions" Width="120">
                <Template>
                    @{
                        var item = (context as AppointmentTypeDto);
                        @if (UnitOfWork.User.CheckPermission(PermissionConstants.Update))
                        {
                            <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit"
                                           Color="MudColor.Primary"
                                           OnClick="() => UpsertAppointmentTypeModal(item.Id)"/>
                        }

                        @if (UnitOfWork.User.CheckPermission(PermissionConstants.Delete))
                        {
                            <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete"
                                           Color="MudColor.Error" OnClick="() => DeleteAppointmentType(item.Id)"/>
                        }
                    }
                </Template>
            </GridColumn>
        </DexGridColumns>
    </DexGrid>
</MudItem>

@code {
    private List<AppointmentTypeDto> AppointmentTypeList { get; set; } = new();
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        await GetAppointmentTypeList();
    }

    private async Task GetAppointmentTypeList()
    {
        _processing = true;
        AppointmentTypeList = await UnitOfWork.Setting.GetAppointmentTypes();
        _processing = false;
    }

    private async Task UpsertAppointmentTypeModal(Guid id)
    {
        var title = id == Guid.Empty ? "New Appointment Type" : "Edit Appointment Type";
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<AppointmentTypeFormDialog>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetAppointmentTypeList();
        }
    }

    private async Task DeleteAppointmentType(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteAppointmentType(id);
            if (res.Succeeded)
            {
                await GetAppointmentTypeList();
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());
            }
        }
    }

}