@using Services.Features.PatientManagement.Dtos.RelatedHcp

<SfAppBar ColorMode="AppBarColor.Light" CssClass="mt-5">
    <label class="e-form-label">@($"HCP({@HcpList.Count})")</label>
    <SfDropDownList TValue="int" Placeholder="e.g. select hcp" TItem="RelatedHcpDto"
                    @bind-Value="_hcpId" DataSource="@HcpList" Width="350px">
        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
        <DropDownListEvents TItem="RelatedHcpDto" TValue="int" ValueChange="@ValueChangeHandler"></DropDownListEvents>
    </SfDropDownList>
    <DexButton FullWidth="false" Name="Edit" Click="EditHcp" Disabled="_disableButtons"></DexButton>
    <DexButton FullWidth="false" Name="Delete" Click="DeleteHcp" Disabled="_disableButtons"></DexButton>
    
</SfAppBar>
<SfDataForm Model="@_patientHcp"
            ColumnCount="3"
            Width="100%"
            ColumnSpacing="20px"
            OnValidSubmit="AddHcp"
            ButtonsAlignment="FormButtonsAlignment.Left">
    <FormValidator>
        <ObjectGraphDataAnnotationsValidator />
    </FormValidator>
    <FormItems>
        <FormGroup LabelText="HCP Details" ColumnCount="2" ColumnSpacing="20px">
            <FormItem Field="@nameof(_patientHcp.Type)" LabelText="Type" ColumnSpan="1" />
            <FormItem Field="@nameof(_patientHcp.Name)" LabelText="Name" ColumnSpan="1" />
            <FormItem Field="@nameof(_patientHcp.Address)" LabelText="Address" ColumnSpan="2" />
            <FormItem Field="@nameof(_patientHcp.Telephone)" LabelText="Telephone" ColumnSpan="1" />
            <FormItem Field="@nameof(_patientHcp.Fax)" LabelText="Fax" ColumnSpan="1" />
            <FormItem Field="@nameof(_patientHcp.Email)" LabelText="Email" ColumnSpan="1" />
            <FormItem Field="@nameof(_patientHcp.Website)" LabelText="Website" ColumnSpan="1" />
        </FormGroup>
    </FormItems>
    <FormButtons>
        <DexLoadingButton Processing="_processing" Name="Save" Type="MudButtonType.Submit" FullWidth="false" />
    </FormButtons>
</SfDataForm>

@code {
    [Parameter] public Guid Id { get; set; }
    private bool _processing;
    private int _hcpId;
    private bool _disableButtons = true;
    private RelatedHcpDto _patientHcp = new();
    private List<RelatedHcpDto> HcpList { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetHcps(Id);
    }

    private async Task GetHcps(Guid id)
    {
        HcpList = await UnitOfWork.Patient.GetRealtedHcps(Id);
    }

    private async Task AddHcp()
    {
        _processing = true;
        _patientHcp.PatientId = Id;
        var res = await UnitOfWork.Patient.SaveRelatedHcp(_patientHcp);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await GetHcps(Id);
            _patientHcp = new();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        _processing = false;
    }

    private void ValueChangeHandler(ChangeEventArgs<int, RelatedHcpDto> obj)
    {
        _hcpId = obj.Value;
        if (_hcpId > 0)
        {
            _disableButtons = false;
        }
    }

    private async Task EditHcp()
    {
        var res = await UnitOfWork.Patient.GetRealtedHcp(_hcpId);
        _patientHcp = res;
    }

    private async Task DeleteHcp()
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            var userRes = await UnitOfWork.Patient.DeleteRelatedHcp(_hcpId);
            await GetHcps(Id);
            StateHasChanged();
            Snackbar.SuccessMessage(userRes.Messages.First());
        }
    }

}