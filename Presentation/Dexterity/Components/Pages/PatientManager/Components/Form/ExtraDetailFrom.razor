@using Dexterity.Components.Pages.PatientManager.Components.Form.Dialogs
@using Services.Features.PatientManagement.Dtos.Details
<DexForm Model="@PatientExtraDetail"
         ColumnCount="3"
         OnValidSubmit="SaveExtraInfo">

    <Fields>
        <FormGroup LabelText="Other Details" ColumnCount="1">
            <FormItem Field="@nameof(PatientExtraDetail.Ethnicity)" ColumnSpan="1">
                <Template>
                    <label class="e-form-label">Ethnicity:</label>
                    <SfDropDownList TValue="string" Placeholder="e.g. Black Or White" TItem="Ethnicity" @bind-Value="@PatientExtraDetail.Ethnicity" DataSource="@PatientConstants.Ethnicities">
                        <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.Religion)" LabelText="Religion" ColumnSpan="1"/>
            <FormItem Field="@nameof(PatientExtraDetail.PreferredLanguage)" LabelText="Preferred Language" ColumnSpan="1"/>
            <FormItem Field="@nameof(PatientExtraDetail.InterpreterRequired)" ColumnSpan="2">
                <Template>
                    <label class="e-form-label">Interpreter Required:</label>
                    <MudStack Row>
                        <SfRadioButton Label="Yes" Name="options" Value="Active" @bind-Checked="PatientExtraDetail.InterpreterRequired" @onchange="OnInterpreterChange"></SfRadioButton>
                        <SfRadioButton Label="No" Name="options" Value="Inactive" @bind-Checked="PatientExtraDetail.InterpreterRequired" @onchange="OnInterpreterChange"></SfRadioButton>

                    </MudStack>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.AdvocacyNeeds)" ColumnSpan="2">
                <Template>
                    <label class="e-form-label">Advocacy Needs:</label>
                    <SfTextBox @bind-Value="@PatientExtraDetail.AdvocacyNeeds" Multiline></SfTextBox>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.TransportNeeds)" ColumnSpan="2">
                <Template>
                    <label class="e-form-label">Transport Needs:</label>
                    <SfTextBox @bind-Value="@PatientExtraDetail.TransportNeeds" Multiline></SfTextBox>
                </Template>
            </FormItem>
        </FormGroup>
        <FormGroup LabelText="Marital Status" ColumnCount="1">
            <FormItem Field="@nameof(PatientExtraDetail.Status)" ColumnSpan="1">
                <Template>
                    <label class="e-form-label">Marital Status:</label>
                    <SfDropDownList TValue="string" Placeholder="e.g. Married Or Single" TItem="MaritalStatus" @bind-Value="@PatientExtraDetail.Status" DataSource="@PatientConstants.MaritalStatusList">
                        <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.StartDate)" EditorType="FormEditorType.DatePicker" LabelText="Start Date" ColumnSpan="1" />
            <FormItem Field="@nameof(PatientExtraDetail.EndDate)" EditorType="FormEditorType.DatePicker" LabelText="End Start" ColumnSpan="1"/>

        </FormGroup>
        <FormGroup LabelText="Hospital Details" ColumnCount="1">
            <FormItem Field="@nameof(PatientExtraDetail.Status)" ColumnSpan="1">
                <Template>
                    <DexButton Name="Add Hospital" Click="AddHospital"/>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.Status)">
                <Template>
                    <SfDropDownList TValue="int" Placeholder="e.g. hospital" TItem="PatientHospitalDto"
                                    @bind-Value="hospitalId" DataSource="@hospitals">
                        <DropDownListFieldSettings Value="Id" Text="Hospital.Name"></DropDownListFieldSettings>
                        <DropDownListEvents TItem="PatientHospitalDto" TValue="int" ValueChange="@ValueChangeHandler"></DropDownListEvents>
                    </SfDropDownList>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.Status)">
                <Template>
                    <label class="e-form-label">Name</label>
                    <SfTextBox Enabled="false" Readonly @bind-Value="@_patientHospital.Name"></SfTextBox>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(PatientExtraDetail.Status)">
                <Template>
                    <label class="e-form-label">Address</label>
                    <SfTextBox Enabled="false" Readonly @bind-Value="@_patientHospital.Address"></SfTextBox>
                </Template>
            </FormItem>
            @if (hospitalId > 0)
            {
                <FormItem Field="@nameof(PatientExtraDetail.Status)" ColumnSpan="1">
                    <Template>
                        <DexButton Name="Delete" Click="DeleteHospital"/>
                    </Template>
                </FormItem>
            }

        </FormGroup>
    </Fields>
    <Buttons>
        <DexLoadingButton Name="Save" Processing="_processing" Type="MudButtonType.Submit"
                          FullWidth="false">
        </DexLoadingButton>
    </Buttons>
</DexForm>

@code {
    [Parameter] public PatientExtraDetailDto PatientExtraDetail { get; set; } = new();
    private List<PatientHospitalDto> hospitals = new();
    private PatientHospitalDto _patientHospital = new();
    private bool _processing;
    private int hospitalId = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetSelectedHospitals();
    }

    private async Task GetSelectedHospitals()
    {
        hospitals = await UnitOfWork.Patient.GetSelectedHospitals(PatientExtraDetail.PatientId);
    }

    public async Task SaveExtraInfo()
    {
        _processing = true;
        PatientExtraDetail.PatientId = PatientExtraDetail.PatientId;
        var res = await UnitOfWork.Patient.SaveExtraDetails(PatientExtraDetail);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        _processing = false;
    }

    private void OnInterpreterChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        PatientExtraDetail.InterpreterRequired = args.Value!.ToString();
    }

    private async Task AddHospital()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", PatientExtraDetail.PatientId);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<AddPatientHospitalModal>("Add Hospital", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetSelectedHospitals();
        }
    }

    private async Task DeleteHospital()
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            var hospital = await UnitOfWork.Patient.DeleteSelectedHospital(hospitalId);
            _patientHospital = new();
            hospitalId = 0;
            await GetSelectedHospitals();
            Snackbar.SuccessMessage(hospital.Messages.First());
        }
    }

    private void ValueChangeHandler(ChangeEventArgs<int, PatientHospitalDto> obj)
    {
        var hospital = obj.ItemData;
        _patientHospital.HospitalId = hospital.Id;
        if (hospital.Id > 0)
        {
            _patientHospital.Name = hospital.Hospital.Name;
            _patientHospital.Address = hospital.Hospital.Address1;
        }
    }

}