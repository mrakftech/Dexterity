@using Services.Features.PatientManagement.Dtos.Details
<TabTitle Title="Select a Patient" GoBack="GoBack" ShowBackButton>
</TabTitle>
<DexGrid DataSource="Patients" Loading="_patientLoading">
    <DexGridColumns>
        <GridColumn Field="@nameof(PatientListDto.CreatedDate)" HeaderText="Created Date" Width="120px" Format="g" Type="ColumnType.DateTime"></GridColumn>
        <GridColumn Field="@nameof(PatientListDto.FullName)" HeaderText="Full Name" Width="120px"></GridColumn>
        <GridColumn Field="@nameof(PatientListDto.Gender)" HeaderText="Gender" Width="120px"></GridColumn>
        <GridColumn Field="@nameof(PatientListDto.DateOfBirth)" HeaderText="Date Of Birth" Width="120px" Format="d" Type="ColumnType.DateTime"></GridColumn>
        <GridColumn Field="@nameof(PatientListDto.Email)" HeaderText="Email" Width="120px"></GridColumn>
        <GridColumn Field="@nameof(PatientListDto.ClinicName)" HeaderText="Clinic" Width="120px"></GridColumn>
        <GridColumn HeaderText="Actions" Width="120">
            <Template>
                @{
                    var item = (context as PatientListDto);
                    <DexButton Name="Select Patient" Click="() => PatientChanged(item.Id)"/>
                }
            </Template>
        </GridColumn>
    </DexGridColumns>
</DexGrid>

@code {
    [Parameter] public EventCallback<Guid> SelectPatient { get; set; }
    [Parameter]
    public EventCallback GoBack { get; set; }
    private List<PatientListDto> Patients { get; set; } = new();
    private bool _patientLoading;
   
    protected override async Task OnInitializedAsync()
    {
        await GetPatients();
    }

    private async Task GetPatients()
    {
        _patientLoading = true;
        await Task.Delay(500);
        Patients = await UnitOfWork.Patient.GetPatients();
        _patientLoading = false;
    }

    private void PatientChanged(Guid patientId)
    {
        ApplicationState.SetPatientId(patientId);
        SelectPatient.InvokeAsync(patientId);
        StateHasChanged();
    }

}