@using System.Globalization
@using Dexterity.Adapters
@using Dexterity.Components.Pages.Appointments.Scheduler.Dialogs
@using Services.Features.Appointments.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Query = Syncfusion.Blazor.Data.Query
@using Services.Features.UserAccounts.Dtos.User

@if (_loading)
{
    <DexProgressBar/>
}
else
{
    @if (UnitOfWork.User.CheckPermission(PermissionConstants.Read))
    {
        <MudStack>
            <MudItem Class="mt-3">
                <MudStack Row>
                    <MudItem md="3">
                        <SfDropDownList TValue="string" TItem="string"
                                        Placeholder="View" DataSource="@_appointmentStatusList"
                                        @bind-Value="@_statusSearchValue">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </MudItem>
                    <MudItem md="3">
                        <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="HCP" DataSource="@HealthCares"
                                        @bind-Value="@_hcpSearchValue">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </MudItem>
                    <MudItem>
                        <DexButton Click="OnSearchClick" Name="Search" FullWidth="false"/>
                        <DexButton Click="OnClearClick" Name="Clear" FullWidth="false"/>
                    </MudItem>
                    <MudSpacer/>
                    <MudItem>
                        <MudIconButton Icon="fas fa-refresh" Color="MudColor.Primary"
                                       OnClick="RefreshAppointments">
                        </MudIconButton>
                        <MudIconButton Icon="fas fa-print" Color="MudColor.Primary" OnClick="OnPrint"></MudIconButton>
                    </MudItem>
                </MudStack>
            </MudItem>
            <MudItem md="12" Style="@(ShowSchedule ? string.Empty : "display:none")">
                <SfSchedule @ref="_scheduleRef" TValue="AppointmentDto" Width="100%" Height="650px"
                            SelectedDate="@SelectedDate"
                            AllowDragAndDrop="true" ShowQuickInfo="true" EnableAutoRowHeight="true" ShowWeekend="false">
                    <ScheduleEventSettings TValue="AppointmentDto" AllowDeleting="_allowDeleting"
                                           AllowAdding="_allowAdding" EnableTooltip>
                        <SfDataManager AdaptorInstance="@typeof(AppointmentDataAdaptor)"
                                       Adaptor="Adaptors.CustomAdaptor">
                        </SfDataManager>
                    </ScheduleEventSettings>
                    <ScheduleTimeScale SlotCount="1" Interval="15" Enable="true"></ScheduleTimeScale>
                    <ScheduleResources>
                        <ScheduleResource TItem="HealthcareDto" TValue="Guid[]" DataSource="@HealthCares" Field="HcpId"
                                          Title="Name"
                                          Name="Healthcares" TextField="Name" IdField="Id"
                                          AllowMultiple="true">
                        </ScheduleResource>
                    </ScheduleResources>
                    <ScheduleGroup EnableCompactView="false" Resources="@_groupData"></ScheduleGroup>
                    <ScheduleViews>
                        <ScheduleView FirstDayOfWeek="1" Option="View.Day" StartHour="09:00"
                                      EndHour="17:00">
                        </ScheduleView>
                        <ScheduleView FirstDayOfWeek="1" Option="View.WorkWeek" StartHour="09:00"
                                      EndHour="17:00">
                        </ScheduleView>
                    </ScheduleViews>
                    <ScheduleTemplates>
                        <ResourceHeaderTemplate>
                            @{
                                var data = context.ResourceData as HealthcareDto;
                                <div class='template-wrap'>
                                    <div class="airline-details">
                                        <div class="airline-name">@data!.Name</div>
                                    </div>
                                </div>
                            }
                        </ResourceHeaderTemplate>
                    </ScheduleTemplates>
                    <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                        <HeaderTemplate>
                            <div class="quick-info-header">
                                <div class="quick-info-header-content" style="align-items: center; color: #919191;">
                                    <div class="quick-info-title">
                                    </div>
                                </div>
                            </div>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <div class="e-event-popup">
                                <div class="e-popup-header">
                                    <div class="e-header-icon-wrapper">
                                    </div>
                                    <div class="e-subject-wrap">
                                        @* <div class="e-subject e-text-ellipsis"></div> *@
                                    </div>
                                </div>
                                <div class="e-popup-content">
                                    <div class="e-date-time">
                                        <div class="e-date-time-icon e-icons"></div>
                                        <div class="e-date-time-wrapper e-text-ellipsis">
                                            <div
                                                class="e-date-time-details e-text-ellipsis">
                                                @(GetEventDetails((context as AppointmentDto)))
                                            </div>
                                        </div>
                                    </div>
                                    <div class="e-description">
                                    </div>
                                </div>
                                <div class="e-popup-footer">
                                    <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary"
                                               OnClick="() => CellClicked(((AppointmentDto) context).StartTime)">
                                        Create
                                        Appointment
                                    </MudButton>
                                    <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary"
                                               OnClick="@(e => OnCloseClick(context as AppointmentDto))">
                                        Close
                                    </MudButton>
                                </div>
                            </div>

                        </ContentTemplate>
                        <FooterTemplate>
                            <div class="cell-footer">
                            </div>
                        </FooterTemplate>
                    </ScheduleQuickInfoTemplates>
                    <ScheduleEvents TValue="AppointmentDto" OnPopupOpen="PopupOpen"></ScheduleEvents>
                </SfSchedule>

            </MudItem>
            <MudItem>
                @if (!ShowSchedule)
                {
                    <SfGrid DataSource="_gridDataSource" Width="auto" Height="505px">
                        <GridEvents TValue="AppointmentDto" OnRecordDoubleClick="SelectSchedule"></GridEvents>
                        <GridColumns>
                            <GridColumn Field="Subject" HeaderText="Subject/Patient" Width="120px"></GridColumn>
                            <GridColumn Field="Location" HeaderText="Location" Width="120px"></GridColumn>
                            <GridColumn Field="StartTime" HeaderText="StartTime" Width="120px" Format="g"
                                        Type="ColumnType.DateTime">
                            </GridColumn>
                            <GridColumn Field="EndTime" HeaderText="EndTime" Width="120px" Format="g"
                                        Type="ColumnType.DateTime">
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </MudItem>
        </MudStack>
    }
    else
    {
        <PermissionDenied/>
    }
}


@code {
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    [Parameter] public DateTime SelectedDate { get; set; } = DateTime.Now;

    private List<AppointmentDto> _dataSource = new();
    private List<AppointmentDto> _gridDataSource = new();
    SfSchedule<AppointmentDto> _scheduleRef;

    private string[] _groupData = ["Healthcares"];
    private bool ShowSchedule { get; set; } = true;
    private bool _allowAdding;
    private bool _allowDeleting;
    private bool _loading;


    List<string> _appointmentStatusList =
    [
        $"{@AppointmentConstants.Status.Active}",
        $"{@AppointmentConstants.Status.Cancelled}"
    ];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await Task.Delay(1500);
        _allowAdding = UnitOfWork.User.CheckPermission(PermissionConstants.Create);
        _allowDeleting = UnitOfWork.User.CheckPermission(PermissionConstants.Delete);
        _loading = false;
    }

    private string GetEventDetails(AppointmentDto data)
    {
        return data.StartTime.ToString("dddd dd, MMMM yyyy", CultureInfo.InvariantCulture) + " (" + data.StartTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + "-" + data.EndTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + ")";
    }

    private async Task PopupOpen(PopupOpenEventArgs<AppointmentDto> args)
    {
        if (args.Type == PopupType.Editor)
        {
            args.Cancel = true; //to prevent the default editor window
            var action = args.Data.Id == Guid.Empty ? "CellClick" : "AppointmentClick"; //to check whether the window opens on cell or appointment
            var parameters = new DialogParameters
            {
                {"StartDate", args.Data.StartTime},
                {"PatientList", PatientList},
                {"HealthCares", HealthCares}
            };
            var options = new DialogOptions()
                {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};

            if (action == "CellClick")
            {
                parameters.Add("HcpId", args.Data.HcpId);
                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await _scheduleRef.RefreshAsync();
                }
            }
            else
            {
                parameters.Add("Id", args.Data.Id);
                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await _scheduleRef.RefreshAsync();
                }
            }
        }

        if (args.Type == PopupType.QuickInfo)
        {
        }
    }

    private async Task RefreshAppointments()
    {
        await _scheduleRef.RefreshAsync();
    }

    private async Task CellClicked(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        
        parameters.Add("StartDate", dateTime);
        parameters.Add("PatientList", PatientList);
        parameters.Add("HealthCares", HealthCares);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await _scheduleRef.RefreshAsync();
        }
    }

    private async Task OnCloseClick(AppointmentDto data)
    {
        await _scheduleRef.CloseQuickInfoPopupAsync();
    }

    #region Search Appointments

    private string _statusSearchValue;
    private Guid _hcpSearchValue;

    public async Task OnSearchClick()
    {
        DateTime? startDate = null;
        DateTime? endDate = null;
        List<WhereFilter> searchObj = new List<WhereFilter>();
        if (!string.IsNullOrEmpty(_statusSearchValue))
        {
            searchObj.Add(new WhereFilter() {Field = "Status", Operator = "equal", value = _statusSearchValue, Condition = "or", IgnoreCase = true});
        }

        if (_hcpSearchValue != Guid.Empty)
        {
            searchObj.Add(new WhereFilter() {Field = "HcpId", Operator = "equal", value = _hcpSearchValue, Condition = "or", IgnoreCase = true});
        }

        if (searchObj.Count > 0)
        {
            Query query = new Query().Where(new WhereFilter() {Condition = "and", IsComplex = true, predicates = searchObj});
            List<AppointmentDto> eventCollections = await _scheduleRef.GetEventsAsync(startDate, endDate, true);
            object data = await new DataManager() {Json = eventCollections}.ExecuteQuery<AppointmentDto>(query);
            List<AppointmentDto> resultData = (data as List<AppointmentDto>);
            _gridDataSource = resultData;
            ShowSchedule = false;
        }
        else
        {
            ShowSchedule = true;
        }
    }

    public void OnClearClick()
    {
        ShowSchedule = true;
        _statusSearchValue = string.Empty;
        _hcpSearchValue = Guid.Empty;
    }

    public async Task OnPrint()
    {
        await _scheduleRef.PrintAsync();
    }

    #endregion

    private async Task SelectSchedule(RecordDoubleClickEventArgs<AppointmentDto> obj)
    {
        var parameters = new DialogParameters
        {
            {"Id", obj.RowData.Id},
            {"StartDate", obj.RowData.StartTime},
            {"PatientList", PatientList},
            {"HealthCares", HealthCares}
        };
        parameters.Add("HcpId", obj.RowData.HcpId);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
        }
    }

   

}

<style>
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
</style>