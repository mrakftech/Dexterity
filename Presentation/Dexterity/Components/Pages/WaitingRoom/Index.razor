@page "/waiting-room"
@using Dexterity.Components.Pages.Consultation.MainDetails.Dialogs
@using Dexterity.Components.Pages.PatientManager.Components.Transactions.Dialogs
@using Services.Features.PatientManagement.Dtos.Account
@using Services.Features.WaitingRoom.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Dexterity.Components.Pages.WaitingRoom.Components
@using BeginConsultationDialog = Dexterity.Components.Pages.WaitingRoom.Dialogs.BeginConsultationDialog
@layout MainLayout
<TopTitleBar Title="Waiting Room" Image="modules/patient-waiting.svg"/>
<InnerLayout>
    <NavigationItems>
        <DexMenuItem Text="@($"Patients Expected ({ExpectedPatients.Count})")" Icon="patient-expected-icon"
                     Click="@(() => ClickChangedTab(0))"/>
        <DexMenuItem Text="@($"Patients Present ({PresentPatients.Count})")" Icon="patient-waiting-icon"
                     Click="@(() => ClickChangedTab(1))"/>
        <DexMenuItem Text="@($"In Consultation ({ConsultationPatients.Count})")" Icon="patient-consultation-icon"
                     Click="@(() => ClickChangedTab(2))"/>
        <DexMenuItem Text="@($"Visit History ({VisitHistoryPatients.Count})")" Icon="patient-history-icon"
                     Click="@(() => ClickChangedTab(3))"/>
        <hr class="hr-custom"/>
        <RadzenPanelMenuItem Text="Patient Status" Icon="@DexHelperMethod.FaIcon("patient-status-icon")">

            @if (_tabs.ActivePanelIndex is 0 or 1)
            {
                @if (_status == AppointmentConstants.WaitingStatus.Expected)
                {
                    <DexMenuItem Disabled="@_disableBtns" Text="@(AppointmentConstants.WaitingStatus.Arrived)"
                                 Icon="fas fa-house-return"
                                 Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Arrived))"/>
                }
                else
                {
                    <DexMenuItem Disabled="@_disableBtns" Text="@(AppointmentConstants.WaitingStatus.Expected)"
                                 Icon="fas fa-house-return"
                                 Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Expected))"/>
                }
            }
            @if (_tabs.ActivePanelIndex == 1)
            {
                <DexMenuItem Disabled="@_disableConsultationBtn" Text="Begin Consultation"
                             Icon="fas fa-user-doctor-message"
                             Click="BeginConsultation"/>
            }
            @if (_tabs.ActivePanelIndex == 2)
            {
                if (_consultationId != Guid.Empty)
                {
                    <DexMenuItem Disabled="@_disableConsultationBtn" Text="Finished Consultation"
                                 Icon="fas fa-check-circle"
                                 Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Completed))"/>

                    <DexMenuItem Disabled="@_disableConsultationBtn" Text="Edit Consultation" Icon="fas fa-pencil"
                                 Click="@(() => EditBeginConsultationDialog(_consultationId))"/>
                }
            }
            @if (_status == AppointmentConstants.WaitingStatus.Expected)
            {
                <DexMenuItem Disabled="@_disableBtns" Text="Cancelled" Icon="fas fa-ban"
                             Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Cancelled))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Charge Patient" Icon="fas fa-credit-card"
                             Click="@OpenChargeDialog"/>
            }
        </RadzenPanelMenuItem>
        <hr class="hr-custom"/>
        @* <RadzenPanelMenuItem Text="Additional items" Icon="@DexHelperMethod.FaIcon("additional-items-icon")"> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="Update Visit" Icon="fas fa-clock" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="Transfer Patient" Icon="fas fa-right-left" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="Patient Summary" Icon="fas fa-clipboard-list-check" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="Patient Account" Icon="fas fa-piggy-bank" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="My Queue" Icon="fas fa-people-line" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @*     <DexMenuItem Disabled="@_disableBtns" Text="Walk In" Icon="fas fa-person-walking-arrow-right" *@
        @*                  Click="@(() => ClickChangedTab(0))"/> *@
        @* </RadzenPanelMenuItem> *@
    </NavigationItems>
    <DexContentTabs>
        <MudTabs @ref="_tabs">
            <MudTabPanel Text="">
                <TabTitle Title="@($"Patients Expected ({ExpectedPatients.Count})")">
                    <ActionButtons>
                        <DexButton Name="Refresh" Click="GetExpectedPatients"/>
                    </ActionButtons>
                </TabTitle>
                <WaitingPatientList Patients="ExpectedPatients"
                                    Loading="_loading"
                                    WaitingPatientGrid="_grid"
                                    Patient="_patient"
                                    RowSelected="GetPatientSelectedRecords"/>
            </MudTabPanel>
            <MudTabPanel Text="">
                <TabTitle Title="@($"Patients Present ({PresentPatients.Count})")"/>
                <WaitingPatientList Patients="PresentPatients"
                                    Loading="_loading"
                                    WaitingPatientGrid="_grid"
                                    Patient="_patient"
                                    RowSelected="GetPatientSelectedRecords"/>
            </MudTabPanel>
            <MudTabPanel Text="">
                <TabTitle Title="@($"In Consultation ({ConsultationPatients.Count})")"/>
                <WaitingPatientList Patients="ConsultationPatients"
                                    Loading="_loading"
                                    WaitingPatientGrid="_grid"
                                    Patient="_patient"
                                    RowSelected="GetPatientSelectedRecords"/>
            </MudTabPanel>
            <MudTabPanel Text="">
                <TabTitle Title="@($"Visit History ({VisitHistoryPatients.Count})")"/>
                <WaitingPatientList Patients="VisitHistoryPatients"
                                    Loading="_loading"
                                    WaitingPatientGrid="_grid"
                                    Patient="_patient"
                                    RowSelected="GetPatientSelectedRecords"/>
            </MudTabPanel>
        </MudTabs>
    </DexContentTabs>
</InnerLayout>


@code {
    private List<WaitingPatientDto> ExpectedPatients { get; set; } = new();
    private List<WaitingPatientDto> PresentPatients { get; set; } = new();
    private List<WaitingPatientDto> ConsultationPatients { get; set; } = new();
    private List<WaitingPatientDto> VisitHistoryPatients { get; set; } = new();

    private readonly SfGrid<WaitingPatientDto> _grid = new();
    private GetPatientAccountDto AccountDto { get; set; } = new();
    private PatientSummaryDto _patient = new();
    MudTabs _tabs = new();

    private bool _loading;
    private bool _disableBtns = true;
    private bool _disableConsultationBtn = true;


    private Guid _patientId = Guid.Empty;
    private Guid _appointmentId;
    private Guid _consultationId = Guid.Empty;
    private string _status;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GetWaitingRoom();

        //will refresh after 45 seconds
        //LoadRoomAfterTimer(45);
        _loading = false;
    }

    private void ClickChangedTab(int tabIndex)
    {
        _patientId = Guid.Empty;
        _appointmentId = Guid.Empty;
        _consultationId = Guid.Empty;
        _disableBtns = true;
        _disableConsultationBtn = true;
        _tabs.ActivatePanel(tabIndex);
    }

    private async Task GetAccountDetails()
    {
        AccountDto = await UnitOfWork.Patient.GetPatientAccount(_patientId);
    }

    private async Task GetExpectedPatients()
    {
        ExpectedPatients = await UnitOfWork.WaitingRoom.GetWaitingRoomPatients();
    }

    private async Task GetWaitingRoom()
    {
        ExpectedPatients = await UnitOfWork.WaitingRoom.GetWaitingRoomPatients();
        PresentPatients = await UnitOfWork.WaitingRoom.GetWaitingRoomPatients(AppointmentConstants.WaitingStatus.Arrived);
        ConsultationPatients = await UnitOfWork.WaitingRoom.GetWaitingRoomPatients(AppointmentConstants.WaitingStatus.InConsultation);
        VisitHistoryPatients = await UnitOfWork.WaitingRoom.GetVisitHistory();
    }

    private async Task GetPatient()
    {
        if (_patientId != Guid.Empty)
        {
            _patient = await UnitOfWork.Patient.GetPatientSummary(_patientId);
            ApplicationState.SetPatientId(_patientId,_patient.Name);
            await GetAccountDetails();
        }
        else
        {
            ApplicationState.ClearPatient();
        }
    }

    private async Task UpdatePatientStatus(string status)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"are you sure you want to change status to {status}?");
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.WaitingRoom.UpdateWaitingAppointment(_appointmentId, status, _consultationId);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessage(res.Messages.First());
                await GetWaitingRoom();
                ClickChangedTab(0);
                StateHasChanged();
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());
            }
        }
    }

    private async Task OpenChargeDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("PatientAccount", AccountDto);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<AddChargeModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            _disableBtns = true;
            await GetWaitingRoom();
        }
    }

    public async Task GetPatientSelectedRecords(RowSelectEventArgs<WaitingPatientDto> args)
    {
        if (args.Data.PatientId != Guid.Empty)
        {
            _patientId = args.Data.PatientId;
            _appointmentId = args.Data.AppointmentId;
            _status = args.Data.Status;
            _consultationId = args.Data.ConsultationId;
            if (_tabs.ActivePanelIndex == 0)
            {
            }

            if (_tabs.ActivePanelIndex == 1)
            {
                _disableConsultationBtn = false;
            }

            if (_tabs.ActivePanelIndex == 2)
            {
                _disableConsultationBtn = false;
            }

            if (_tabs.ActivePanelIndex == 3)
            {
                _disableConsultationBtn = true;
                _disableBtns = true;
            }

            _disableBtns = false;
            await GetPatient();
            StateHasChanged();
        }

        StateHasChanged();
    }

    private async Task BeginConsultation()
    {
        var parameters = new DialogParameters();
        parameters.Add("AppointmentId", _appointmentId);
        var options = new DialogOptions()
        {
            CloseButton = true, MaxWidth = MaxWidth.Small,
            FullWidth = true, Position = DialogPosition.Center
        };
        var dialogResult = await DialogService.ShowAsync<BeginConsultationDialog>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            _disableBtns = true;
            await GetWaitingRoom();
        }
    }

    private async Task EditBeginConsultationDialog(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<EditConsultationDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            _disableBtns = true;
            await GetWaitingRoom();
        }
    }

    private void LoadRoomAfterTimer(int seconds)
    {
        var startTimeSpan = TimeSpan.Zero;
        var periodTimeSpan = TimeSpan.FromSeconds(seconds);

        var timer = new Timer(async (e) =>
        {
            await GetWaitingRoom();
            //Snackbar.SuccessMessge("Success");
        }, null, startTimeSpan, periodTimeSpan);
    }

}