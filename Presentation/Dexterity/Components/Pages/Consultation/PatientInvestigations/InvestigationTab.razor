@using Domain.Entities.Consultation
@using Domain.Entities.Consultation.InvestigationDetails
@using Domain.Entities.Settings.Templates.InvestigationTemplates
@using Services.Features.Settings.Dtos
@using Shared.Constants.Module.Consultation
<TabTitle Title="Investigations" Icon="investigation-new.png"></TabTitle>

<MudStack Row>
    <MudItem md="3">
        <div class="m-2">
            <SfGrid DataSource="InvestigationGroups" Height="100px" ShowPager="false" Toolbar="@(new List<string>() {"Search"})">
                <GridEvents RowSelected="SelectedGroupRow" TValue="InvestigationGroup"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(InvestigationGroup.Name)" HeaderText="Investigation Groups"/>
                </GridColumns>
            </SfGrid>
        </div>

        <div class="m-2">
            <SfGrid DataSource="Investigations" Height="100px" Toolbar="@(new List<string>() {"Search"})">
                <GridEvents RowSelected="SelectedInvestigationRow" TValue="InvestigationDto"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(InvestigationDto.Name)" HeaderText=@($"Investigations:{_investigationTitle}")/>
                </GridColumns>
            </SfGrid>
            @if (_isAddInvestigation)
            {
                <DexLoadingButton Name="Add" Class="m-1" Click="OpenInvestigationForm"/>
            }
            <DexLoadingButton Name="Show All" Class="m-1" Click="ShowAllInvestigations"/>
        </div>

    </MudItem>
    <MudItem md="9">
        <div class="m-2">
            <SfGrid DataSource="PatientInvestigations" Height="400px">
                <GridEvents TValue="PatientInvestigation" RowDataBound="RowBound"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(PatientInvestigation.Date)" Format="d" Type="ColumnType.DateTime" HeaderText="Date"/>
                    <GridColumn Field="@nameof(PatientInvestigation.InvestigationId)" HeaderText="Name">
                        <Template>
                            @{
                                var item = (context as PatientInvestigation);
                            }
                            <span>@item!.Investigation.Name</span>
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(PatientInvestigation.Status)"/>
                    <GridColumn Field="@nameof(PatientInvestigation.HcpId)" HeaderText="HCP">
                        <Template>
                            @{
                                var item = (context as PatientInvestigation);
                            }
                            <span>@item!.Hcp.FullName</span>
                        </Template>
                    </GridColumn>
                    <GridColumn>
                        <Template>
                            @{
                                var item = (context as PatientInvestigation);
                            }
                            <button class="btn btn-sm btn-primary" @onclick="@(() => OpenInvestigationResultDetails(item!.Id))">Check Results</button>

                        </Template>
                    </GridColumn>
                    <GridColumn>
                        <Template>
                            @{
                                var item = (context as PatientInvestigation);
                            }
                            <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeletePatientInvestigation(item.Id)"/>
                            <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.History" Color="MudColor.Primary" OnClick="() => OpenCheckInvestigationHistory(item.Id)"/>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </MudItem>
</MudStack>
<style>
    .in-review {
        color: orangered!important;
        font-weight: bolder;
    }
</style>

@code {
    private List<InvestigationGroup> InvestigationGroups { get; set; } = new();
    private List<InvestigationDto> Investigations { get; set; } = new();
    private List<PatientInvestigation> PatientInvestigations { get; set; } = new();
    private string _investigationTitle = "";
    private bool _isAddInvestigation;
    private InvestigationDto _selectedInvestigation;

    protected override async Task OnInitializedAsync()
    {
        await GetInvestigationGroups();
        await GetPatientInvestigations();
        await GetInvestigations();
    }

    private async Task GetInvestigations()
    {
        Investigations = await UnitOfWork.Consultation.GetInvestigations(Guid.Empty);
    }

    private async Task GetInvestigationGroups()
    {
        InvestigationGroups = await UnitOfWork.Consultation.GetInvestigationGroups();
    }

    private async Task GetPatientInvestigations()
    {
        PatientInvestigations = await UnitOfWork.Consultation.GetPatientInvestigations();
    }

    private async Task SelectedGroupRow(RowSelectEventArgs<InvestigationGroup> arg)
    {
        _investigationTitle = arg.Data.Name;
        Investigations = await UnitOfWork.Consultation.GetInvestigations(arg.Data.Id);
    }

    private async Task ShowAllInvestigations()
    {
        await GetInvestigations();
        _investigationTitle = "All";
    }

    private void SelectedInvestigationRow(RowSelectEventArgs<InvestigationDto> arg)
    {
        if (arg.Data is not null)
        {
            _isAddInvestigation = true;
            _selectedInvestigation = arg.Data;
        }
        else
        {
            _selectedInvestigation = new InvestigationDto();
            _isAddInvestigation = false;
        }
    }

    private async Task OpenInvestigationForm()
    {
        var parameters = new DialogParameters();
        parameters.Add("InvestigationId", _selectedInvestigation.Id);
        parameters.Add("InvestigationName", _selectedInvestigation.Name);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<InvestigationForm>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetPatientInvestigations();
        }
    }


    private async Task OpenInvestigationResultDetails(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("PatientInvestigationId", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<InvestigationResult>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetPatientInvestigations();
        }
    }

    private async Task DeletePatientInvestigation(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Consultation.DeletePatientInvestigation(id);
            Snackbar.SuccessMessage(userRes.Messages.First());
            await GetPatientInvestigations();
        }
    }

    public void RowBound(RowDataBoundEventArgs<PatientInvestigation> args)
    {
        if (args.Data.Status == InvestigationStatus.InReview)
        {
            args.Row.AddClass(new string[] {"in-review"});
        }
    }

    private async Task OpenCheckInvestigationHistory(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("PatientIvestigationId",id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<CheckInvestigationHistory>("", parameters, options);
    }

}