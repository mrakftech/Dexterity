@using Services.Features.Consultation.Dto.Immunisations
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@using Domain.Entities.Consultation.Immunisations
@using Domain.Entities.Consultation
<TabTitle Title="Immunisations" Icon="vaccine.png">
    <ActionButtons>
        <div class="col-md-2">
            <select @onchange="@(HandleChange)" class="form-control">
                <option>All</option>
                <option>Given</option>
                <option>Due</option>
                <option>Cancelled</option>
            </select>
        </div>
        <button type="button" class="btn btn-primary btn-sm m-2"><i class="fa fa-print"></i> Print STC</button>
        <button type="button" class="btn btn-primary btn-sm m-2" @onclick="OpenRecurringDialog"><i class="fa fa-repeat"></i> Add Recurring</button>
        @if (_administerId != Guid.Empty)
        {
            <button type="button" class="btn btn-primary btn-sm m-2" @onclick="OpenReactionFormDialog"><i class="fas fa-head-side-cough"></i> Add Reaction</button>
            <button type="button" class="btn btn-primary btn-sm m-2" @onclick="(() => GivenAdministerShot(_administerId))"><i class="fa fa-syringe"></i> Administer</button>
            <button type="button" class="btn btn-danger btn-sm" @onclick="CancelAdminister"><i class="fa fa-cancel"></i> Cancel Administer</button>
        }
    </ActionButtons>
</TabTitle>

<MudStack Row>
    <MudItem md="4">
        <SfGrid DataSource="@ImmunisationsSchedules" Height="350px">
            <GridEvents TValue="ImmunisationScheduleDto" RowSelected="SelectSchedule"></GridEvents>
            <GridTemplates>
                <DetailTemplate>
                    @{
                        var con = context as ImmunisationScheduleDto;
                        <SfListBox DataSource="@con!.Courses" TValue="Course" TItem="Course">
                            <ListBoxFieldSettings Text="Name" Value="Id"></ListBoxFieldSettings>
                        </SfListBox>
                    }

                </DetailTemplate>
                <EmptyRecordTemplate>
                    <span>No records to display, create new schedule</span>
                </EmptyRecordTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn Field="@nameof(ImmunisationScheduleDto.ImmunisationProgram.Name)" HeaderText="Schedule">
                    <Template>
                        @{
                            var con = context as ImmunisationScheduleDto;
                            <span>@con!.ImmunisationProgram.Name</span>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
        <div class="mt-2">
            <h4>Reactions</h4>
            <SfGrid DataSource="_reactions" Height="350px">
                <GridColumns>
                    <GridColumn Field="@nameof(Reaction.ReactionDate)" HeaderText="Date" Format="d" Type="ColumnType.DateTime"/>
                    <GridColumn Field="@nameof(Reaction.Side)"/>
                    <GridColumn Field="@nameof(Reaction.AdministerShot.ShotBatch.Shot.Name)">
                        <Template>
                            @{
                                var con = context as Reaction;
                                <span>@con!.AdministerShot.ShotBatch.Shot.Name</span>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(Reaction.ReactionType)" HeaderText="Reaction Type"/>
                    <GridColumn HeaderText="Actions" Width="120">
                        <Template>
                            @{
                                var item = (context as Reaction);
                                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => RemoveReaction(item.Id)"/>
                            }
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>

    </MudItem>
    <MudItem md="8">
        <SfGrid DataSource="_administerShots">
            <GridEvents TValue="AdministerShot" OnRecordDoubleClick="DoubleClickAdministerShot" RowSelected="SelectedAdminister"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(AdministerShot.DueDate)" Format="d" Type="ColumnType.DateTime" HeaderText="Due Date"/>
                <GridColumn Field="@nameof(AdministerShot.GivenDate)" Format="d" Type="ColumnType.DateTime" HeaderText="Given Date">
                    <Template>
                        @{
                            var con = context as AdministerShot;
                            if (con.GivenDate is null)
                            {
                                <span>-</span>
                            }
                            else
                            {
                                <span>@con!.GivenDate.Value.ToString("d")</span>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(AdministerShot.ShotBatch.Shot.Name)" HeaderText="Shot">
                    <Template>
                        @{
                            var con = context as AdministerShot;
                            <span>@con!.ShotBatch.Shot.Name</span>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(AdministerShot.Hcp.FullName)" HeaderText="Administer By">
                    <Template>
                        @{
                            var con = context as AdministerShot;
                            if (con!.Hcp is null)
                            {
                                <span>-</span>
                            }
                            else
                            {
                                <span>@con!.Hcp.FullName</span>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </MudItem>
</MudStack>

@code {
    [Parameter] public List<ImmunisationScheduleDto> ImmunisationsSchedules { get; set; } = [];
    private List<AdministerShot> _administerShots = [];
    private List<Reaction> _reactions = [];
    //private List<Course> _courses = [];
    private Guid _scheduleId = Guid.Empty;
    private Guid _administerId;

    protected override async Task OnInitializedAsync()
    {
        await GetImmunisationSchedules();
    }

    private async Task GetAdministerShots(Guid scheduleId)
    {
        _administerShots = await UnitOfWork.Consultation.GetAdministerShots(scheduleId);
    }

    private async Task GetImmunisationSchedules()
    {
        ImmunisationsSchedules = await UnitOfWork.Consultation
            .GetImmunisationSchedule(ApplicationState.GetSelectPatientId());
    }

    private async Task SelectSchedule(RowSelectEventArgs<ImmunisationScheduleDto> args)
    {
        if (args.Data is not null)
        {
            _scheduleId = args.Data.Id;
            await GetAdministerShots(_scheduleId);
            StateHasChanged();
        }
    }

    private async Task GetReactions()
    {
        _reactions = await UnitOfWork.Consultation.GetReactions(_administerId);
    }

    private async Task DoubleClickAdministerShot(RecordDoubleClickEventArgs<AdministerShot> args)
    {
        if (args.RowData.Id != Guid.Empty)
        {
            await GivenAdministerShot(args.RowData.Id);
        }
    }

    private async Task GivenAdministerShot(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<AdministerShotFormDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetAdministerShots(_scheduleId);
            StateHasChanged();
        }
    }

    private async Task SelectedAdminister(RowSelectEventArgs<AdministerShot> args)
    {
        if (args.Data is not null)
        {
            _administerId = args.Data.Id;
            await GetReactions();
        }
    }

    private async Task CancelAdminister()
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Consultation.CancelAdministerShot(_administerId);
            await GetAdministerShots(_scheduleId);
            StateHasChanged();
            Snackbar.SuccessMessage(res.Messages.First());
            _administerId = Guid.Empty;
        }
    }

    private async Task OpenReactionFormDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ReactionId", Guid.Empty);
        parameters.Add("AdministerShotId", _administerId);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<ReactionFormDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetAdministerShots(_scheduleId);
            await GetReactions();
            StateHasChanged();
        }
    }

    private async Task HandleChange(ChangeEventArgs args)
    {
        _administerShots = await UnitOfWork.Consultation.FilterAdministerShots(_scheduleId, args.Value.ToString());
    }

    private async Task RemoveReaction(Guid itemId)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Consultation.RemoveReaction(itemId);
            await GetReactions();
            Snackbar.SuccessMessage(res.Messages.First());
            StateHasChanged();
        }
    }

    private async Task OpenRecurringDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<AddImmunisationRecurring>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
           await GetImmunisationSchedules();
            StateHasChanged();
        }
    }

}