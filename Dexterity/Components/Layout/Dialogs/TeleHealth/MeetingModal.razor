@using Services.Features.PatientManagement.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using global::Services.Features.Messaging.Dtos.Sms

<MudDialog>
    <TitleContent>
        Meeting
    </TitleContent>
    <DialogContent>
        @if (_processing)
        {
            <CommonLoader/>
        }
        else
        {
            <p>@_messageFrameLoading</p>
            <MudStack Row>
                @if (string.IsNullOrWhiteSpace(_messageFrameLoading))
                {
                    <MudGrid Justify="MudJustify.FlexEnd">
                        <MudItem>
                            <MudTooltip Text="Invite patients">
                                <MudIconButton Icon="fas fa-paper-plane" Color="MudColor.Primary" OnClick="ToggleOpen"></MudIconButton>
                            </MudTooltip>
                            <MudPopover Open="_open" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                                <MudPaper Outlined="true" Class="px-4 py-8">
                                    <MudStack>
                                        <DexForm Model="_mailRequest" ColumnCount="1" OnValidSubmit="ShareLinkToPatient">
                                            <Fields>
                                                <FormItem Field="@nameof(_mailRequest.To)">
                                                    <Template>
                                                        <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"/>
                                                    </Template>
                                                </FormItem>
                                                <FormItem Field="@nameof(_mailRequest.To)">
                                                    <Template>
                                                        <DexTextInputField Label="Patient Email" @bind-FieldDataSource="_mailRequest.To" FieldRole="TextRole.Email" />
                                                    </Template>
                                                </FormItem>
                                            </Fields>
                                            <Buttons>
                                                <DexLoadingButton Processing="_processing" Type="MudButtonType.Submit" Name="Send Mail"></DexLoadingButton>
                                                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="MudColor.Error">Close</MudButton>
                                            </Buttons>
                                        </DexForm>


                                    </MudStack>
                                </MudPaper>
                            </MudPopover>
                        </MudItem>
                        <MudItem>
                            <MudTooltip Text="Copy Meeting Link">
                                <MudIconButton Icon=" fas fa-copy" Color="MudColor.Primary" OnClick="CopyMeetingLink"></MudIconButton>
                            </MudTooltip>
                        </MudItem>
                        <MudItem>
                            <MudButton Size="MudSize.Large" OnClick="EndCall" Variant="Variant.Filled" Color="MudColor.Secondary"> End Meeting</MudButton>

                        </MudItem>
                    </MudGrid>
                }
            </MudStack>
            <iframe allow="camera; microphone" src="@_meetingLink" height="800" @onload="FrameLoaded"></iframe>
        }
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private List<PatientListDto> PatientList { get; set; } = new();
    private bool _processing;
    private string _meetingLink;
    private MailRequest _mailRequest = new();

    private string _messageFrameLoading = "Loading video call components....";

    private bool _open;
    private void ToggleOpen() => _open = !_open;

    protected override async Task OnInitializedAsync()
    {
        await CreateMeetingLink();
    }

    private async Task CreateMeetingLink()
    {
        _processing = true;
        _messageFrameLoading = "Loading video call components....";
        ApplicationState.MeetingName = CryptographyHelper.GetUniqueKey(25);
        var res = await DailyMeetingRoom.CreateMeetingLink(ApplicationState.MeetingName);
        _meetingLink = res.Url;
        await GetPatients();
        await Task.Delay(2000);
        _processing = false;
    }

    private async Task EndCall(MouseEventArgs obj)
    {
        await DailyMeetingRoom.DeleteRoom(ApplicationState.MeetingName);
        MudDialog.Close();
    }

    private void FrameLoaded(Microsoft.AspNetCore.Components.Web.ProgressEventArgs e)
    {
        _messageFrameLoading = "";
    }

    private async Task CopyMeetingLink()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _meetingLink);
        Snackbar.SuccessMessge("Link Copied");
    }

    private async Task ShareLinkToPatient()
    {
        if (string.IsNullOrWhiteSpace(_mailRequest.To))
        {
            Snackbar.FailMessge("Please enter patient email");
            return;
        }

        _processing = true;

        await Task.Delay(2500);
        var mailRequest = new MailRequest()
        {
            Subject = "Meeting Link",
            Body = _meetingLink,
            To = _mailRequest.To
        };
        await MailService.SendAsync(mailRequest, default);
        Snackbar.SuccessMessge("Email has been sent.");
        _processing = false;
    }

    private async Task GetPatients()
    {
        PatientList = await UnitOfWork.Patient.GetPatients();
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            _mailRequest.To = patient.Email;
        }
    }

}