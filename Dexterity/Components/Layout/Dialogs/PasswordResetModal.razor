@using global::Services.Features.UserAccounts.Dtos.User
<MudDialog>
    <DialogContent>
        <EditForm Model="ResetPasswordDto" OnValidSubmit="Submit">
            <DataAnnotationsValidator/>
            <MudText>Password Reset</MudText>
            <hr/>
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary/>
            <MudTextField @bind-Value="@ResetPasswordDto.NewPassword" Label="Password" Required></MudTextField>
            <ValidationMessage For="@(() => ResetPasswordDto.NewPassword)"/>
            <MudTextField @bind-Value="@ResetPasswordDto.ConfirmPassword" Label="Confirm Password" Required></MudTextField>
            <ValidationMessage For="@(() => ResetPasswordDto.ConfirmPassword)"/>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudColor.Success" Variant="Variant.Filled" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public ResetPasswordDto ResetPasswordDto { get; set; } = new();

    async Task Submit()
    {
        if (ResetPasswordDto.NewPassword == ResetPasswordDto.ConfirmPassword)
        {
            var res = await UnitOfWork.User.ResetPassword(ResetPasswordDto);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessge("Password has been reset.");
                MudDialog.Close();
            }
            else
            {
                Snackbar.FailMessge("Something went wrong with password reset.");
            }
        }
        else
        {
            Snackbar.FailMessge("Password is not matched");
        }


        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}