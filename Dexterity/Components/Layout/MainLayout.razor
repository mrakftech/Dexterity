@using Dexterity.Extensions
@using Dexterity.Components.Layout.Components.User
@using Dexterity.Components.Pages.UserManager.Permission
@using Dexterity.Components.Layout.Components.Common
@inherits LayoutComponentBase
<style>
    body {
        font-family: "Open Sans", serif;
        background-color: #debdde;
        background-image: linear-gradient(338deg, #debdde 0%, #a9dfe6 100%) !important;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center;
        background-size: cover;
    }
</style>
<link href="@_sfTheme" rel="stylesheet"/>
<link href="@_radzenTheme" rel="stylesheet">
<link rel="stylesheet" href="assets/css/syncfusion/custom-sf.css"/>
<MudLayout>
    <MudAppBar Elevation="1" Dense="false">
        <MudImage Src="favicon.png" Fluid="true" Width="32" Class="mr-3" Style="margin-left: -16px;"
                  ObjectPosition="ObjectPosition.Center">
        </MudImage>
        <MudIconButton Icon="hamburger-icon" Color="MudColor.Inherit" Edge="Edge.Start"
                       OnClick="@ToggleDrawer"/>
        <MenuBar/>
        <MudSpacer/>
        <UserPersonalToolBar/>
        <MudTooltip Text="Change Theme">
            <MudToggleIconButton Icon="night-mode-icon" Color="MudColor.Info"
                                 ToggledIcon="light-mode-icon" ToggledColor="MudColor.Info"
                                 ToggledChanged="ThemeChange"/>
        </MudTooltip>

    </MudAppBar>
    <MudDrawer
        Style="color: white!important; background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%) !important;"
        @bind-Open="@_open" ClipMode="DrawerClipMode.Docked" Breakpoint="@MudBreakpoint.Sm" Elevation="1"
        Width="200px" Variant="@DrawerVariant.Mini" Class="bg-side-nav">
        <NavMenu/>
        <MudSpacer/>
        <MudNavMenu Style="margin-bottom: 75px">
            <MudNavLink Match="NavLinkMatch.All" Icon=" fas fa-right-from-bracket" IconColor="MudColor.Info"
                        OnClick="Logout">
                <MudText Color="MudColor.Info" Align="MudAlign.Left">Log out</MudText>
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="">
        <MudContainer Class="mt-2" MaxWidth="MaxWidth.ExtraExtraLarge">
            <CascadingValue Value="_hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_currentTheme"/>
<MudPopoverProvider/>
<MudDialogProvider BackdropClick="false"/>
<MudSnackbarProvider/>
<RadzenComponents/>
<audio id="notification" src="assets/media/notification.mp3"></audio>

@code {
    private readonly MudTheme _currentTheme = DexterityTheme.DefaultTheme;
    private bool _open = true;
    private bool _isDarkMode;
    private string _sfTheme = "_content/Syncfusion.Blazor.Themes/bootstrap.css";
    private string _radzenTheme = "assets/css/radzen/default-base.css";
    private HubConnection _hubConnection;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = _hubConnection.TryInitialize(NavigationManager);
            await _hubConnection.StartAsync();
            _hubConnection.On<string, Guid, Guid>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
            {
                if (ApplicationState.Auth.CurrentUser.UserId == receiverUserId)
                {
                    JsRuntime.InvokeAsync<string>("PlayAudio", "notification");
                    Snackbar.SuccessMessage(message);
                }
            });
            await _hubConnection.SendAsync(ApplicationConstants.SignalR.OnConnect, ApplicationState.Auth.CurrentUser.UserId);
            Snackbar.SuccessMessage($"Logged In As {ApplicationState.Auth.CurrentUser.Name}");
            await CheckPasswordReset();
        }
        catch (Exception e)
        {
            Snackbar.FailMessage(e.Message);
        }
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private void Logout(MouseEventArgs obj)
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task CheckPasswordReset()
    {
        if (ApplicationState.Auth.CurrentUser.IsForceReset &&
            ApplicationState.Auth.CurrentUser.ResetPasswordAt <= DateTime.UtcNow &&
            ApplicationState.Auth.CurrentUser.RoleName != RoleConstants.AdministratorRole)
        {
            var parameters = new DialogParameters {{"UserId", ApplicationState.Auth.CurrentUser.UserId}};
            var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
            await DialogService.ShowAsync<PasswordResetDialog>("", parameters, options);
        }
    }

    private void ThemeChange(bool isDarkMode)
    {
        if (isDarkMode)
        {
            _isDarkMode = isDarkMode;
            _sfTheme = "_content/Syncfusion.Blazor.Themes/bootstrap-dark.css";
            _radzenTheme = "assets/css/radzen/material-dark.css";
        }
        else
        {
            _isDarkMode = isDarkMode;
            _sfTheme = "_content/Syncfusion.Blazor.Themes/bootstrap.css";
            _radzenTheme = "assets/css/radzen/default-base.css";
        }
    }

}