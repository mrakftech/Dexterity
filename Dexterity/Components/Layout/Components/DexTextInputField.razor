@using System.Linq.Expressions
<Validation>
    <Field Horizontal="@Horizontal">
        <FieldLabel>@Label:</FieldLabel>
        <TextEdit Placeholder="@Placeholder"
                  Text="@FieldDataSource"
                  TextChanged="@FieldDataSourceChanged"
                  TextExpression="@FieldDataSourceExpression"
                  ReadOnly="@IsFieldReadOnly"
                  InputMode="@FieldType"
                  Disabled="@IsFieldDisabled"
                  Role="@FieldRole">
            <Feedback>
                <FieldHelp>@HelpText</FieldHelp>
                <ValidationError/>
            </Feedback>
        </TextEdit>
    </Field>
</Validation>


@code {
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public bool IsFieldReadOnly { get; set; } = false;
    [Parameter] public bool IsFieldDisabled { get; set; } = false;
    [Parameter] public TextInputMode FieldType { get; set; } = TextInputMode.Text;
    [Parameter] public TextRole FieldRole { get; set; } = TextRole.Text;
    [Parameter] public bool Horizontal { get; set; } = false;

    protected string _fieldDataSource;

    [Parameter]
    public string FieldDataSource
    {
        get => _fieldDataSource;
        set
        {
            if (_fieldDataSource == value) return;
            _fieldDataSource = value;
            FieldDataSourceChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<string> FieldDataSourceChanged { get; set; }
    [Parameter] public Expression<Func<string>> FieldDataSourceExpression { get; set; }
}