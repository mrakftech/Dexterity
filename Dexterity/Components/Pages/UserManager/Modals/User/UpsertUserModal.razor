@using Domain.Entities.UserAccounts
@using global::Services.Features.UserAccounts.Dtos.User
@using Services.Features.Settings.Dtos
@using Services.State
@using Shared.Helper
@using Dexterity.Components.Pages.UserManager.Components
@using Dexterity.Components.Pages.UserManager.Components.Form
@if (!_loadScreen)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h4" Class="text-bold">@_title</MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="UserDto">
                <Validations @ref="@ValidationsRef" Model="@UserDto" Mode="ValidationMode.Manual">
                    <Tabs SelectedTab="@selectedTab">
                        <Items>
                            <Tab Name="basic">Basic Information</Tab>
                            <Tab Name="available">Availability</Tab>
                            <Tab Name="clinic">Clinic</Tab>
                        </Items>
                        <Content>
                            <TabPanel Name="basic">
                                <BasicInfo UserId="UserId" UserDto="UserDto"></BasicInfo>
                            </TabPanel>
                            <TabPanel Name="available">
                                <AvailabilityTab UserDto="UserDto"></AvailabilityTab>
                            </TabPanel>
                            <TabPanel Name="clinic">
                                @if (UserId != Guid.Empty)
                                {
                                    <UserClinicTab UserId="UserId" />
                                }
                                else
                                {
                                    <MudText Color="MudColor.Dark">Please save the user first.</MudText>
                                }

                            </TabPanel>

                        </Content>
                    </Tabs>
                </Validations>
            </EditForm>

        </DialogContent>
        <DialogActions>
            <DexLoadingButton Name="Save User" Processing="_processing" Click="SaveUser" Icon="fas fa-floppy-disk"></DexLoadingButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <CommonLoader />
}


@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;
    private CreateUserDto UserDto { get; set; } = new();
    Validations ValidationsRef { get; set; }
    private bool _processing;
    private bool _loadScreen;
    private string _title = "";
    string selectedTab = "basic";
    protected override async Task OnInitializedAsync()
    {
        _loadScreen = true;
        _title = UserId != Guid.Empty ? "Edit User" : "New User";
        await GetEditUser();
        _loadScreen = false;
    }
    private async Task GetEditUser()
    {
        if (UserId != Guid.Empty)
        {
            var user = await UnitOfWork.User.GetUser(UserId);
            var data = Mapper.Map<CreateUserDto>(user);
            data.ResetPassword = Method.GetPasswordResetIn(user.ResetPasswordAt);
            UserDto = data;
        }
    }
    private async Task SaveUser()
    {
        _processing = true;

        if (await ValidationsRef.ValidateAll())
        {
            if (string.IsNullOrWhiteSpace(UserDto.UserType))
            {
                Snackbar.FailMessge("Please select user type.");
                _processing = false;
                return;
            }

            if (UserDto.RoleId == Guid.Empty)
            {
                Snackbar.FailMessge("Please select role.");
                _processing = false;

                return;
            }
            if (UserDto.WorkingDays == null)
            {
                Snackbar.FailMessge("Please select Working days.");
                _processing = false;
                return;
            }


            await Task.Delay(2000);
            var res = await UnitOfWork.User.SaveUser(UserId, UserDto);
            if (res.Succeeded)
            {
                MudDialog.Close();
                Snackbar.SuccessMessge(res.Messages.First());
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }

        _processing = false;
    }


}