@using global::Services.Features.UserAccounts.Dtos.User
@using Dexterity.Components.Pages.UserManager.Components.Form
@if (!_loadScreen)
{
    <DexDialog>
        <DialogTitle>@_title</DialogTitle>
        <Content>
            <SfTab>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Basic Information"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <DexForm Model="UserDto" OnValidSubmit="SaveUser" ColumnCount="3">
                                <Fields>
                                    <BasicInfo UserId="UserId" UserDto="UserDto"></BasicInfo>
                                </Fields>
                                <Buttons>
                                    <DexLoadingButton Name="Save User" Processing="_processing" Type="MudButtonType.Submit" Icon="fas fa-floppy-disk"></DexLoadingButton>
                                </Buttons>
                            </DexForm>
                        </ContentTemplate>
                    </TabItem>
                    @if (UserId != Guid.Empty)
                    {
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Clinic"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                           
                                <UserClinicTab UserId="UserId"/>
                            </ContentTemplate>
                        </TabItem>
                    }
                </TabItems>
            </SfTab>
        </Content>
    </DexDialog>
}
else
{
    <CommonLoader/>
}


@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;
    private CreateUserDto UserDto { get; set; } = new();
    private bool _processing;
    private bool _loadScreen;
    private string _title = "";

    protected override async Task OnInitializedAsync()
    {
        _loadScreen = true;
        _title = UserId != Guid.Empty ? "Edit User" : "New User";
        await GetEditUser();
        _loadScreen = false;
    }

    private async Task GetEditUser()
    {
        if (UserId != Guid.Empty)
        {
            var user = await UnitOfWork.User.GetUser(UserId);
            var data = Mapper.Map<CreateUserDto>(user);
            data.ResetPassword = Method.GetPasswordResetIn(user.ResetPasswordAt);
            UserDto = data;
        }
    }

    private async Task SaveUser()
    {
        _processing = true;


        await Task.Delay(2000);
        var res = await UnitOfWork.User.SaveUser(UserId, UserDto);
        if (res.Succeeded)
        {
            MudDialog.Close();
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }

        _processing = false;
    }


}