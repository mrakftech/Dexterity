@using Dexterity.Components.Pages.UserManager.Modals.User
@using Shared.Responses.UserAccounts
<MudText Align="Align.Center" Typo="Typo.h4" Class="text-bold">Users</MudText>

<MudDataGrid RowsPerPage="8" Style="margin-top: 3%" Loading="_userLoading" LoadingProgressColor="MudColor.Secondary" FixedHeader="true" T="UserResponse" Dense="true" Bordered="true" Hover="true" Items="@UsersList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter"
             Hideable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Class="text-bold">Users</MudText>
        <MudFab Color="MudColor.Primary" StartIcon="@MudIcons.Material.Filled.Add" Size="MudSize.Small" Label="Add New User" Class="ml-5" OnClick="() => UpsertUserModal(Guid.Empty)"/>
        <MudSpacer/>
        <MudItem md="3">
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@MudIcons.Material.Filled.Search"
                          Variant="Variant.Outlined"
                          IconSize="MudSize.Medium"
                          Margin="MudMargin.Dense"
                          Class="mt-0">
            </MudTextField>
        </MudItem>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.CreatedDate" Title="Created At" Format="MM/dd/yyyy h:mm tt" Sortable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.FullName" Title="Name" Sortable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.Username" Title="Username" Sortable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.UserType" Title="User Type" Sortable="false" Filterable="false"/>
        <TemplateColumn CellClass="" Title="Active">
            <CellTemplate>
                @if (context.Item.IsActive)
                {
                    <MudText Color="MudColor.Primary"> Yes</MudText>
                }
                else
                {
                    <MudText Color="MudColor.Error"> No</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end" Title="Actions">
            <CellTemplate>
                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit" Color="MudColor.Primary" OnClick="() => UpsertUserModal(context.Item.Id)"/>
                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteUser(context.Item.Id)"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserResponse"/>
    </PagerContent>
</MudDataGrid>

@code {
    private List<UserResponse> UsersList { get; set; } = new();
    private string _searchString;
    private bool _userLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        _userLoading = true;
        await Task.Delay(2000);
        UsersList = await UnitOfWork.User.GetUsers();
        _userLoading = false;
    }

    private Func<UserResponse, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    private async Task DeleteUser(Guid id)
    {
        var parameters = new DialogParameters();
        //parameters.Add("ContentText", "Do you want to confirm?");
        //parameters.Add("ButtonText", "Yes");
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.User.DeleteUser(id);
            var user = UsersList.FirstOrDefault(x => x.Id == id);
            UsersList.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessge(userRes.Messages.First());
        }
    }

    private async Task UpsertUserModal(Guid id)
    {
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertUserModal>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetUsers();
        }
    }

}