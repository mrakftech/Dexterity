@using Domain.Entities.UserAccounts
@using Services.Features.UserAccounts.Dtos.User
<FormGroup LabelText="Basic Information" ColumnCount="2" ColumnSpacing="20px">
    <FormItem Field="@nameof(CreateUserDto.FirstName)" LabelText="First Name" ColumnSpan="1"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.LastName)" LabelText="Last Name" ColumnSpan="1"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.Email)" LabelText="Email" ColumnSpan="1"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.Phone)" LabelText="Phone" ColumnSpan="1"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.Mcn)" LabelText="MCN" ColumnSpan="2"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.UserTypeId)" ColumnSpan="1" EditorType="FormEditorType.DropDownList">
        <Template>
            <label class="e-form-label">User Type</label>
          
            <SfDropDownList TValue="Guid" TItem="UserType" 
                            Placeholder="Select user type" 
                            DataSource="@_userTypes" 
                            @bind-Value="@UserDto.UserTypeId">
                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
            </SfDropDownList>
        </Template>
    </FormItem>
    <FormItem Field="@nameof(CreateUserDto.OtherField)" ColumnSpan="1">
        <Template>
            <label class="e-form-label">Roles</label>
            <SfDropDownList TValue="Guid" TItem="RoleResponseDto" Placeholder="Select role" DataSource="@Roles" @bind-Value="@UserDto.RoleId">
                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
            </SfDropDownList>
        </Template>
    </FormItem>
    <FormItem Field="@nameof(CreateUserDto.ResetPassword)" ColumnSpan="1">
        <Template>
            <label class="e-form-label">Reset Password</label>
            <SfDropDownList TValue="string" TItem="ApplicationConstants.ResetDuration" @bind-Value="@UserDto.ResetPassword"
                            Placeholder="Select reset password" DataSource="@ResetPasswordDurations">
                <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
            </SfDropDownList>
        </Template>
    </FormItem>
</FormGroup>
<FormGroup LabelText="Login Information" ColumnCount="1">
    <FormItem Field="@nameof(CreateUserDto.Username)" LabelText="Username" ColumnSpan="2"/>
    @if (UserId == Guid.Empty)
    {
        <FormItem Field="@nameof(CreateUserDto.Password)" LabelText="Password" ColumnSpan="2" EditorType="FormEditorType.Checkbox"></FormItem>
    }
    <FormItem Field="@nameof(CreateUserDto.IsActive)" LabelText="Active" ColumnSpan="1" EditorType="FormEditorType.Checkbox"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.IsUpdatePassword)" LabelText="Update Password" ColumnSpan="1" EditorType="FormEditorType.Checkbox"></FormItem>
    <FormItem Field="@nameof(CreateUserDto.IsForceReset)" LabelText="Force Reset" ColumnSpan="2" EditorType="FormEditorType.Checkbox"></FormItem>
</FormGroup >
<FormGroup LabelText="Availability" ColumnCount="1">
    <FormItem Field="@nameof(CreateUserDto.StartHour)"  ColumnSpan="2" >
        <Template>
            <label class="e-form-label">Start Hour</label>
            <SfTimePicker TValue="TimeSpan" @bind-Value="@UserDto.StartHour" ></SfTimePicker>
        </Template>
    </FormItem>
    <FormItem Field="@nameof(CreateUserDto.EndHour)" ColumnSpan="2" >
        <Template>
            <label class="e-form-label">End Hour</label>
            <SfTimePicker TValue="TimeSpan" @bind-Value="@UserDto.EndHour"></SfTimePicker>
        </Template>
    </FormItem>
    <FormItem Field="@nameof(CreateUserDto.WorkingDays)" ColumnSpan="2">
        <Template>
            <label class="e-form-label">Week Days</label>
            <SfMultiSelect TValue="List<int>" TItem="WeekDay" Placeholder="Working Days" DataSource="@WeekDays" @bind-Value="@UserDto.WorkingDays">
                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </Template>
    </FormItem>
</FormGroup>

@code {
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;
    [Parameter] public CreateUserDto UserDto { get; set; } = new();
    private List<WeekDay> WeekDays { get; set; } = new();
    private List<UserType> _userTypes  = new();
    private List<ApplicationConstants.ResetDuration> ResetPasswordDurations { get; set; } = ApplicationConstants.GetPasswordResetDuration();
    private List<RoleResponseDto> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
       await GetUserTypes();
        GetWeekDays();
    }

    private void GetWeekDays()
    {
        foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
        {
            WeekDays.Add(new WeekDay()
            {
                Id = Convert.ToInt32(day),
                Name = @day.ToString()
            });
        }
    }

    private async Task GetUserTypes()
    {
        _userTypes = await UnitOfWork.User.GetUserTypes();
    }
    private async Task GetRoles()
    {
        Roles = await UnitOfWork.User.GetRoles();
    }

    public class WeekDay
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

}