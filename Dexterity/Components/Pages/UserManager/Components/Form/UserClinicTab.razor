@using Services.Features.Settings.Dtos
@using Domain.Entities.UserAccounts
<MudItem>
    <MudStack Row>
        <MudItem md="4">
            <MudStack>
                <MudItem>
                    <MudStack>
                        <Select TValue="int" @bind-SelectedValue="@_clinicId">
                            <SelectItem Value="0">Select Clinic</SelectItem>
                            @foreach (var item in ClinicList)
                            {
                                <SelectItem Value="@item.Id">@item.Name - @item.Address</SelectItem>
                            }
                        </Select>
                        <DexLoadingButton Name="Add Clinic" Processing="_processing" Click="AddUserClinic"></DexLoadingButton>
                    </MudStack>
                </MudItem>
            </MudStack>
        </MudItem>
        <MudItem md="8">
            <MudDataGrid Items="@UserClinicList" Dense="true" Bordered="true" T="UserClinic" Style="margin-bottom: 30px">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="text-bold">Clinics</MudText>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Clinic.Name" Title="Name"/>
                    <PropertyColumn Property="x => x.Clinic.Address" Title="Address"/>
                    <TemplateColumn CellClass="d-flex justify-end" Title="Actions">
                        <CellTemplate>
                            <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteUserClinic(context.Item.Id)"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudStack>
</MudItem>

@code{
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;
    private bool _processing;
    private List<ClinicDto> ClinicList { get; set; } = new();
    private List<UserClinic> UserClinicList { get; set; } = new();
    private int _clinicId = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetUserClinics();
        await GetClinics();
    }

    private async Task GetUserClinics()
    {
        UserClinicList = await UnitOfWork.User.GetUserClinics(UserId);
    }

    private async Task GetClinics()
    {
        ClinicList = await UnitOfWork.Setting.GetClinics();
    }
    
    private async Task AddUserClinic()
    {
        _processing = true;

        if (_clinicId > 0)
        {
            var clinic = new UserClinic()
            {
                ClinicId = _clinicId,
                UserId = UserId
            };
            var res = await UnitOfWork.User.SaveUserClinic(0, clinic);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessge("Clinic added.");
                await GetUserClinics();
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }
        else
        {
            Snackbar.FailMessge("Please clinic");
        }

        _processing = false;
    }

    private async Task DeleteUserClinic(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.User.DeleteClinic(id);
            var user = UserClinicList.FirstOrDefault(x => x.Id == id);
            UserClinicList.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessge(userRes.Messages.First());
        }
    }
}