@using Dexterity.Components.Pages.UserManager.Role
@using Domain.Entities.Common
@using global::Services.Features.UserAccounts.Dtos.User
@using Shared.Constants.Permission

<TabTitle Title="Permissions"></TabTitle>
@if (UnitOfWork.User.CheckPermission(PermissionConstants.Read))
{
    <MudGrid Justify="MudJustify.Center" Style="margin-top: 3%">
        <MudItem md="12">
            <MudStack Class="mt-5">
                <MudItem>
                    <MudStack Row="true">
                        <MudItem md="8">
                            <SfDropDownList TValue="Guid" TItem="RoleResponseDto" Placeholder="ROLES"
                                            DataSource="@Roles">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="Guid" TItem="RoleResponseDto"
                                                    ValueChange="RoleChanged"></DropDownListEvents>
                            </SfDropDownList>
                        </MudItem>
                        <MudItem md="4">
                            <MudButtonGroup Color="MudColor.Primary" Variant="Variant.Filled" Size="MudSize.Small">
                                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Create))
                                {
                                    <MudButton OnClick="() => UpsertRoleModal(Guid.Empty)" Color="MudColor.Primary">
                                        Create Role
                                    </MudButton>
                                }

                                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Update))
                                {
                                    <MudButton OnClick="() => UpsertRoleModal(_roleId)" Color="MudColor.Primary"
                                               Disabled="_isRolesActionButtonsDisabled">Edit Role
                                    </MudButton>
                                }

                                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Delete))
                                {
                                    <MudButton Color="MudColor.Error" Disabled="_isRolesActionButtonsDisabled"
                                               OnClick="() => DeleteRole(_roleId)">Delete Role
                                    </MudButton>
                                }

                            </MudButtonGroup>
                        </MudItem>
                    </MudStack>
                </MudItem>
                @if (_roleId != Guid.Empty)
                {
                    <MudItem>
                        <div class="accordion " id="accordionExample">
                            @foreach (var item in Modules.Where(x => x.ParentId == null).ToList())
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="@Guid.NewGuid()">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse"
                                                data-bs-target="#@item.Id" aria-controls="@item.Id"
                                                @onclick="()=>Callback(item.Id)">
                                            @item.Name
                                        </button>
                                    </h2>
                                    <div id="@item.Id" class="accordion-collapse collapse "
                                         aria-labelledby="@Guid.NewGuid()"
                                         data-bs-parent="#accordionExample">
                                        <div class="accordion-body">
                                            @if (Modules.All(x => x.ParentId != item.Id))
                                            {
                                                <MudStack Row>
                                                    <MudCheckBox @bind-Value="_create" Label="Create"
                                                                 T="bool"
                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                    <MudCheckBox @bind-Value="_read" Label="Read" T="bool"
                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                    <MudCheckBox @bind-Value="_update" Label="Update"
                                                                 T="bool"
                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                    <MudCheckBox @bind-Value="_delete" Label="Delete"
                                                                 T="bool"
                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                    <MudCheckBox @bind-Value="_print" Label="Print" T="bool"
                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                </MudStack>
                                                <MudItem Class="mb-10">
                                                    <DexButton Name="Save Permissions"
                                                                     Disabled="_isLoadPermissionBtnDisabled"
                                                                     Click="SavePermission"></DexButton>
                                                </MudItem>
                                            }
                                            else
                                            {
                                                <RadzenAccordion>
                                                    <Items>
                                                        @foreach (var subModule in Modules.Where(x => x.ParentId == item.Id))
                                                        {
                                                            <RadzenAccordionItem Text="@subModule.Name"
                                                                                 @onclick="() => Callback(subModule.Id)">
                                                                <MudStack Row>
                                                                    <MudCheckBox @bind-Value="_create" Label="Create"
                                                                                 T="bool"
                                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                                    <MudCheckBox @bind-Value="_read" Label="Read"
                                                                                 T="bool"
                                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                                    <MudCheckBox @bind-Value="_update" Label="Update"
                                                                                 T="bool"
                                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                                    <MudCheckBox @bind-Value="_delete" Label="Delete"
                                                                                 T="bool"
                                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                                    <MudCheckBox @bind-Value="_print" Label="Print"
                                                                                 T="bool"
                                                                                 Disabled="_isLoadPermissionBtnDisabled"></MudCheckBox>
                                                                </MudStack>
                                                                <MudItem Class="mb-10">
                                                                    <DexButton Name="Save Permissions"
                                                                                     Disabled="_isLoadPermissionBtnDisabled"
                                                                                     Click="SavePermission"></DexButton>
                                                                </MudItem>
                                                            </RadzenAccordionItem>
                                                        }

                                                    </Items>
                                                </RadzenAccordion>
                                            }

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </MudItem>
                }
            </MudStack>
        </MudItem>
    </MudGrid>
}
else
{
    <PermissionDenied/>
}


@code {
    private List<RoleResponseDto> Roles { get; set; } = new();
    private List<AppModule> Modules { get; set; } = new();
    private bool _isLoadPermissionBtnDisabled = true;
    private bool _isSavePermissionBtnDisabled = true;
    private bool _isRolesActionButtonsDisabled = true;

    private Guid _roleId;
    private Guid _moduleId;

    private bool _create;
    private Guid _createId;
    private bool _update;
    private Guid _updateId;
    private bool _read;
    private Guid _readId;
    private bool _delete;
    private Guid _deleteId;
    private bool _print;
    private Guid _printId;

    protected override async Task OnInitializedAsync()
    {
        await GetModules();
        await GetRoles();
    }

    private async Task GetRoles()
    {
        Roles = await UnitOfWork.User.GetRoles();
    }

    private void RoleChanged(ChangeEventArgs<Guid, RoleResponseDto> args)
    {
        _roleId = Guid.Empty;
        var role = args.ItemData;
        if (role.Id != Guid.Empty)
        {
            _roleId = role.Id;
            _isRolesActionButtonsDisabled = false;
        }
        else
        {
            _isRolesActionButtonsDisabled = true;
        }

        StateHasChanged();
    }

    private async Task UpsertRoleModal(Guid id)
    {
        var title = id == Guid.Empty ? "New Role" : "Edit Role";
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertRoleModal>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetRoles();
        }
    }

    private async Task DeleteRole(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.User.DeleteRole(id);
            if (res.Succeeded)
            {
                await GetRoles();
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());
            }
        }
    }

    private async Task LoadPermissions()
    {
        _isSavePermissionBtnDisabled = false;
        var permissions = await UnitOfWork.User.GetPermissions(_roleId, _moduleId);
        foreach (var item in permissions)
        {
            switch (item.ClaimName)
            {
                case PermissionConstants.Create:
                    _create = item.Allowed;
                    _createId = item.Id;
                    break;
                case PermissionConstants.Read:
                    _read = item.Allowed;
                    _readId = item.Id;
                    break;
                case PermissionConstants.Update:
                    _update = item.Allowed;
                    _updateId = item.Id;
                    break;
                case PermissionConstants.Delete:
                    _delete = item.Allowed;
                    _deleteId = item.Id;
                    break;
                case PermissionConstants.Print:
                    _print = item.Allowed;
                    _printId = item.Id;
                    break;
            }
        }
    }

    private async Task SavePermission()
    {
        var list = new List<UpdatePermissionDto>()
        {
            new()
            {
                Id = _createId,
                Value = _create
            },
            new()
            {
                Id = _readId,
                Value = _read
            },
            new()
            {
                Id = _updateId,
                Value = _update
            },
            new()
            {
                Id = _deleteId,
                Value = _delete
            },
            new()
            {
                Id = _printId,
                Value = _print
            }
        };
        var res = await UnitOfWork.User.UpdatePermissions(list);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }
    }

    private async Task GetModules()
    {
        Modules = await UnitOfWork.App.GetAppModules();
    }

    private async Task Callback(Guid moduleId)
    {
        _isLoadPermissionBtnDisabled = false;
        _moduleId = moduleId;
        await LoadPermissions();
    }

}