@using Domain.Entities.Settings.Consultation.Immunisation
@using Services.Features.Settings.Dtos.Immunisations
<TabTitle Title="Shots" Icon="flu-shot.png">
</TabTitle>
<MudStack Row>
    <MudItem md="2">
        <SfGrid DataSource="ShotsList" AllowPaging="false" Height="800px">
            <GridEvents RowSelected="RowSelected" TValue="Shot"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(Shot.Name)" HeaderText="Shots" Width="120px"/>
            </GridColumns>
        </SfGrid>
    </MudItem>
    <MudItem md="10">
        <MudStack Spacing="2">
            <MudItem md="12">
                <DexForm Model="Shot" ColumnCount="2" OnValidSubmit="SaveShot">
                    <Fields>
                        <FormGroup ColumnCount="1" LabelText="Basic Info">
                            <FormItem Field="@nameof(Shot.Name)" IsEnabled="_isFieldsEnable"></FormItem>
                            <FormItem Field="@nameof(Shot.Dose)" IsEnabled="_isFieldsEnable">
                                <Template>
                                    <SfDropDownList TValue="string" TItem="Dose" Placeholder="Dose" DataSource="@SettingConstants.Doses" @bind-Value="Shot.Dose">
                                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </Template>
                            </FormItem>
                            <FormItem Field="@nameof(Shot.Method)" IsEnabled="_isFieldsEnable">
                                <Template>
                                    <SfDropDownList TValue="string" TItem="DoseMethod" Placeholder="Method" DataSource="@SettingConstants.Methods" @bind-Value="Shot.Method">
                                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </Template>
                            </FormItem>
                            <FormItem Field="@nameof(Shot.IsActive)" LabelText="Active" EditorType="FormEditorType.Checkbox" IsEnabled="_isFieldsEnable"></FormItem>
                        </FormGroup>
                        <FormGroup ColumnCount="2" LabelText="Interval Detail" ColumnSpacing="20px">
                            <FormItem Field="@nameof(Shot.IntervalType)" LabelText="Interval Type" ColumnSpan="2" IsEnabled="_isFieldsEnable">
                                <Template>
                                    <label class="e-form-label">Interval Type</label>
                                    <SfDropDownList TValue="int" TItem="IntervalType" Placeholder="Select a interval type" DataSource="@SettingConstants.IntervalTypes">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="int" TItem="IntervalType" ValueChange="OnIntervalTypeValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </Template>
                            </FormItem>
                            <FormItem Field="@nameof(Shot.IntervalMin)" LabelText="Interval Min" ColumnSpan="1" IsEnabled="_isFieldsEnable"></FormItem>
                            <FormItem Field="@nameof(Shot.IntervalMax)" LabelText="Interval Max" ColumnSpan="1" IsEnabled="_isFieldsEnable"></FormItem>
                            <FormItem Field="@nameof(Shot.ClaimForm)" LabelText="Claim Form" ColumnSpan="2" IsEnabled="_isFieldsEnable"></FormItem>
                            <FormItem Field="@nameof(Shot.Comment)" ColumnSpan="2" EditorType="FormEditorType.TextArea" IsEnabled="_isFieldsEnable"></FormItem>
                        </FormGroup>
                    </Fields>
                    <Buttons>
                        @if (_shotId > 0)
                        {
                            <DexLoadingButton Name="Save Shot" Processing="_loading" Type="MudButtonType.Submit"/>
                            <DexLoadingButton Name="Delete" Click="DeleteShot"/>
                            <DexLoadingButton Name="Create New" Click="ResetForm"/>
                        }
                        else
                        {
                            <DexLoadingButton Name="Save Shot" Processing="_loading" Type="MudButtonType.Submit"/>
                        }
                    </Buttons>
                </DexForm>
            </MudItem>
            <MudItem md="4">
                @if (_shotId > 0)
                {
                    <DexForm Model="AssignShotToBatch" OnValidSubmit="AssignBatchToShot">
                        <Fields>
                            <FormItem Field="@nameof(UpsertBatchDto.BatchNumber)" ColumnSpan="2">
                                <Template>
                                    <label class="e-form-label">Select Batch:</label>
                                    <SfAutoComplete TValue="string" TItem="BatchDetail" Placeholder="Batch Number" DataSource="@_batchList">
                                        <AutoCompleteFieldSettings Value="BatchNumber" Text="BatchNumber"/>
                                        <AutoCompleteEvents TValue="string" TItem="BatchDetail" ValueChange="OnChangeBatch"></AutoCompleteEvents>
                                    </SfAutoComplete>
                                </Template>
                            </FormItem>
                        </Fields>
                        <Buttons>
                            @if (!_isBatchFound)
                            {
                                <DexLoadingButton Name="Create New Batch" Click="() => UpsertBatch(0)"/>
                            }
                            else
                            {
                                <DexLoadingButton Name="Assign Batch" Type="MudButtonType.Submit"/>
                            }
                            <DexLoadingButton Name="Search Batch" Click="SearchBatch"/>
                        </Buttons>
                    </DexForm>
                }
            </MudItem>
            <MudItem md="12">
                <DexGrid DataSource="ShotBatchDetails" Height="200px">
                    <DexGridColumns>
                        <GridColumn Field="@nameof(BatchDetail.BatchNumber)" HeaderText="Batch" Width="120px"></GridColumn>
                        <GridColumn Field="@nameof(BatchDetail.Expiry)" Format="d" Type="ColumnType.DateTime" HeaderText="Expiry" Width="120px"></GridColumn>
                        <GridColumn Field="@nameof(BatchDetail.TradeName)" HeaderText="Trade Name" Width="120px"></GridColumn>
                        <GridColumn Field="@nameof(BatchDetail.BatchCount)" HeaderText="Batch Total" Width="120px"></GridColumn>
                        <GridColumn Field="@nameof(BatchDetail.Remaining)" HeaderText="Remaining" Width="120px"></GridColumn>
                        <GridColumn Field="@nameof(BatchDetail.IsActive)" HeaderText="Active" Width="120px">
                            <Template>
                                @{
                                    var item = (context as BatchDetail);
                                    @if (item!.IsActive)
                                    {
                                        <MudText Color="MudColor.Primary"> Yes</MudText>
                                    }
                                    else
                                    {
                                        <MudText Color="MudColor.Error"> No</MudText>
                                    }
                                }
                            </Template>
                            
                        </GridColumn>
                        <GridColumn HeaderText="Actions" Width="120">
                            <Template>
                                @{
                                    var item = (context as BatchDetail);
                                    <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteBatch(item!.Id)"/>
                                    <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit" Color="MudColor.Primary" OnClick="() => UpsertBatch(item!.Id)"/>
                                }
                            </Template>
                        </GridColumn>
                    </DexGridColumns>
                </DexGrid>
            </MudItem>
        </MudStack>
    </MudItem>
</MudStack>

@code {
    private List<Shot> ShotsList { get; set; } = new();
    private List<BatchDetail> ShotBatchDetails { get; set; } = new();
    private Shot Shot { get; set; } = new();
    private AssignShotToBatchDto AssignShotToBatch { get; set; } = new();
    private bool _isFieldsEnable;
    private bool _isBatchFound;
    private bool _loading;
    private int _shotId;
    private List<BatchDetail> _batchList = new();

    protected override async Task OnInitializedAsync()
    {
        if (_shotId == 0)
        {
            _isFieldsEnable = true;
        }

        await GetShots();
        await GetBatches();
    }

    #region Shots

    private async Task GetShots()
    {
        ShotsList = await UnitOfWork.Setting.GetShotsList();
    }

    private async Task SaveShot()
    {
        _loading = true;
        var res = await UnitOfWork.Setting.SaveShot(Shot);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }

        await GetShots();
        ResetForm();
        _loading = false;
    }

    private async Task RowSelected(RowSelectEventArgs<Shot> shot)
    {
        if (shot.Data is not null)
        {
            _shotId = shot.Data.Id;
            await GetSelectedShotDetails(_shotId);
        }
    }

    private async Task GetSelectedShotDetails(int shotId)
    {
        var shotDetails = await UnitOfWork.Setting.GetShotsDetail(shotId);
        Shot = shotDetails.Shot;
        ShotBatchDetails = shotDetails.BatchDetails;
        AssignShotToBatch.ShotId = _shotId;
    }

    private void ResetForm()
    {
        _isFieldsEnable = true;
        Shot = new Shot();
        _shotId = 0;
        AssignShotToBatch = new AssignShotToBatchDto();
    }

    private async Task DeleteShot()
    {
        if (_shotId > 0)
        {
            var parameters = new DialogParameters();
            var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
            {
                var userRes = await UnitOfWork.Setting.DeleteShot(_shotId);
                Snackbar.SuccessMessage(userRes.Messages.First());
                Shot = new Shot();
                await GetShots();
                ResetForm();
                StateHasChanged();
            }
        }
    }

    #endregion

    #region Batch

    private async Task GetBatches()
    {
        _batchList = await UnitOfWork.Setting.GetBatches();
    }

    private async Task AssignBatchToShot()
    {
        var res = await UnitOfWork.Setting.AssignBatchToShot(AssignShotToBatch);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await GetSelectedShotDetails(_shotId);
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }
    }

    private async Task UpsertBatch(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("AssignShotToBatch", AssignShotToBatch);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<BatchFormDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetSelectedShotDetails(_shotId);
            await GetBatches();
        }
    }

    private async Task DeleteBatch(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteBatchFromShot(id);
            Snackbar.SuccessMessage(res.Messages.First());
            await GetSelectedShotDetails(_shotId);
            
        }
    }

    private void OnChangeBatch(ChangeEventArgs<string, BatchDetail> args)
    {
        if (!args.IsInteracted)
        {
            _isBatchFound = false;
            AssignShotToBatch.BatchNumber = args.Value;
        }
        else if (args.ItemData is not null)
        {
            var batchDetail = args.ItemData;
            AssignShotToBatch.BatchNumber = batchDetail.BatchNumber;
            _isBatchFound = true;
        }
        else
        {
            _isBatchFound = false;
        }
    }

    private void OnIntervalTypeValueChange(ChangeEventArgs<int, IntervalType> args)
    {
        if (args.ItemData is null) return;
        var intervaltype = args.ItemData;
        Shot.IntervalMax = intervaltype.Max;
        Shot.IntervalMin = intervaltype.Min;
        Shot.IntervalType = intervaltype.Name;
    }

    #endregion

    private async Task SearchBatch()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        await DialogService.ShowAsync<SearchBatchDialog>("", parameters, options);
    }


}