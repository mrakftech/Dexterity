@using Services.Features.Settings.Dtos.Immunisations
<TabTitle Title="Shots" Icon="flu-shot.png">
</TabTitle>
@if (UnitOfWork.User.CheckPermission(PermissionConstants.Read))
{
    <MudStack Row>
        <MudItem md="2">
            <SfGrid DataSource="ShotsList" AllowPaging="false" Height="800px">
                <GridEvents RowSelected="RowSelected" TValue="Shot"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(Shot.Name)" HeaderText="Shots" Width="120px"/>
                </GridColumns>
            </SfGrid>
        </MudItem>
        <MudItem md="10">
            <MudStack Spacing="2">
                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Create))
                {
                    <MudItem md="12">

                        <DexForm Model="Shot" ColumnCount="2" OnValidSubmit="SaveShot">
                            <Fields>
                                <FormGroup ColumnCount="1" LabelText="Basic Info">
                                    <FormItem Field="@nameof(Shot.Name)" IsEnabled="_isFieldsEnable"></FormItem>
                                    <FormItem Field="@nameof(Shot.Dose)" IsEnabled="_isFieldsEnable">
                                        <Template>
                                            <SfDropDownList TValue="string" TItem="Dose" Placeholder="Dose"
                                                            DataSource="@SettingConstants.Doses"
                                                            @bind-Value="Shot.Dose">
                                                <DropDownListFieldSettings Value="Name"
                                                                           Text="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </Template>
                                    </FormItem>
                                    <FormItem Field="@nameof(Shot.Method)" IsEnabled="_isFieldsEnable">
                                        <Template>
                                            <SfDropDownList TValue="string" TItem="DoseMethod" Placeholder="Method"
                                                            DataSource="@SettingConstants.Methods"
                                                            @bind-Value="Shot.Method">
                                                <DropDownListFieldSettings Value="Name"
                                                                           Text="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </Template>
                                    </FormItem>
                                    <FormItem Field="@nameof(Shot.IsActive)" LabelText="Active"
                                              EditorType="FormEditorType.Checkbox"
                                              IsEnabled="_isFieldsEnable"></FormItem>
                                </FormGroup>
                                <FormGroup ColumnCount="2" LabelText="Interval Detail" ColumnSpacing="20px">
                                    <FormItem Field="@nameof(Shot.IntervalType)" LabelText="Interval Type"
                                              ColumnSpan="2"
                                              IsEnabled="_isFieldsEnable">
                                        <Template>
                                            <label class="e-form-label">Interval Type</label>
                                            <SfDropDownList TValue="int" TItem="IntervalType"
                                                            Placeholder="Select a interval type"
                                                            DataSource="@SettingConstants.IntervalTypes">
                                                <DropDownListFieldSettings Value="Id"
                                                                           Text="Name"></DropDownListFieldSettings>
                                                <DropDownListEvents TValue="int" TItem="IntervalType"
                                                                    ValueChange="OnIntervalTypeValueChange"></DropDownListEvents>
                                            </SfDropDownList>
                                        </Template>
                                    </FormItem>
                                    <FormItem Field="@nameof(Shot.IntervalMin)" LabelText="Interval Min" ColumnSpan="1"
                                              IsEnabled="_isFieldsEnable"></FormItem>
                                    <FormItem Field="@nameof(Shot.IntervalMax)" LabelText="Interval Max" ColumnSpan="1"
                                              IsEnabled="_isFieldsEnable"></FormItem>
                                    <FormItem Field="@nameof(Shot.ClaimForm)" LabelText="Claim Form" ColumnSpan="2"
                                              IsEnabled="_isFieldsEnable"></FormItem>
                                    <FormItem Field="@nameof(Shot.Comment)" ColumnSpan="2"
                                              EditorType="FormEditorType.TextArea"
                                              IsEnabled="_isFieldsEnable"></FormItem>
                                </FormGroup>
                            </Fields>
                            <Buttons>
                                @if (_shotId != Guid.Empty)
                                {
                                    <DexLoadingButton Name="Save Shot" Processing="_loading"
                                                      Type="MudButtonType.Submit"/>
                                    @if (UnitOfWork.User.CheckPermission(PermissionConstants.Delete))
                                    {
                                        <DexLoadingButton Name="Delete" Click="DeleteShot"/>
                                    }

                                    <DexLoadingButton Name="Create New" Click="ResetForm"/>
                                }
                                else
                                {
                                    <DexLoadingButton Name="Save Shot" Processing="_loading"
                                                      Type="MudButtonType.Submit"/>
                                }
                            </Buttons>
                        </DexForm>
                    </MudItem>
                    <MudItem md="4">
                        @if (_shotId != Guid.Empty)
                        {
                            <DexForm Model="AssignShotToBatch" OnValidSubmit="AssignBatchToShot">
                                <Fields>
                                    <FormItem Field="@nameof(UpsertBatchDto.BatchNumber)" ColumnSpan="2">
                                        <Template>
                                            <label class="e-form-label">Select Batch:</label>
                                            <SfAutoComplete TValue="string" TItem="Batch" Placeholder="Batch Number"
                                                            DataSource="@_batchList">
                                                <AutoCompleteFieldSettings Value="BatchNumber" Text="BatchNumber"/>
                                                <AutoCompleteEvents TValue="string" TItem="Batch"
                                                                    ValueChange="OnChangeBatch"></AutoCompleteEvents>
                                            </SfAutoComplete>
                                        </Template>
                                    </FormItem>
                                </Fields>
                                <Buttons>
                                    @if (!_isBatchFound)
                                    {
                                        <DexLoadingButton Name="Create New Batch"
                                                          Click="() => UpsertBatch(Guid.Empty)"/>
                                    }
                                    else
                                    {
                                        <DexLoadingButton Name="Assign Batch" Type="MudButtonType.Submit"/>
                                    }
                                    <DexLoadingButton Name="Search Batch" Click="SearchBatch"/>
                                </Buttons>
                            </DexForm>
                        }
                    </MudItem>
                }
                else
                {
                    <PermissionDenied/>
                }
                <MudItem md="12">
                    <DexGrid DataSource="ShotBatchDetails" Height="200px">
                        <DexGridColumns>
                            <GridColumn Field="@nameof(Batch.BatchNumber)" HeaderText="Batch"
                                        Width="120px"></GridColumn>
                            <GridColumn Field="@nameof(Batch.Expiry)" Format="d" Type="ColumnType.DateTime"
                                        HeaderText="Expiry" Width="120px"></GridColumn>
                            <GridColumn Field="@nameof(Batch.TradeName)" HeaderText="Trade Name"
                                        Width="120px"></GridColumn>
                            <GridColumn Field="@nameof(Batch.BatchCount)" HeaderText="Batch Total"
                                        Width="120px"></GridColumn>
                            <GridColumn Field="@nameof(Batch.Remaining)" HeaderText="Remaining"
                                        Width="120px"></GridColumn>
                            <GridColumn Field="@nameof(Batch.IsActive)" HeaderText="Active" Width="120px">
                                <Template>
                                    @{
                                        var item = (context as Batch);
                                        @if (item!.IsActive)
                                        {
                                            <MudText Color="MudColor.Primary"> Yes</MudText>
                                        }
                                        else
                                        {
                                            <MudText Color="MudColor.Error"> No</MudText>
                                        }
                                    }
                                </Template>

                            </GridColumn>
                            <GridColumn HeaderText="Actions" Width="120">
                                <Template>
                                    @{
                                        var item = (context as Batch);
                                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete"
                                                       Color="MudColor.Error" OnClick="() => DeleteBatch(item!.Id)"/>
                                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit"
                                                       Color="MudColor.Primary" OnClick="() => UpsertBatch(item!.Id)"/>
                                    }
                                </Template>
                            </GridColumn>
                        </DexGridColumns>
                    </DexGrid>
                </MudItem>
            </MudStack>
        </MudItem>
    </MudStack>
}
else
{
    <PermissionDenied/>
}


@code {
    private List<Shot> ShotsList { get; set; } = [];
    private List<Batch> ShotBatchDetails { get; set; } = [];
    private Shot Shot { get; set; } = new();
    private AssignShotToBatchDto AssignShotToBatch { get; set; } = new();
    private bool _isFieldsEnable;
    private bool _isBatchFound;
    private bool _loading;
    private Guid _shotId;
    private List<Batch> _batchList = [];

    protected override async Task OnInitializedAsync()
    {
        if (_shotId == Guid.Empty)
        {
            _isFieldsEnable = true;
        }

        await GetShots();
        await GetBatches();
    }

    #region Shots

    private async Task GetShots()
    {
        ShotsList = await UnitOfWork.Setting.GetShotsList();
    }

    private async Task SaveShot()
    {
        _loading = true;
        var res = await UnitOfWork.Setting.SaveShot(Shot);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        await GetShots();
        ResetForm();
        _loading = false;
    }

    private async Task RowSelected(RowSelectEventArgs<Shot> shot)
    {
        if (shot.Data is not null)
        {
            _shotId = shot.Data.Id;
            await GetSelectedShotDetails(_shotId);
        }
    }

    private async Task GetSelectedShotDetails(Guid shotId)
    {
        var shotDetails = await UnitOfWork.Setting.GetShotsDetail(shotId);
        Shot = shotDetails.Shot;
        ShotBatchDetails = shotDetails.BatchDetails;
        AssignShotToBatch.ShotId = _shotId;
    }

    private void ResetForm()
    {
        _isFieldsEnable = true;
        Shot = new Shot();
        _shotId = Guid.Empty;
        AssignShotToBatch = new AssignShotToBatchDto();
    }

    private async Task DeleteShot()
    {
        if (_shotId != Guid.Empty)
        {
            var parameters = new DialogParameters();
            var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
            {
                var userRes = await UnitOfWork.Setting.DeleteShot(_shotId);
                Snackbar.SuccessMessage(userRes.Messages.First());
                Shot = new Shot();
                await GetShots();
                ResetForm();
                StateHasChanged();
            }
        }
    }

    #endregion

    #region Batch

    private async Task GetBatches()
    {
        _batchList = await UnitOfWork.Setting.GetBatches();
    }

    private async Task AssignBatchToShot()
    {
        var res = await UnitOfWork.Setting.AssignBatchToShot(AssignShotToBatch);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await GetSelectedShotDetails(_shotId);
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }
    }

    private async Task UpsertBatch(Guid batchId)
    {
        var parameters = new DialogParameters();
        parameters.Add("BatchId", batchId);
        parameters.Add("AssignShotToBatch", AssignShotToBatch);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<BatchFormDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetSelectedShotDetails(_shotId);
            await GetBatches();
        }
    }

    private async Task DeleteBatch(Guid batchId)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteBatchFromShot(batchId);
            Snackbar.SuccessMessage(res.Messages.First());
            await GetSelectedShotDetails(_shotId);
        }
    }

    private void OnChangeBatch(ChangeEventArgs<string, Batch> args)
    {
        if (!args.IsInteracted)
        {
            _isBatchFound = false;
            AssignShotToBatch.BatchNumber = args.Value;
        }
        else if (args.ItemData is not null)
        {
            var batchDetail = args.ItemData;
            AssignShotToBatch.BatchNumber = batchDetail.BatchNumber;
            _isBatchFound = true;
        }
        else
        {
            _isBatchFound = false;
        }
    }

    private void OnIntervalTypeValueChange(ChangeEventArgs<int, IntervalType> args)
    {
        if (args.ItemData is null) return;
        var intervaltype = args.ItemData;
        Shot.IntervalMax = intervaltype.Max;
        Shot.IntervalMin = intervaltype.Min;
        Shot.IntervalType = intervaltype.Name;
    }

    #endregion

    private async Task SearchBatch()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        await DialogService.ShowAsync<SearchBatchDialog>("", parameters, options);
    }


}
