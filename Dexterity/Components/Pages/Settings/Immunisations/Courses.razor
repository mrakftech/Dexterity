<style>
    .e-listview.e-lib {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
        width: 250px;
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .padding {
        padding: 4px;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: 500;
    }

    .margin {
        margin: 10px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }
</style>

<TabTitle Title="Courses" Icon="courses.png">
</TabTitle>

<MudItem md="4">

    <SfDropDownList TValue="string" TItem="Course" Placeholder="Select a Course" DataSource="@_courses" CssClass="mt-3">
        <DropDownListFieldSettings Value="Name" Text="Name"/>
        <DropDownListEvents TValue="string" TItem="Course" ValueChange="OnChangeCourse"></DropDownListEvents>
    </SfDropDownList>

    <DexForm Model="_course" OnValidSubmit="SaveCourse">
        <Fields>
            <FormItem Field="@nameof(Course.Name)"/>
            <FormItem Field="@nameof(Course.IsActive)" EditorType="FormEditorType.Checkbox" LabelText="Active"/>
        </Fields>
        <Buttons>
            <button type="submit" class="e-btn">@(_course.Id != Guid.Empty ? "Update" : "Add New")</button>
            <button class="e-btn" @onclick="ClearForm">Clear</button>
            @if (_course.Id != Guid.Empty)
            {
                <button type="button" class="e-btn" @onclick="DeleteCourse">Delete</button>
            }
        </Buttons>
    </DexForm>
</MudItem>
<MudGrid>
    @if (_course.Id != Guid.Empty)
    {
        <MudItem xs="12" sm="8" md="12" Class="d-flex flex-column align-center justify-center">
            <div id="container">
                <div class="sample flex">
                    <div class="flex">
                        <div class="padding">
                            <p class="text-bold">All Shots:</p>
                            <SfTextBox Placeholder="Filter" Input="@(e => OnInput(e, 1))"></SfTextBox>
                            <SfListView DataSource="@_allShots">
                                <ListViewFieldSettings TValue="Shot" Id="Id" Text="Name"></ListViewFieldSettings>
                                <ListViewEvents TValue="Shot" Clicked="@(e => OnSelected(e, 1))"></ListViewEvents>
                            </SfListView>
                            <button disabled="@(_sourceItemSelected == null)" class="e-btn m-3" @onclick="@(e => OnButtonClick(2))">@("Add Item")</button>

                        </div>
                        <div class="flex vertical vertical__center flex__center padding">
                            <div class="padding">
                            </div>
                            <div class="padding">
                            </div>
                        </div>
                        <div class="padding">
                            <p class="text-bold">Selected Shots:@($"{_selectedShots.Count}")</p>
                            <SfTextBox Placeholder="Filter" Input="@(e => OnInput(e, 2))"></SfTextBox>
                            <SfListView DataSource="@_destinationList">
                                <ListViewFieldSettings Id="Id" Text="Name" TValue="Shot"></ListViewFieldSettings>
                                <ListViewEvents TValue="Shot" Clicked="@(e => OnSelected(e, 2))"></ListViewEvents>
                            </SfListView>
                            <button disabled="@(_destinationItemSelected == null)" class="e-btn m-3" @onclick="@(e => OnButtonClick(3))">@("Remove Item")</button>

                        </div>
                        @* <div class="flex vertical vertical__center flex__center padding"> *@
                        @*     <div class="padding"> *@
                        @*         <button class="e-btn" @onclick="MoveUp"> *@
                        @*             <span class="fa fa-arrow-alt-circle-up"></span> *@
                        @*         </button> *@
                        @*     </div> *@
                        @*     <div class="padding"> *@
                        @*         <button class="e-btn" @onclick="MoveDown"> *@
                        @*             <span class="fa fa-arrow-alt-circle-down"></span> *@
                        @*         </button> *@
                        @*     </div> *@
                        @* </div> *@
                    </div>
                </div>
            </div>
            <button type="button" class="e-btn" @onclick="SelectCourse">Save</button>
        </MudItem>
    }
</MudGrid>

@code {
    private List<Course> _courses = [];
    private Course _course = new();
    List<Shot> _allShots = [];
    List<Shot> _selectedShots = [];


    List<Shot> _sourceList;
    List<Shot> _destinationList;
    Shot _sourceItemSelected;
    Shot _destinationItemSelected;

    protected override async Task OnInitializedAsync()
    {
        await GetCourses();
        await GetShots();
    }

    private async Task GetShots()
    {
        _allShots = await UnitOfWork.Setting.GetShotsList();
        _sourceList = _allShots;
    }

    private async Task GetCourses()
    {
        _courses = await UnitOfWork.Setting.GetCourses();
    }

    private async Task OnChangeCourse(ChangeEventArgs<string, Course> args)
    {
        if (args.ItemData is null) return;
        var course = args.ItemData;
        _course.Id = course.Id;
        _course.Name = course.Name;
        _course.IsActive = course.IsActive;
        _selectedShots = await UnitOfWork.Setting.GetAssignedShotToCourse(course.Id);
        _destinationList = _selectedShots;
    }

    private async Task SaveCourse()
    {
        var res = await UnitOfWork.Setting.SaveCourse(_course.Id, _course);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        await GetCourses();
        await ClearForm();
    }

    private async Task ClearForm()
    {
        _course = new Course();
        await GetCourses();
    }


    private async Task SelectCourse()
    {
        var res = await UnitOfWork.Setting.AssignedShotToCourse(_course.Id, _selectedShots.Select(x => x.Id).ToList());
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }
    }

    void OnButtonClick(int buttonIndex)
    {
        switch (buttonIndex)
        {
            case 2:
                if (_sourceItemSelected != null)
                {
                    if (_destinationList.Any(x => x.Id == _sourceItemSelected.Id))
                    {
                        Snackbar.FailMessage("Item already exists");
                        return;
                    }

                    _selectedShots.Add(_sourceItemSelected);
                    _destinationList = [.._selectedShots];
                    _sourceItemSelected = null;
                }

                break;
            case 3:
                if (_destinationItemSelected != null)
                {
                    _selectedShots.RemoveAt(_selectedShots.FindIndex(e => e.Id == _destinationItemSelected.Id));
                    _destinationList = [.._selectedShots];
                    _destinationItemSelected = null;
                }

                break;

            default:
                break;
        }
    }

    void OnSelected(ClickEventArgs<Shot> eventArgs, int listviewIndex)
    {
        StateHasChanged();
        if (listviewIndex == 1)
        {
            _sourceItemSelected = eventArgs.ItemData;
        }
        else
        {
            _destinationItemSelected = eventArgs.ItemData;
        }
    }

    void OnInput(InputEventArgs eventArgs, int listviewIndex)
    {
        if (listviewIndex == 1)
        {
            _sourceList = _allShots.FindAll(e => e.Name.ToLower().Contains(eventArgs.Value.ToLower()));
        }
        else
        {
            _destinationList = _selectedShots.FindAll(e => e.Name.ToLower().Contains(eventArgs.Value.ToLower()));
        }
    }

    void MoveUp()
    {
        if (_destinationItemSelected != null)
        {
        }
    }

    void MoveDown()
    {
        if (_destinationItemSelected != null)
        {
        }
    }

    private async Task DeleteCourse()
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Setting.DeleteCourse(_course.Id);
            Snackbar.SuccessMessage(userRes.Messages.First());
            await GetCourses();
        }
    }

}