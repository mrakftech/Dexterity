@using Domain.Entities.Settings.Templates

<TabTitle Title="Email Template" Icon="email-template.png">
    <ActionButtons>
        <MudStack Row>
            <DexCreateButton Label="Add Email Template" OnClick="() => UpsertEmailTemplateModal(Guid.Empty)"/>
            <DexReadButton Label="Load Email Templates" OnClick="GetTemplates"/>
        </MudStack>
    </ActionButtons>
</TabTitle>
<MudItem>
    <DexGrid DataSource="EmailTemplateList" Loading="@_processing">
        <DexGridColumns>
            <GridColumn Field="@nameof(SmsTemplate.Name)" HeaderText="Name" Width="120px"></GridColumn>
            <GridColumn HeaderText="Actions" Width="120">
                <Template>
                    @{
                        var template = (context as EmailTemplate);
                        <DexUpdateButton OnClick="() => UpsertEmailTemplateModal(template.Id)"/>
                        <DexDeleteButton OnClick="() => DeleteTemplate(template.Id)"/>
                    }
                </Template>
            </GridColumn>
        </DexGridColumns>
    </DexGrid>
</MudItem>

@code{

    private List<EmailTemplate> EmailTemplateList { get; set; } = new();

    private bool _processing;


    private async Task GetTemplates()
    {
        _processing = true;
        EmailTemplateList = await UnitOfWork.Setting.GetEmailTemplates();
        _processing = false;
    }

    private async Task UpsertEmailTemplateModal(Guid id)
    {
        var title = id == Guid.Empty ? "New Template" : "Edit Template";
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<EmailTemplateFormDialog>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetTemplates();
        }
    }

    private async Task DeleteTemplate(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteEmailTemplate(id);
            if (res.Succeeded)
            {
                await GetTemplates();
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());
            }
        }
    }

}