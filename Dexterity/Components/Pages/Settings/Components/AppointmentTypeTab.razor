@using Dexterity.Components.Pages.Settings.Dialogs.AppointmentManager
@using Services.Features.Settings.Dtos
@using Domain.Entities.Appointments
<TabTitle Title="Appointment Type">
    <ActionButtons>
        <MudStack Row>
            <MudButton Color="MudColor.Primary" Size="MudSize.Small" OnClick="() => UpsertAppointmentTypeModal(0)" Variant="Variant.Filled">Add Appointment Type</MudButton>
            <MudButton Color="MudColor.Primary" Size="MudSize.Small" OnClick="GetAppointmentTypeList" Variant="Variant.Filled">Load Appointment Types</MudButton>
        </MudStack>
    </ActionButtons>
</TabTitle>
<MudItem >
    <DexGrid DataSource="AppointmentTypeList" Loading="@_processing">
        <DexGridColumns>
            <GridColumn Field="@nameof(AppointmentTypeDto.Name)" HeaderText="Name" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(AppointmentTypeDto.Duration)" HeaderText="Duration" Width="120px"></GridColumn>
            <GridColumn HeaderText="Actions" Width="120">
                <Template>
                    @{
                        var item = (context as AppointmentTypeDto);
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit"
                                       Color="MudColor.Primary"
                                       OnClick="() => UpsertAppointmentTypeModal(item.Id)"/>
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete"
                                       Color="MudColor.Error" OnClick="() => DeleteAppointmentType(item.Id)"/>
                    }
                </Template>
            </GridColumn>
        </DexGridColumns>
    </DexGrid>
</MudItem>

@code {

    private List<AppointmentTypeDto> AppointmentTypeList { get; set; } = new();
    
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        await GetAppointmentTypeList();
    }

    private async Task GetAppointmentTypeList()
    {
        _processing = true;
        AppointmentTypeList = await UnitOfWork.Setting.GetAppointmentTypes();
        _processing = false;
    }

    private async Task UpsertAppointmentTypeModal(int id)
    {
        var title = id == 0 ? "New Appointment Type" : "Edit Appointment Type";
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertAppointmentTypeModal>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetAppointmentTypeList();
        }
    }

    private async Task DeleteAppointmentType(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteAppointmentType(id);
            if (res.Succeeded)
            {
                await GetAppointmentTypeList();
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }
    }

}