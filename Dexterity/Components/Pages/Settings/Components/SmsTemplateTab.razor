@using Dexterity.Components.Pages.Settings.Dialogs.SmsTemplate
@using Domain.Entities.Settings.Templates

<MudItem Style="margin-top: 3%;width: 75%">
    <MudText Align="Align.Center" Typo="Typo.h4" Class="text-bold"> SMS Template</MudText>
    <MudItem md="12">
        <MudStack Row Style="margin-top: 20px">
            <MudButton Color="MudColor.Primary" Size="MudSize.Small"  OnClick="() => UpsertSmsTemplateModal(Guid.Empty)" Variant="Variant.Filled">Add Sms Template</MudButton>
            <MudButton Color="MudColor.Primary" Size="MudSize.Small" OnClick="GetTemplates" Variant="Variant.Filled">Load Sms Templates</MudButton>
        </MudStack>
    </MudItem>
    <MudDataGrid Style="margin-top: 20px" Items="SmsTemplateList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Sms Templates</MudText>
            <MudSpacer/>
            <MudItem md="4">
                <MudTextField Variant="Variant.Outlined" Margin="MudMargin.Dense" @bind-Value="_searchString"
                              Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@MudIcons.Material.Filled.Search" IconSize="MudSize.Medium" Class="mt-0">
                </MudTextField>

            </MudItem>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name"/>
            <PropertyColumn Property="x => x.Content"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit"
                                       Color="MudColor.Primary"
                                       OnClick="() => UpsertSmsTemplateModal(context.Item.Id)"/>
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete"
                                       Color="MudColor.Error" OnClick="() => DeleteTemplate(context.Item.Id)"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            <MudText>No records found.</MudText>
        </NoRecordsContent>
    </MudDataGrid>

</MudItem>

@code{

    private List<SmsTemplate> SmsTemplateList { get; set; } = new();
    private string _searchString;
    private bool _processing;


    private async Task GetTemplates()
    {
        _processing = true;
        SmsTemplateList = await UnitOfWork.Setting.GetSmsTemplates();
        _processing = false;

    }

    private async Task UpsertSmsTemplateModal(Guid id)
    {
        var title = id == Guid.Empty ? "New Template" : "Edit Template";
        var parameters = new DialogParameters {{"Id", id}};
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertSmsTemplateModal>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetTemplates();
        }
    }

    private async Task DeleteTemplate(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteSmsTemplate(id);
            if (res.Succeeded)
            {
                await GetTemplates();
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }
    }

}