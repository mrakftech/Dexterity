@using Services.Features.Settings.Dtos
<TabTitle Title="Clinic Sites">
    <ActionButtons>
        <DexSimpleButton FullWidth="false"  Name="Add Clinic Site" Click="()=>OpenUpsertClinicSiteModal(0)"></DexSimpleButton>
    </ActionButtons>
</TabTitle>
<DexGrid DataSource="ClinicSites" Height="300px">
    <DexGridColumns>
        <GridColumn Field="@nameof(ClinicSiteDto.Name)" HeaderText="Name" Width="120px"></GridColumn>
        <GridColumn HeaderText="Actions" Width="120">
            <Template>
                @{
                var clinic = (context as ClinicSiteDto);
                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit" Color="MudColor.Primary" OnClick="() => OpenUpsertClinicSiteModal(clinic.Id)" />
                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteClinicSite(clinic.Id)" />
                }
            </Template>
        </GridColumn>
    </DexGridColumns>
</DexGrid>


@code {

    [Parameter] public int ClinicId { get; set; }
    private List<ClinicSiteDto> ClinicSites { get; set; } = new();

    private async Task OpenUpsertClinicSiteModal(int id)
    {
        var title = id == 0 ? "New Clinic Site" : "Edit Clinic Site";
        var parameters = new DialogParameters { { "Id", id }, { "ClinicId", ClinicId } };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogresult = await DialogService.ShowAsync<UpsertClinicSiteModal>(title, parameters, options);
        var res = await dialogresult.Result;
        if (!res.Canceled)
        {
            await GetClinicSites();
        }
    }
    private async Task DeleteClinicSite(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var response = await UnitOfWork.Setting.DeleteClinicSite(id);
            var user = ClinicSites.FirstOrDefault(x => x.Id == id);
            ClinicSites.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessge(response.Messages.First());
        }
    }
    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetClinicSites();
    }
}
