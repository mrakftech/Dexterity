@using Domain.Entities.Settings.Templates
@using UploadChangeEventArgs = Syncfusion.Blazor.Inputs.UploadChangeEventArgs
<TabTitle Title="Sketch Templates"></TabTitle>
<MudStack Row>
    <MudItem md="4">
        <SfGrid DataSource="_sketchCategories" AllowPaging="false" Height="400">
            <GridEvents TValue="SketchCategory" RowSelected="SelectCategory"></GridEvents>

            <GridColumns>
                <GridColumn Field="@nameof(SketchCategory.Name)"></GridColumn>
            </GridColumns>
        </SfGrid>
    </MudItem>
    <MudItem md="4">
        @if (_categoryId != Guid.Empty)
        {
            <MudStack Row>
                <MudItem>
                    @if (_sketchId != Guid.Empty)
                    {
                        <DexLoadingButton Name="Add New" Click="AddNewSketch"/>
                    }
                </MudItem>
            </MudStack>
            <DexForm Model="SketchData" OnValidSubmit="SaveSketch">
                <Fields>
                    <FormItem Field="@nameof(Sketch.Name)"></FormItem>
                    <FormItem Field="@nameof(Sketch.Description)"></FormItem>
                    <FormItem Field="@nameof(Sketch.Image)">
                        <Template>
                            <SfUploader ID="UploadFiles" AllowMultiple="false" AllowedExtensions=".png, .jpg, .jpeg">
                                <UploaderEvents ValueChange="@OnChange"
                                                Progressing="@ProgressingHandler">
                                </UploaderEvents>
                            </SfUploader>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(Sketch.IsActive)" EditorType="FormEditorType.Checkbox"
                              LabelText="Active">
                    </FormItem>
                </Fields>
                <Buttons>
                    <DexLoadingButton Name="Save" Type="MudButtonType.Submit"/>
                    @if (_sketchId != Guid.Empty)
                    {
                        <DexLoadingButton Name="Delete" Color="Color.Secondary" Click="DeleteSketch"/>
                    }
                </Buttons>
            </DexForm>
        }

    </MudItem>
    <MudItem md="4">
        @if (!_isProcessing)
        {
            <SfGrid DataSource="_sketches" AllowPaging="false" Height="700">
                <GridEvents TValue="Sketch" RowSelected="SelectSketch"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(Sketch.Image)">
                        <Template>
                            @{
                                var sketch = (context as Sketch);
                                <div class="image">
                                    <MudImage Src="@sketch!.Image" Fluid="true"></MudImage>
                                </div>
                            }
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        }
        else
        {
            <CommonLoader/>
        }

    </MudItem>
</MudStack>

@code {
    private List<SketchCategory> _sketchCategories = new();
    private Sketch SketchData { get; set; } = new();
    Guid _categoryId;
    Guid _sketchId;
    private bool _isProcessing;
    private List<Sketch> _sketches = new();

    protected override async Task OnInitializedAsync()
    {
        await GetSketchCategories();
    }

    private async Task GetSketchCategories()
    {
        _sketchCategories = await UnitOfWork.Setting.GetSketchCategories();
    }

    private async Task GetSketches()
    {
        _sketches = await UnitOfWork.Setting.GetSketcheByCategory(_categoryId);
    }

    private async Task SelectCategory(RowSelectEventArgs<SketchCategory> args)
    {
        _isProcessing = true;
        if (args.Data is not null)
        {
            _categoryId = args.Data.Id;
            await GetSketches();
            AddNewSketch();
        }

        _isProcessing = false;
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var ex = Path.GetExtension(file.FileInfo.Name);
                file.FileInfo.Name = $"{ApplicationState.SelectedPatient.PatientId}-sketch{ex}";
                var path = Path.Combine(UnitOfWork.FileService.GetTempPath(), file.FileInfo.Name);
                var filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                filestream.Close();
                SketchData.Image = GetBase64StringForImage(path);
                File.Delete(path);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void ProgressingHandler(Syncfusion.Blazor.Inputs.ProgressEventArgs args)
    {
        // Here, you can customize your code.
    }

    private async Task SaveSketch()
    {
        _isProcessing = true;
        SketchData.SketchCategoryId = _categoryId;
        var res = await UnitOfWork.Setting.SaveSketch(_sketchId, SketchData);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            SketchData = new();
            await GetSketches();

        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        _isProcessing = false;
    }

    protected static string GetBase64StringForImage(string imgPath)
    {
        var imageBytes = File.ReadAllBytes(imgPath);
        var base64String = Convert.ToBase64String(imageBytes);
        return "data:image/png;base64," + base64String;
    }

    private void SelectSketch(RowSelectEventArgs<Sketch> args)
    {
        if (args.Data is not null)
        {
            _sketchId = args.Data.Id;
            SketchData = args.Data;
        }
        else
        {
            _sketchId = Guid.Empty;
            SketchData = new();
        }
    }

    private void AddNewSketch()
    {
        _sketchId = Guid.Empty;
        SketchData = new();
    }

    private async Task DeleteSketch()
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var res = await UnitOfWork.Setting.DeleteSketch(_sketchId);
            Snackbar.SuccessMessage(res.Messages.First());
            await GetSketches();
            AddNewSketch();
        }
    }

}