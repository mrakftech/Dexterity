@using Dexterity.Components.Pages.PatientManager.Components.Form
@using Services.Features.PatientManagement.Dtos
@using Services.Features.PatientManagement.Dtos.Details
<style>
    .e-tab .e-tab-header {
        background-image: linear-gradient(to top, #505285 0%, #585e92 12%, #65689f 25%, #7474b0 37%, #7e7ebb 50%, #8389c7 62%, #9795d4 75%, #a2a1dc 87%, #b5aee4 100%);
    }
    .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
        color: white!important;
        font-weight: bolder;
    }
    .e-tab .e-tab-header .e-toolbar-item.e-active {
        background: white;
        font-weight: bolder;
    }
</style>
@if (_loading)
{
    <MudProgressCircular Indeterminate="_loading" Color="MudColor.Primary"></MudProgressCircular>
}
else
{
    <SfAppBar ColorMode="AppBarColor.Primary">
        <span class="regular text-bold"> @($" Edit - {@Patient.FirstName} {@Patient.LastName} , Age: {PatientConstants.GetAge(Patient.DateOfBirth)} Yr(s), {Patient.Gender}")</span>
    </SfAppBar>
    <SfTab CssClass="mt-5" >
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Patient Details"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <SfDataForm Model="@Patient"
                                ColumnCount="3"
                                Width="100%"
                                ColumnSpacing="20px"
                                ButtonsAlignment="FormButtonsAlignment.Left"
                                OnValidSubmit="SavePatientInfo">
                        <FormValidator>
                            <ObjectGraphDataAnnotationsValidator/>
                        </FormValidator>
                        <PatientDetailForm Patient="Patient"/>
                        <FormButtons>
                            <DexLoadingButton Name="Save Patient" Processing="_processing" Type="MudButtonType.Submit" FullWidth="false"></DexLoadingButton>
                        </FormButtons>
                    </SfDataForm>
                </ContentTemplate>
            </TabItem>
            <TabItem >
                <ChildContent>
                    <TabHeader Text="Extra Details"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <ExtraDetailFrom PatientExtraDetail="ExtraDetail"/>
                </ContentTemplate>
            </TabItem>
            <TabItem >
                <ChildContent>
                    <TabHeader Text="Contacts"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PatientContacts Id="Id"/>
                </ContentTemplate>
            </TabItem>
            <TabItem >
                <ChildContent>
                    <TabHeader Text="Patient Occupations"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PatientOccupations Id="Id"/>
                </ContentTemplate>
            </TabItem>
            <TabItem >
                <ChildContent>
                    <TabHeader Text="Patient Alerts"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PatientAlerts Id="Id"/>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Related Healthcare Professional"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <RelatedHcp Id="Id"/>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Register to Group"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <Grouping Id="Id"/>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Next Kin and Carers"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PatientFamily/>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
}


@code {
    [Parameter] public Guid Id { get; set; }
    private UpsertPatientDto Patient { get; set; } = new();
    private PatientExtraDetailDto ExtraDetail { get; set; } = new();
    private bool _processing;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await Task.Delay(500);
        await GetPatient(Id);
        _loading = false;
    }

    private async Task GetPatient(Guid id)
    {
        var response = await UnitOfWork.Patient.GetPatient(id);
        SetExtraDetails(response);
        Patient = Mapper.Map<UpsertPatientDto>(response);
    }

    private void SetExtraDetails(PatientDto response)
    {
        //Other Details
        ExtraDetail.Ethnicity = response.OtherDetails.Ethnicity;
        ExtraDetail.Religion = response.OtherDetails.Religion;
        ExtraDetail.InterpreterRequired = response.OtherDetails.InterpreterRequired;
        ExtraDetail.PreferredLanguage = response.OtherDetails.PreferredLanguage;
        ExtraDetail.AdvocacyNeeds = response.OtherDetails.AdvocacyNeeds;
        ExtraDetail.TransportNeeds = response.OtherDetails.TransportNeeds;

        //Marital Details
        ExtraDetail.Status = response.MaritalDetails.Status;
        ExtraDetail.StartDate = response.MaritalDetails.StartDate;
        ExtraDetail.EndDate = response.MaritalDetails.EndDate;


        ExtraDetail.PatientId = response.Id;
    }

    public async Task SavePatientInfo()
    {
        _processing = true;
        var res = await UnitOfWork.Patient.UpdatePatient(Id, Patient);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessge(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }

        _processing = false;
    }


}