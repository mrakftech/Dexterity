@using Services.Features.PatientManagement.Dtos.Details
@using Dexterity.Components.Pages.PatientManager.Components.Summary
<style>
    .e-tab .e-tab-header {
        background-image: linear-gradient(to top, #505285 0%, #585e92 12%, #65689f 25%, #7474b0 37%, #7e7ebb 50%, #8389c7 62%, #9795d4 75%, #a2a1dc 87%, #b5aee4 100%);
    }
    .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
        color: white!important;
        font-weight: bolder;
    }
    .e-tab .e-tab-header .e-toolbar-item.e-active {
        background: white;
        font-weight: bolder;
    }
</style>
<TabTitle Title="@_title">
    <ActionButtons>
        @if (ApplicationState.SelectedPatientId != Guid.Empty)
        {
            <DexSimpleButton Name="Go Back" Click="() => ChangeTab(3)" Color="MudColor.Primary" FullWidth="false"/>
        }
    </ActionButtons>
</TabTitle>

@if (ApplicationState.SelectedPatientId != Guid.Empty)
{
    if (!_loading)
    {
         <MudItem md="12" Class="vertical-space">
        <InnerLayout AllHeight="700px">
            <NavigationItems>
                <MudList T="string" Style="width: 200px">
                    <MudListItem T="string" Text="Details" Icon="fas fa-memo-circle-info" OnClick="@(() => ClickChangedTab(0))"/>
                    <MudListItem T="string" Text="Contacts" Icon="fas fa-address-book" OnClick="@(() => ClickChangedTab(1))"/>
                    <MudListItem T="string" Text="Medical Summary" Icon="fas fa-receipt" OnClick="@(() => ClickChangedTab(2))"/>
                    <MudListItem T="string" Text="Medical History" Icon="fas fa-files-medical" OnClick="@(() => ClickChangedTab(3))"/>
                    <MudListItem T="string" Text="Baseline Details" Icon="fas fa-shield-heart" OnClick="@(() => ClickChangedTab(4))"/>
                    <MudListItem T="string" Text="Visit History" Icon="fas fa-rectangle-history" OnClick="@(() => ClickChangedTab(5))"/>
                    <MudListItem T="string" Text="SMS History" Icon="fas fa-message" OnClick="@(() => ClickChangedTab(6))"/>
                    <MudListItem T="string" Text="Patient Tasks" Icon="fas fa-bars-progress" OnClick="@(() => ClickChangedTab(7))"/>
                </MudList>
            </NavigationItems>
            <DexContentTabs>
                <div class="d-flex justify-center align-center mt-lg-5" style="width: 100%!important;">
                    <MudTabs @ref="_tabs">
                        <MudTabPanel Text="">
                            <PatientDetail Patient="Patient"/>
                        </MudTabPanel> 
                        <MudTabPanel Text="">
                            <ContactDetail/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <MedicalSummary/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <MedicalHistory/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <Baseline Patient="Patient"/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <VisitHistory/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <PatientSmsHistory/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <PatientTask/>
                        </MudTabPanel>
                    </MudTabs>
                </div>
            </DexContentTabs>
        </InnerLayout>
    </MudItem>

    }
    else
    {
        <CommonLoader/>
    }
}
else
{
    <PatientList SelectPatient="SelectPatient"/>
}


@code {
    [Parameter] public EventCallback<int> TabChangeClick { get; set; }
    MudTabs _tabs = new();
    private PatientSummaryDto Patient { get; set; } = new();
    string _tabIndex = "0";
    private bool _loading;
    private string _title = ApplicationState.SelectedPatientId == Guid.Empty ? "Search Patient" : "Patient Summary";
    
    protected override async Task OnInitializedAsync()
    {
        await GetPateintSummary();
        _tabs.ActivatePanel(_tabIndex);
    }

    private void ClickChangedTab(int tabIndex)
    {
        _tabs.ActivatePanel(tabIndex);
    }


    protected async Task ChangeTab(int e)
    {
        await TabChangeClick.InvokeAsync(e);
    }
    private async Task GetPateintSummary()
    {
        _loading = true;
        var summary = await UnitOfWork.Patient.GetPatientSummary(ApplicationState.SelectedPatientId);
        Patient = summary;
        _loading = false;
    }
    
    private async Task SelectPatient(Guid patientId)
    {
        ApplicationState.SelectedPatientId = patientId;
        await GetPateintSummary();
        StateHasChanged();
    }
}