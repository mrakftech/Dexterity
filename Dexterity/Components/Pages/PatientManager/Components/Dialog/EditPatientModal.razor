@using Dexterity.Components.Pages.PatientManager.Components.Form
@using Services.Features.PatientManagement.Dtos.Upsert

@if (_loading)
{
    <MudProgressCircular Indeterminate="_loading" Color="MudColor.Primary"></MudProgressCircular>
}
else
{
    <MudDialog>
        <TitleContent>
            Edit Patient - @Patient.FirstName @Patient.LastName
        </TitleContent>
        <DialogContent>
            <MudItem Class="mt-5">
                <SfTab>
                    <TabItems>
                        <TabItem >
                            <ChildContent>
                                <TabHeader Text="Patient Details"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <SfDataForm Model="@Patient"
                                            ColumnCount="3"
                                            Width="100%"
                                            ColumnSpacing="20px"
                                            ButtonsAlignment="FormButtonsAlignment.Left"
                                            OnValidSubmit="SavePatientInfo">
                                    <FormValidator>
                                        <ObjectGraphDataAnnotationsValidator/>
                                    </FormValidator>
                                    <PatientDetailForm Patient="Patient"/>
                                    <FormButtons>
                                        <DexLoadingButton Name="Save Patient" Processing="_processing" Type="MudButtonType.Submit" FullWidth="false"></DexLoadingButton>
                                    </FormButtons>
                                </SfDataForm>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem >
                            <ChildContent>
                                <TabHeader Text="Extra Details"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <ExtraDetailFrom PatientExtraDetail="ExtraDetail"/>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem >
                            <ChildContent>
                                <TabHeader Text="Contacts"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <PatientContacts Id="Id"/>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem >
                            <ChildContent>
                                <TabHeader Text="Patient Occupations"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <PatientContacts Id="Id"/>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </MudItem>


        </DialogContent>
        <DialogActions></DialogActions>

    </MudDialog>
}


@code {
    [Parameter] public Guid Id { get; set; }
    private UpsertPatientDto Patient { get; set; } = new();
    private PatientExtraDetailDto ExtraDetail { get; set; } = new();
    private bool _processing;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await Task.Delay(3000);
        await GetPatient(Id);
        _loading = false;
    }

    private async Task GetPatient(Guid id)
    {
        var response = await UnitOfWork.Patient.GetPatient(id);
        SetExtraDetails(response);
        Patient = Mapper.Map<UpsertPatientDto>(response);
    }

    private void SetExtraDetails(PatientDto response)
    {
        //Other Details
        ExtraDetail.Ethnicity = response.OtherDetails.Ethnicity;
        ExtraDetail.Religion = response.OtherDetails.Religion;
        ExtraDetail.InterpreterRequired = response.OtherDetails.InterpreterRequired;
        ExtraDetail.PreferredLanguage = response.OtherDetails.PreferredLanguage;
        ExtraDetail.AdvocacyNeeds = response.OtherDetails.AdvocacyNeeds;
        ExtraDetail.TransportNeeds = response.OtherDetails.TransportNeeds;

        //Marital Details
        ExtraDetail.Status = response.MaritalDetails.Status;
        ExtraDetail.StartDate = response.MaritalDetails.StartDate;
        ExtraDetail.EndDate = response.MaritalDetails.EndDate;


        ExtraDetail.PatientId = response.Id;
    }

    public async Task SavePatientInfo()
    {
        _processing = true;
        var res = await UnitOfWork.Patient.UpdatePatient(Id, Patient);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessge(res.Messages.First());
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }

        _processing = false;
    }


}