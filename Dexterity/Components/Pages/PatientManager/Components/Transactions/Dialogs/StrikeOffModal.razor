@using Services.Features.PatientManagement.Dtos.Account
@using Services.Features.Settings.Dtos
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@using Services.Features.UserAccounts.Dtos.User
<DexDialog>
    <DialogTitle>
        Accounting - Strike Off
    </DialogTitle>
    <Content>
        <TabTitle Title="@($"Personal Balance: {PatientAccount.Balance:C}")"></TabTitle>
        <DexForm Model="StrikeOff" OnValidSubmit="AddStrikeOff">
            <Fields>
                <FormItem Field="@nameof(@StrikeOffDto.HcpId)" LabelText="Charged By">
                    <Template>
                        <label class="e-form-label"> HCP: </label>
                        <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="HCP" DataSource="@HealthCares" @bind-Value="@StrikeOff.HcpId">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(StrikeOffDto.PaymentTo)" LabelText="Charge To" ColumnSpan="1"/>
                <FormItem Field="@nameof(StrikeOffDto.AccountType)" LabelText="Payment Type">
                    <Template>
                        <label class="e-form-label"> Payment To: </label>
                        <SfDropDownList TValue="int" TItem="AccountTypeDto" Placeholder="Payment To" DataSource="@AccountTypes" @bind-Value="@StrikeOff.AccountTypeId">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="AccountTypeDto" ValueChange="OnValueChange"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(StrikeOffDto.Date)" LabelText="Date" ColumnSpan="1" EditorType="FormEditorType.DatePicker"/>
                <FormItem Field="@nameof(StrikeOffDto.Amount)" LabelText="Amount" IsEnabled="false"></FormItem>
                <FormItem Field="@nameof(@StrikeOffDto.Description)" LabelText="Description" EditorType="FormEditorType.TextArea"/>
                <FormItem Field="@nameof(StrikeOffDto.Amount)">
                    <Template>
                        <SfGrid @ref="@_grid" DataSource="Transactions" AllowSelection="true" AllowPaging="true">
                            <GridPageSettings PageSize="4"></GridPageSettings>
                            <GridEvents RowSelected="GetSelectedRecords" RowDeselected="GetDeselectedRow" TValue="GetTransactionDto"></GridEvents>
                            <GridSelectionSettings PersistSelection="true" CheckboxMode="CheckboxSelectionType.ResetOnRowClick" Type="SelectionType.Multiple"></GridSelectionSettings>
                            <GridColumns>
                                <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(GetTransactionDto.CreatedDate) HeaderText="Date" Format="d" Type="ColumnType.DateTime" Width="90"></GridColumn>
                                <GridColumn Field=@nameof(GetTransactionDto.Description) HeaderText="Description" Width="90"></GridColumn>
                                <GridColumn Field=@nameof(GetTransactionDto.Debit) HeaderText="Amount" Format="C" Width="90"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </Template>
                </FormItem>
            </Fields>
            <Buttons>
                <DexLoadingButton Name="Save" Type="MudButtonType.Submit" Processing="@_processing" Icon="fas fa-floppy-disk"></DexLoadingButton>
            </Buttons>
        </DexForm>
    </Content>
</DexDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public GetPatientAccountDto PatientAccount { get; set; }
    private List<GetTransactionDto> Transactions { get; set; } = new();
    private List<HealthcareDto> HealthCares { get; set; } = new();
    private StrikeOffDto StrikeOff { get; set; } = new();
    private bool _processing;
    private List<AccountTypeDto> AccountTypes { get; set; } = new();

    SfGrid<GetTransactionDto> _grid = new();

    protected override async Task OnInitializedAsync()
    {
        await GetHealthCares();
        await GetPaymentTypes();
        Transactions = await UnitOfWork.Patient.GetOutstanding(PatientAccount.Id);
    }

    private async Task GetPaymentTypes()
    {
        AccountTypes = await UnitOfWork.Setting.GetAllAccountTypes(TransactionActionType.StrikeOff);
    }

    private async Task GetHealthCares()
    {
        HealthCares = await UnitOfWork.User.GetDoctors(ApplicationState.Auth.CurrentUser.ClinicId);
    }

    private async Task AddStrikeOff()
    {
        _processing = true;
        StrikeOff.AccountId = PatientAccount.Id;
        if (StrikeOff.Amount > PatientAccount.Balance)
        {
            Snackbar.FailMessage("Patient don't have enough balance.");
            _processing = false;
            return;
        }

        if (StrikeOff.SelectedTransaction.Count == 0)
        {
            Snackbar.FailMessage("Please Allocate the Payment to 1 or more Charges.");
            _processing = false;
            return;
        }

        var res = await UnitOfWork.Patient.StrikeOff(StrikeOff);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDialog.Close();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        await Task.Delay(1000);
        _processing = false;
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<GetTransactionDto> args)
    {
        StrikeOff.SelectedTransaction = await _grid.GetSelectedRecordsAsync();
        var totalAmount = StrikeOff.SelectedTransaction.Sum(x => x.Debit);
        StrikeOff.Amount = totalAmount;
        StrikeOff.TotalAmount = StrikeOff.SelectedTransaction.Sum(x => x.Debit);
        StateHasChanged();
    }

    private async Task GetDeselectedRow(RowDeselectEventArgs<GetTransactionDto> args)
    {
        StrikeOff.SelectedTransaction = await _grid.GetSelectedRecordsAsync();
        var totalAmount = StrikeOff.SelectedTransaction.Sum(x => x.Debit);
        StrikeOff.Amount = totalAmount;
        StrikeOff.TotalAmount = StrikeOff.SelectedTransaction.Sum(x => x.Debit);
        StateHasChanged();
    }

    public void OnValueChange(ChangeEventArgs<int, AccountTypeDto> args)
    {
        var accountType = args.ItemData;
        StrikeOff.Amount = accountType.Amount;
        StrikeOff.AccountType = accountType.Name;
    }

}