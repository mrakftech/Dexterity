@using Dexterity.Components.Pages.PatientManager.Dialogs
@using Services.Features.PatientManagement.Dtos
@using Syncfusion.Blazor.Spinner
<TabTitle Title="Patients">
    <ActionButtons>
        <DexSimpleButton Name="Load Patients" Click="GetPatients" Color="MudColor.Primary" FullWidth="false" />
    </ActionButtons>
</TabTitle>
<MudItem md="12">
    <DexGrid DataSource="Patients" Loading="_patientLoading">
        <DexGridColumns>
            <GridColumn Field="@nameof(PatientListDto.CreatedDate)" HeaderText="Created Date" Width="120px" Format="g" Type="ColumnType.DateTime"></GridColumn>
            <GridColumn Field="@nameof(PatientListDto.FullName)" HeaderText="Full Name" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(PatientListDto.Gender)" HeaderText="Gender" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(PatientListDto.DateOfBirth)" HeaderText="Date Of Birth" Width="120px" Format="d" Type="ColumnType.DateTime"></GridColumn>
            <GridColumn Field="@nameof(PatientListDto.Email)" HeaderText="Email" Width="120px"></GridColumn>
            <GridColumn Field="@nameof(PatientListDto.AddressLine1)" HeaderText="Address" Width="120px"></GridColumn>
            <GridColumn HeaderText="Actions" Width="120">
                <Template>
                    @{
                        var patient = (context as PatientListDto);
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit" Color="MudColor.Primary" OnClick="() => EditPatient(patient.Id)" />
                        <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeletePatient(patient.Id)" />
                    }
                </Template>
            </GridColumn>
        </DexGridColumns>
    </DexGrid>
</MudItem>

@code {
    private List<PatientListDto> Patients { get; set; } = new();
    private bool _patientLoading;

    private async Task GetPatients()
    {
        _patientLoading = true;
        await Task.Delay(2000);
        Patients = await UnitOfWork.Patient.GetPatients();
        _patientLoading = false;
    }

    private async Task EditPatient(Guid id)
    {
        var parameters = new DialogParameters { { "Id", id } };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, Position = DialogPosition.Center, FullScreen = true };
        await DialogService.ShowAsync<EditPatientModal>("", parameters, options);
    }

    private async Task DeletePatient(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            var patientRes = await UnitOfWork.Patient.DeletePatient(id);
            await GetPatients();
            Snackbar.SuccessMessge(patientRes.Messages.First());
        }
    }

}