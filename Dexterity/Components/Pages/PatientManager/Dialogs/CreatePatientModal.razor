@using global::Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Services.State
@using Shared.Constants.Module
<MudDialog>
    <DialogContent>
        <MudItem Class="mt-2" md="12">
            <Validations @ref="_validationsRef" Model="UpsertPatientDto" Mode="ValidationMode.Manual">
                <MudStack>
                    <MudItem>
                        <MudStack Row >
                            <MudItem md="3">
                                <DexTextInputField Label="Family Name" @bind-FieldDataSource="@UpsertPatientDto.FamilyName"></DexTextInputField>
                            </MudItem>
                            <MudItem md="3">
                                <DexTextInputField Label="First Name" @bind-FieldDataSource="@UpsertPatientDto.FirstName"></DexTextInputField>
                            </MudItem>
                            <MudItem md="3">
                                <DexTextInputField Label="Last Name" @bind-FieldDataSource="@UpsertPatientDto.LastName"></DexTextInputField>
                            </MudItem>
                            <MudItem md="3">
                                <Field >
                                    <FieldLabel >Date of Birth</FieldLabel>
                                    <FieldBody >
                                        <DateEdit TValue="DateTime" Date="@UpsertPatientDto.DateOfBirth"/>
                                    </FieldBody>
                                </Field>
                            </MudItem>
                        </MudStack>
                    </MudItem>
                    <MudItem>
                        <MudStack Row >
                            <MudItem md="3">
                                <Field>
                                    <FieldLabel >Gender</FieldLabel>
                                    <FieldBody >
                                        <Select TValue="string" @bind-SelectedValue="@UpsertPatientDto.Gender">
                                            <SelectItem Value="@("")">Select Gender</SelectItem>
                                            @foreach (var item in PatientConstants.Gender)
                                            {
                                                <SelectItem Value="@(item)">@item</SelectItem>
                                            }
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </MudItem>
                            <MudItem md="9">
                                <DexTextInputField Label="Address" @bind-FieldDataSource="@UpsertPatientDto.AddressLine1"></DexTextInputField>
                            </MudItem>
                        </MudStack>
                    </MudItem>
                    <MudItem>
                        <MudStack Row >
                            <MudItem md="4">
                                <DexTextInputField Label="Mobile Number" @bind-FieldDataSource="@UpsertPatientDto.Mobile"></DexTextInputField>

                            </MudItem>
                            <MudItem md="4">
                                <DexTextInputField Label="Email" @bind-FieldDataSource="@UpsertPatientDto.EmailAddress" FieldRole="TextRole.Email"></DexTextInputField>
                            </MudItem>
                            <MudItem md="4">
                                <Field >
                                    <FieldLabel ColumnSize="ColumnSize.Is2">HCP</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10">
                                        <Select TValue="Guid" @bind-SelectedValue="@UpsertPatientDto.HealthCareProfessionalId">
                                            <SelectItem Value="@(Guid.Empty)">Select Doctor</SelectItem>
                                            @foreach (var item in HealthCares)
                                            {
                                                <SelectItem Value="@(item.Id)">@item.FullName</SelectItem>
                                            }
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </MudItem>
                        </MudStack>
                    </MudItem>
                </MudStack>
            </Validations>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@_processing" OnClick="CreatePatient" Variant="Variant.Filled" Color="MudColor.Primary" FullWidth="true">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="MudSize.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Create Patient</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    public UpsertPatientDto UpsertPatientDto { get; set; } = new();
    private bool _processing;
    private List<HealthcareDto> HealthCares { get; set; } = new();
    Validations _validationsRef;

    protected override async Task OnInitializedAsync()
    {
        await GetHealthCares();
    }

    private async Task CreatePatient(MouseEventArgs obj)
    {
        _processing = true;
        if (await _validationsRef.ValidateAll())
        {
            if (UpsertPatientDto.HealthCareProfessionalId == Guid.Empty)
            {
                Snackbar.FailMessge("Please Select Doctor");
                _processing = false;
                return;
            }

            await Task.Delay(2500);
            var res = await UnitOfWork.Patient.CreatePatient(UpsertPatientDto, default);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessge(res.Messages.First());
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }

        _processing = false;
    }

    private async Task GetHealthCares()
    {
        var users = await UnitOfWork.User.GetUsersByClinic(ApplicationState.CurrentUser.ClinicId);
        HealthCares = users.Where(x => x.UserType == UserTypeConstants.Doctor).ToList();
    }

}