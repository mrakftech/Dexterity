@using Domain.Entities.Settings.Templates
@using Services.Features.Messaging.Dtos.Sms
@using Services.Features.PatientManagement.Dtos
@using Syncfusion.Blazor.RichTextEditor
<TabTitle Title="Send Email"></TabTitle>
<div class="vertical-space">
    <Validations @ref="@_validationsRef" Mode="ValidationMode.Manual" Model="@_mailRequest">
        <MudStack>
            <MudItem>
                <FieldLabel>Email Template</FieldLabel>
                <SfDropDownList TValue="Guid" TItem="EmailTemplate" Placeholder="Select a template" DataSource="@EmailTemplates">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="Guid" TItem="EmailTemplate" ValueChange="OnValueChange"></DropDownListEvents>
                </SfDropDownList>
            </MudItem>
            <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"></PatientAutoComplete>
            <MudItem>
                <SfRichTextEditor @bind-Value="@_mailRequest.Body" Width="520px"/>
            </MudItem>
            <MudItem>
                <DexTextInputField Label="Subject" @bind-FieldDataSource="_mailRequest.Subject"></DexTextInputField>
            </MudItem>
            <MudItem>
                <DexTextInputField Label="Email" @bind-FieldDataSource="_mailRequest.To" FieldRole="TextRole.Email"></DexTextInputField>
            </MudItem>
            <MudItem>
                <MudButton Disabled="@_processing" OnClick="SendSmsClick" Variant="Variant.Filled" Color="MudColor.Primary" StartIcon="">
                    @if (_processing)
                    {
                    <MudProgressCircular Class="ms-n1 white-color" Size="MudSize.Small" Indeterminate="true"/>
                    <MudText Class="ms-2 white-color">Processing</MudText>
                    }
                    else
                    {
                    <MudText><i class="fas fa-paper-plane"></i> Send Mail</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudStack>
    </Validations>
    
</div>

@code {
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    private MailRequest _mailRequest = new();
    Validations _validationsRef;
    private bool _processing;
    private List<EmailTemplate> EmailTemplates { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetSmsTemplates();
    }


    private async Task GetSmsTemplates()
    {
        EmailTemplates = await UnitOfWork.Setting.GetEmailTemplates();
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            _mailRequest.To = patient.Email;
        }
    }

    private async Task SendSmsClick()
    {
        _processing = true;
        if (await _validationsRef.ValidateAll())
        {
            await Task.Delay(2500);
            await MailService.SendAsync(_mailRequest, default);
            Snackbar.SuccessMessge("Email has been sent.");
            await _validationsRef.ClearAll();
        }

        _processing = false;
    }


    public void OnValueChange(ChangeEventArgs<Guid, EmailTemplate> args)
    {
        _mailRequest.Body = args.ItemData.Content;
    }

}