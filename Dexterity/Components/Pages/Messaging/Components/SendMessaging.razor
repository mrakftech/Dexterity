@using ClickATell.Requests
@using Domain.Entities.Settings.Templates
@using Services.Features.Messaging.Dtos.Sms
@using Services.Features.PatientManagement.Dtos
<TabTitle Title="Send SMS"></TabTitle>

<div class="vertical-space">
    <Validations @ref="@_validationsRef" Mode="ValidationMode.Manual" Model="@_messageDto">
        <MudStack>
            <MudItem>
                <FieldLabel>Sms Template</FieldLabel>
                <SfDropDownList TValue="Guid" TItem="SmsTemplate" Placeholder="Select a template" DataSource="@SmsTemplates">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="Guid" TItem="SmsTemplate" ValueChange="OnValueChange"></DropDownListEvents>
                </SfDropDownList>
            </MudItem>
            <MudItem>
                <Validation>
                    <FieldLabel>Content</FieldLabel>
                    <MemoEdit @bind-Text="@_messageDto.Content">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </MemoEdit>
                </Validation>
            </MudItem>
            <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"/>
            <MudItem>
                <DexTextInputField Label="Mobile" @bind-FieldDataSource="@_messageDto.Mobile"></DexTextInputField>
            </MudItem>
            <MudItem>
                <MudButton Disabled="@_processing" OnClick="@SendSmsClick" Variant="Variant.Filled" Color="MudColor.Primary" StartIcon="">
                    @if (_processing)
                    {
                    <MudProgressCircular Class="ms-n1 white-color" Size="MudSize.Small" Indeterminate="true"/>
                    <MudText Class="ms-2 white-color">Processing</MudText>
                    }
                    else
                    {
                    <MudText><i class="fas fa-paper-plane"></i> Send SMS</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudStack>
    </Validations>
</div>

@code{
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    Validations _validationsRef;
    private SendMessageDto _messageDto = new();
    private List<SmsTemplate> SmsTemplates { get; set; } = new();
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        await GetSmsTemplates();
    }


    private async Task GetSmsTemplates()
    {
        SmsTemplates = await UnitOfWork.Setting.GetSmsTemplates();
    }

    private async Task SendSmsClick()
    {
        _processing = true;
        if (await _validationsRef.ValidateAll())
        {
            var util = PhoneNumberUtil.GetInstance();
            var s = util.Parse(_messageDto.Mobile, ApplicationConstants.AppRegion);
            var n = util.Format(s, PhoneNumberFormat.E164);
            await Task.Delay(2500);
            var request = new SmsRequest()
            {
                Content = _messageDto.Content,
                To = [n]
            };
            var res = await SmsEndpoints.SendMessage(request);
            if (res.ResponseCode == 202)
            {
                Snackbar.SuccessMessge("Message has been sent.");
            }
            else
            {
                foreach (var item in res.Messages)
                {
                    Console.WriteLine(item.ErrorDescription);
                }
            }

            await _validationsRef.ClearAll();
        }

        _processing = false;
    }

    public void OnValueChange(ChangeEventArgs<Guid, SmsTemplate> args)
    {
        _messageDto.Content = args.ItemData.Content;
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            _messageDto.Mobile = patient.Mobile;
        }
    }

}