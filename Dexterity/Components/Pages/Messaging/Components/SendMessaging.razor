@using ClickATell.Requests
@using Domain.Entities.Settings.Templates
@using Services.Features.Messaging.Dtos.Sms
@using Services.Features.PatientManagement.Dtos

<MudText Align="Align.Center" Typo="Typo.h4" Class="text-bold">Send SMS</MudText>
<Validations @ref="@_validationsRef" Mode="ValidationMode.Manual" Model="@_messageDto">
    <MudStack>
        <MudItem>
            <FieldLabel>Sms Template</FieldLabel>
            <MudSelect T="Guid" Label="" AnchorOrigin="Origin.BottomCenter" ValueChanged="ChangeSmsTemplate" Variant="Variant.Outlined" Margin="MudMargin.Dense">
                <MudSelectItem T="Guid" Value="@Guid.Empty">None</MudSelectItem>
                @foreach (var item in SmsTemplates)
                {
                    <MudSelectItem Value="@(item.Id)">@($"[{@item.Name}]")</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem>
            <Validation>
                <FieldLabel>Content</FieldLabel>
                <MemoEdit @bind-Text="@_messageDto.Content">
                    <Feedback>
                        <ValidationError/>
                    </Feedback>
                </MemoEdit>
            </Validation>
        </MudItem>
        <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"/>
        <MudItem>
            <DexTextInputField Label="Mobile" @bind-FieldDataSource="@_messageDto.Mobile"></DexTextInputField>
        </MudItem>
        <MudItem>
            <MudButton Disabled="@_processing" OnClick="@SendSmsClick" Variant="Variant.Filled" Color="MudColor.Primary" StartIcon="">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1 white-color" Size="MudSize.Small" Indeterminate="true"/>
                    <MudText Class="ms-2 white-color">Processing</MudText>
                }
                else
                {
                    <MudText><i class="fas fa-paper-plane"></i> Send SMS</MudText>
                }
            </MudButton>
        </MudItem>
    </MudStack>
</Validations>


@code{
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    Validations _validationsRef;
    private SendMessageDto _messageDto = new();
    private List<SmsTemplate> SmsTemplates { get; set; } = new();
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        await GetSmsTemplates();
    }


    private async Task GetSmsTemplates()
    {
        SmsTemplates = await UnitOfWork.Setting.GetSmsTemplates();
    }

    private async Task SendSmsClick()
    {
        _processing = true;
        if (await _validationsRef.ValidateAll())
        {
            var util = PhoneNumberUtil.GetInstance();
            var s = util.Parse(_messageDto.Mobile, ApplicationConstants.AppRegion);
            var n = util.Format(s, PhoneNumberFormat.E164);
            await Task.Delay(2500);
            var request = new SmsRequest()
            {
                Content = _messageDto.Content,
                To = [n]
            };
            var res = await SmsEndpoints.SendMessage(request);
            if (res.ResponseCode == 202)
            {
                Snackbar.SuccessMessge("Message has been sent.");
            }
            else
            {
                foreach (var item in res.Messages)
                {
                    Console.WriteLine(item.ErrorDescription);
                }
            }

            await _validationsRef.ClearAll();
        }

        _processing = false;
    }


    private async Task ChangeSmsTemplate(Guid id)
    {
        if (id == Guid.Empty)
        {
            _messageDto.Content = "";
        }
        else
        {
            var res = await UnitOfWork.Setting.GetSmsTemplate(id);
            _messageDto.Content = res.Data.Content;
        }
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            _messageDto.Mobile = patient.Mobile;
        }
    }

}