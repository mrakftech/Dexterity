@using Domain.Entities.Settings.Templates
@using Services.Features.Messaging.Dtos.Sms
@using Services.Features.PatientManagement.Dtos.Details
<TabTitle Title="Send SMS"></TabTitle>
<div class="vertical-space">
    <DexForm Model="@_messageDto" OnValidSubmit="SendSmsClick">
        <Fields>
            <FormItem Field="@nameof(SendMessageDto.Content)">
                <Template>
                    <label class="e-form-label">Template</label>
                    <SfDropDownList TValue="Guid" TItem="SmsTemplate" Placeholder="Select a template" DataSource="@SmsTemplates">
                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="Guid" TItem="SmsTemplate" ValueChange="OnValueChange"></DropDownListEvents>
                    </SfDropDownList>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(SendMessageDto.Content)">
                <Template>
                    <DexInputBox Label="Content" @bind-FieldDataSource="@_messageDto.Content" IsMultiLine="true"/>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(SendMessageDto.PatientId)">
                <Template>
                    <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"/>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(SendMessageDto.Mobile)">
                <Template>
                    <DexInputBox Label="Mobile" @bind-FieldDataSource="@_messageDto.Mobile"/>
                </Template>
            </FormItem>
        </Fields>
        <Buttons>
            <DexLoadingButton Name="Send Sms" Processing="_processing" Type="MudButtonType.Submit"></DexLoadingButton>
        </Buttons>
    </DexForm>
</div>

@code{
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    private SendMessageDto _messageDto = new();
    private List<SmsTemplate> SmsTemplates { get; set; } = new();
    private bool _processing;

    protected override async Task OnInitializedAsync()
    {
        await GetSmsTemplates();
    }


    private async Task GetSmsTemplates()
    {
        SmsTemplates = await UnitOfWork.Setting.GetSmsTemplates();
    }

    private async Task SendSmsClick()
    {
        _processing = true;
        await Task.Delay(1500);
        var res = await UnitOfWork.Messaging.SendSms(_messageDto);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessge("Message has been sent.");
        }
        else
        {
            foreach (var item in res.Messages)
            {
                Console.WriteLine(item.First());
            }
        }

        _processing = false;
    }

    public void OnValueChange(ChangeEventArgs<Guid, SmsTemplate> args)
    {
        _messageDto.Content = args.ItemData.Content;
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient == null) return;
        _messageDto.PatientId = patient.Id;
        _messageDto.Mobile = patient.Mobile;
    }

}