@using Services.Features.Messaging.Dtos.InstantChat
@using Services.Features.UserAccounts.Dtos.User

<TabTitle Title="Instant Message History"></TabTitle>
@if (UnitOfWork.User.CheckPermission(PermissionConstants.Read))
{
    <label class="e-form-label">Users</label>
    <SfAutoComplete @ref="_autoObj" TValue="string" TItem="UserResponseDto" Placeholder="Select a user"
                    DataSource="@_users">
        <AutoCompleteFieldSettings Value="FullName" Text="FullName"/>
        <AutoCompleteEvents TValue="string" TItem="UserResponseDto" ValueChange="OnChangeUser"
                            Focus="CreateHandler"></AutoCompleteEvents>
    </SfAutoComplete>
    <div class="ma-4">
        <DexGrid DataSource="_messageHistory" Loading="@_userLoading">
            <DexGridColumns>
                <GridColumn Field="@nameof(ChatHistoryDto.Date)" Format="g" Type="ColumnType.DateTime"
                            HeaderText="Created Date" Width="120px"></GridColumn>
                <GridColumn Field="@nameof(ChatHistoryDto.Type)" HeaderText="Type" Width="120px"></GridColumn>
                <GridColumn Field="@nameof(ChatHistoryDto.UserName)" HeaderText="User" Width="120px"></GridColumn>
                <GridColumn Field="@nameof(ChatHistoryDto.Message)" HeaderText="Message" Width="120px"></GridColumn>
            </DexGridColumns>
        </DexGrid>
    </div>
}
else
{
    <PermissionDenied/>
}


@code {
    private List<UserResponseDto> _users = [];
    private List<ChatHistoryDto> _messageHistory = [];
    private bool _userLoading;
    SfAutoComplete<string, UserResponseDto> _autoObj;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        var res = await UnitOfWork.User.GetUsers();
        _users = res;
    }

    private async Task GetConversation(Guid userId)
    {
        var res = await UnitOfWork.Messaging.GetConversationHistoryAsync(userId);
        _messageHistory = res;
    }


    private async Task OnChangeUser(ChangeEventArgs<string, UserResponseDto> obj)
    {
        _userLoading = true;
        if (obj.ItemData != null)
        {
            await GetConversation(obj.ItemData.Id);
        }

        _userLoading = false;
    }

    public async Task CreateHandler()
    {
        //await Created.InvokeAsync();
        await _autoObj.ShowPopupAsync();
    }

}