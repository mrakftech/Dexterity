@using Services.Features.PatientManagement.Dtos.Details
@using Icons = MudBlazor.Icons
@using global::Services.Features.Messaging.Dtos.Sms
@layout BlankLayout
<SfSpeedDial @ref="_speedDial" CssClass="popupSpeedDial" OpenIconCss="fas fa-tv" Content="Telehealth" >
    <PopupTemplate>
        <div class="speeddial-form">
            @if (_loadComponent)
            {
                <CommonLoader/>
            }
            else
            {
                <p>@_messageFrameLoading</p>
                <iframe allow="camera; microphone" src="@_meetingLink" height="700" @onload="FrameLoaded"></iframe>
                @if (!string.IsNullOrWhiteSpace(@_meetingLink))
                {
                    <MudStack Row>
                        <MudGrid Justify="MudJustify.Center">
                            <MudItem>
                                <MudTooltip Text="Minimize Window">
                                    <MudIconButton Icon="fas fa-compress-alt" Color="MudColor.Primary" OnClick="_speedDial.HideAsync"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Invite patients">
                                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="MudColor.Primary" OnClick="ToggleOpen"></MudIconButton>
                                </MudTooltip>
                                <MudPopover Open="_open" OverflowBehavior="OverflowBehavior.FlipOnOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                                    <MudPaper Outlined="true" Class="px-4 py-8">
                                        <MudStack>
                                            <DexForm Model="_invitePatient" ColumnCount="1" OnValidSubmit="ShareLinkToPatient">
                                                <Fields>
                                                    <FormItem Field="@nameof(_invitePatient.To)">
                                                        <Template>
                                                            <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"/>
                                                        </Template>
                                                    </FormItem>
                                                    <FormItem Field="@nameof(_invitePatient.To)">
                                                        <Template>
                                                            <FormItem LabelText="Patient Email" Field="@nameof(_invitePatient.To)"></FormItem>
                                                        </Template>
                                                    </FormItem>
                                                </Fields>
                                                <Buttons>
                                                    <DexLoadingButton Processing="_processing" Type="MudButtonType.Submit" Name="Send Mail"></DexLoadingButton>
                                                    <DexLoadingButton Color="MudColor.Error" Name="Close" Click="ToggleOpen"></DexLoadingButton>
                                                </Buttons>
                                            </DexForm>
                                        </MudStack>
                                    </MudPaper>
                                </MudPopover>
                            </MudItem>
                            <MudItem>
                                <MudTooltip Text="Copy Meeting Link">
                                    <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="MudColor.Primary" OnClick="CopyMeetingLink"></MudIconButton>
                                </MudTooltip>
                            </MudItem>
                            <MudItem>
                                <MudIconButton Icon="@Icons.Material.Filled.CallEnd" Color="MudColor.Secondary" OnClick="EndCall"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            }
        </div>
    </PopupTemplate>
</SfSpeedDial>

<style>
    .speeddial-form {
        width: 400px;
        height: 700px;
        text-align: center;
        border-radius: 10px;
        margin-top: 10px;
        overflow-y: auto;
        box-shadow: rgb(0 0 0 / 10%) 0px 10px 15px -3px, rgb(0 0 0 / 5%) 0px 4px 6px -2px;
        background: #f5f5f5;
        padding: 15px;
    }
    
</style>


@code {

    private List<PatientListDto> PatientList { get; set; } = new();
    private bool _loadComponent;
    private bool _processing;
    private string _meetingLink;
    private InvitePatientDto _invitePatient = new();
    private string _messageFrameLoading;
    private SfSpeedDial _speedDial;
    private bool _open;
    private void ToggleOpen() => _open = !_open;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ApplicationState.Telehealth.MeetingLink))
        {
            _loadComponent = true;
            _messageFrameLoading = "Loading video call components....";
            await Task.Delay(2000);
            await GetPatients();
            await CreateMeetingLink();
            _messageFrameLoading = "";
            _loadComponent = false;
        }
        else
        {
            _meetingLink = ApplicationState.Telehealth.MeetingLink;
        }
    }

    private async Task CreateMeetingLink()
    {
        ApplicationState.Telehealth.MeetingName = CryptographyHelper.GetUniqueKey(25);
        var res = await DailyMeetingRoom.CreateMeetingLink(ApplicationState.Telehealth.MeetingName);
        _meetingLink = res.Url;
        ApplicationState.Telehealth.MeetingLink = res.Url;
    }

    private async Task EndCall()
    {
        _loadComponent = true;
        StateHasChanged();
        await DailyMeetingRoom.DeleteRoom(ApplicationState.Telehealth.MeetingName);
        ApplicationState.Telehealth.MeetingLink = string.Empty;
        ApplicationState.Telehealth.MeetingName = string.Empty;
        await CreateMeetingLink();
        await Task.Delay(2500);

        _loadComponent = false;
    }

    private void FrameLoaded(Microsoft.AspNetCore.Components.Web.ProgressEventArgs e)
    {
        _messageFrameLoading = "";
    }

    private async Task CopyMeetingLink()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _meetingLink);
        Snackbar.SuccessMessage("Link Copied");
    }

    private async Task ShareLinkToPatient()
    {
        _processing = true;
        await Task.Delay(1500);
        var mailRequest = new MailRequest()
        {
            Subject = "Meeting Link",
            Body = _meetingLink,
            To = _invitePatient.To
        };
        await MailService.SendAsync(mailRequest, default);
        Snackbar.SuccessMessage("Email has been sent.");
        _processing = false;
    }

    private async Task GetPatients()
    {
        PatientList = await UnitOfWork.Patient.GetPatients();
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            _invitePatient.To = patient.Email;
        }
    }

 

}