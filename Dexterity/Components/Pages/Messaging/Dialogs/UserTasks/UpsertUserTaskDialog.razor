@using Services.Features.Messaging.Dtos.UserTasks
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.UserAccounts.Dtos.User
<DexDialog>
    <DialogTitle>
        <MudStack>
            <MudItem>
                <MudText Align="Align.Center" Style="font-weight: bolder">@_title</MudText>
            </MudItem>
        </MudStack>
    </DialogTitle>
    <Content>
        @if (_loadComponent)
        {
            <CommonLoader/>
        }
        else
        {
            <DexForm Model="UserTask" ColumnCount="2" OnValidSubmit="@SaveUserTask">
                <Fields>
                    <FormItem Field="@nameof(UserTaskDto.StartDate)" LabelText="Start Date" EditorType="FormEditorType.DatePicker" ColumnSpan="1"/>
                    <FormItem Field="@nameof(UserTaskDto.StartTime)" LabelText="Start Time" EditorType="FormEditorType.TimePicker" ColumnSpan="1"/>
                    <FormItem Field="@nameof(UserTaskDto.EndDate)" LabelText="End Date" EditorType="FormEditorType.DatePicker" ColumnSpan="1"/>
                    <FormItem Field="@nameof(UserTaskDto.EndTime)" LabelText="End Time" EditorType="FormEditorType.TimePicker" ColumnSpan="1"/>
                    <FormItem Field="@nameof(UserTaskDto.Status)" LabelText="Status" ColumnSpan="2">
                        <Template>
                            <SfDropDownList  Enabled="@(Id != Guid.Empty)" TValue="string" TItem="UserTaskConstants.TaskStatus" Placeholder="Status" DataSource="@UserTaskConstants.TaskStatusList"
                                            @bind-Value="@UserTask.Status">
                                <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(UserTaskDto.Status)" LabelText="Status" ColumnSpan="2">
                        <Template>
                            <PatientAutoComplete PatientList="Patients" OnChangePatient="ChangePatient"/>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(UserTaskDto.Subject)"/>
                    <FormItem Field="@nameof(UserTaskDto.Location)"/>
                    <FormItem Field="@nameof(UserTaskDto.Description)" EditorType="FormEditorType.TextArea"/>
                    <FormItem Field="@nameof(UserTaskDto.IsPrivate)" LabelText="Private" EditorType="FormEditorType.Checkbox" ColumnSpan="1"/>
                    <FormItem Field="@nameof(UserTaskDto.Status)" LabelText="Status" ColumnSpan="2">
                        <Template>
                            <SfTab>
                                <TabItems>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="@($"Assigned To ({UserTask.SelectedHealthCares.Count} HCPs)")"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <MudDataGrid T="HealthcareDto"
                                                         MultiSelection="true"
                                                         Items="HealthCares"
                                                         SortMode="SortMode.Multiple"
                                                         SelectedItemsChanged="@SelectedItemsChanged"
                                                         Hideable="true">
                                                <Columns>
                                                    <SelectColumn T="HealthcareDto"/>
                                                    <PropertyColumn Property="x => x.Name" Title="Name"/>
                                                    <PropertyColumn Property="x => x.UserType" Title="Type"/>
                                                </Columns>
                                            </MudDataGrid>
                                        </ContentTemplate>
                                    </TabItem>
                                </TabItems>
                            </SfTab>
                        </Template>
                    </FormItem>
                </Fields>
                <Buttons>
                    <DexLoadingButton Name="Save Task" Type="MudButtonType.Submit" Processing="_processing"/>
                </Buttons>
            </DexForm>
        }
    </Content>
    <ActionButtons>
    </ActionButtons>
</DexDialog>


@code {
    [CascadingParameter] public MudDialogInstance MudDilaog { get; set; }
    [Parameter] public Guid Id { get; set; }
    private List<PatientListDto> Patients { get; set; } = new();
    private List<HealthcareDto> HealthCares { get; set; } = new();
    private UserTaskDto UserTask { get; set; } = new();
    private bool _processing;
    private bool _loadComponent;
    private string _title;
    private MudBlazor.Utilities.MudColor _colorValue;

    protected override async Task OnInitializedAsync()
    {
        _loadComponent = true;
        if (Id != Guid.Empty)
        {
            _title = "Edit Task";
            UserTask = await UnitOfWork.Messaging.GetTask(Id);
            _colorValue = UserTask.Color;
        }
        else
        {
            _title = "New Task";
        }

        await GetPatients();
        await GetHealthCares();
        _loadComponent = false;
    }

    private async Task GetHealthCares()
    {
        HealthCares = await UnitOfWork.User.GetUsersByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private async Task SaveUserTask()
    {
        _processing = true;

        //_userTask.Color = _colorValue.Value;
        var res = await UnitOfWork.Messaging.SaveTask(Id, UserTask);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDilaog.Close();
        }

        _processing = false;
    }


    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            UserTask.Subject = patient.FullName;
            UserTask.PatientId = patient.Id;
        }
    }


    private async Task GetPatients()
    {
        await Task.Delay(2000);
        Patients = await UnitOfWork.Patient.GetPatients();
    }

    void SelectedItemsChanged(HashSet<HealthcareDto> items)
    {
        UserTask.SelectedHealthCares = items;
    }

}