@using Dexterity.Components.Pages.Messaging.Dialogs.UserTasks
@using Domain.Entities.Messaging.UserTasks
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@if (_comLoading)
{
    <CommonLoader/>
}
else
{
    <div>
        <TabTitle Title="User Tasks">
            <ActionButtons>
                <DexSimpleButton Name="Add New Task" Click="() => UpsertUserTaskModal(Guid.Empty)"></DexSimpleButton>
            </ActionButtons>
        </TabTitle>
        <MudStack Row Spacing="2" Class="mt-2">
            <MudFab IconSize="MudSize.Small" Color="MudColor.Primary" StartIcon="" Size="MudSize.Small" Label="All Tasks" Class="" OnClick="AllTasks"/>
            <MudFab IconSize="MudSize.Small" Color="MudColor.Primary" StartIcon="fas fa-calendar-day" Size="MudSize.Small" Label="Day View" Class="" OnClick="DayTasks"/>
            <MudFab IconSize="MudSize.Small" Color="MudColor.Primary" StartIcon="fas fa-calendar-week" Size="MudSize.Small" Label="Week View" Class="" OnClick="WeekTasks"/>
            <MudFab IconSize="MudSize.Small" Color="MudColor.Primary" StartIcon="fas fa-calendar-days" Size="MudSize.Small" Label="Month View" Class="" OnClick="MonthsTasks"/>
        </MudStack>
        <MudStack >
            <MudDataGrid RowsPerPage="8" Loading="_userTaskLoading"
                         LoadingProgressColor="MudColor.Primary"
                         FixedHeader="true" T="UserTask"
                         Dense="true" Bordered="true" Hover="true"
                         Items="@UserTaskList" SortMode="SortMode.Multiple" Filterable="true"
                         Hideable="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="text-bold">My Tasks</MudText>
                    <MudSpacer/>
                    <MudItem md="4">
                        <MudStack Row>
                            <FieldLabel Class="mt-3">Status:</FieldLabel>
                            <MudSelect Dense="true" Margin="MudMargin.Dense" T="string" Variant="Variant.Outlined" ValueChanged="Callback">
                                <MudSelectItem Value="@("All")"/>
                                <MudSelectItem Value="@("Active")"/>
                                <MudSelectItem Value="@("Inactive")"/>
                            </MudSelect>
                        </MudStack>

                    </MudItem>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.TaskDate" Title="Task Date" Format="MM/dd/yyyy" Sortable="false" Filterable="false"/>
                    <PropertyColumn Property="x => x.Subject" Title="Subject" Sortable="false" Filterable="false"/>
                    <PropertyColumn Property="x => x.Description" Title="Description" Sortable="false" Filterable="false"/>
                    <TemplateColumn CellClass="" Title="Assigned By">
                        <CellTemplate>
                            @if (@context.Item.AssignedBy != null)
                            {
                                <MudText Color="MudColor.Primary">
                                    @context.Item.AssignedBy.FullName
                                </MudText>
                            }
                            else
                            {
                                <MudText Color="MudColor.Primary">
                                    -
                                </MudText>
                            }

                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellClass="" Title="Status">
                        <CellTemplate>
                            <MudText Color="MudColor.Primary">@context.Item.Status</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellClass="d-flex justify-end" Title="Actions">
                        <CellTemplate>
                            @if (context.Item.AssignedById == null)
                            {
                                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Edit" Color="MudColor.Primary" OnClick="() => UpsertUserTaskModal(context.Item.Id)"/>
                                <MudIconButton Size="@MudSize.Small" Icon="@MudIcons.Material.Outlined.Delete" Color="MudColor.Error" OnClick="() => DeleteUserTask(context.Item.Id)"/>
                            }
                            else
                            {
                                <Select TValue="string" @onchange="(ChangeEventArgs e) => ChangeStatus(e, context.Item.Id)">

                                    @foreach (var item in UserTaskConstants.TaskStatusList)
                                    {
                                        <SelectItem Value="@item.Name">@item.Name</SelectItem>
                                    }
                                </Select>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="UserTask" RowsPerPageString="8"/>
                </PagerContent>
                <NoRecordsContent>Tasks are not found.</NoRecordsContent>
            </MudDataGrid>
        </MudStack>
    </div>
}

@code {
    private List<UserTask> UserTaskList { get; set; }
    private bool _comLoading;
    private bool _userTaskLoading;

    protected override async Task OnInitializedAsync()
    {
        _comLoading = true;
        await GetUserTasks();
        _comLoading = false;
    }


    private async Task GetUserTasks()
    {
        UserTaskList = new();
        _userTaskLoading = true;
        var list = await UnitOfWork.Messaging.GetUserTaskList();
        UserTaskList = list;
        _userTaskLoading = false;
    }

    private async Task UpsertUserTaskModal(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertUserTaskDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetUserTasks();
        }
    }

    private async Task DeleteUserTask(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Messaging.DeleteTask(id);
            var user = UserTaskList.FirstOrDefault(x => x.Id == id);
            UserTaskList.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessge(userRes.Messages.First());
        }
    }

    private async Task AllTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList();
    }

    private async Task DayTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.DayView);
        StateHasChanged();
    }

    private async Task WeekTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.WeekView);
        StateHasChanged();
    }

    private async Task MonthsTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.MonthView);
        StateHasChanged();
    }


    private async Task Callback(string status)
    {
        var taskList = await UnitOfWork.Messaging.GetUserTaskList();

        switch (status)
        {
            case "Active":
                UserTaskList = taskList.Where(x => x.Status == UserTaskConstants.TaskStatusConstant.Active).ToList();
                break;
            case "Inactive":
                UserTaskList = taskList.Where(x => x.Status == UserTaskConstants.TaskStatusConstant.Inactive).ToList();
                break;
            default:
                UserTaskList = taskList;
                break;
        }
    }

    private async Task ChangeStatus(ChangeEventArgs e, Guid id)
    {
        var res = await UnitOfWork.Messaging.UpdateTaskStatus(id, e.Value.ToString());
        if (res.Succeeded)
        {
            Snackbar.SuccessMessge(res.Messages.First());
        }
    }

}