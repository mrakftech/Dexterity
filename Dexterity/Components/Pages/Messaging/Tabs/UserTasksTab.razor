@using Dexterity.Components.Pages.Messaging.Dialogs.UserTasks
@using Domain.Entities.Messaging.UserTasks
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@if (_comLoading)
{
    <CommonLoader/>
}
else
{
    <div>
        <TabTitle Title="User Tasks">
            <ActionButtons>
                <DexSimpleButton Name="Add New Task" Click="() => UpsertUserTaskModal(Guid.Empty)"></DexSimpleButton>
            </ActionButtons>
        </TabTitle>

        <MudStack Row Spacing="2" Class="m-4">
            <MudFab Color="MudColor.Primary" Size="MudSize.Small" Label="All Tasks" Class="" OnClick="AllTasks"/>
            <MudFab Color="MudColor.Primary" Size="MudSize.Small" Label="Day View" Class="" OnClick="DayTasks"/>
            <MudFab Color="MudColor.Primary" Size="MudSize.Small" Label="Week View" Class="" OnClick="WeekTasks"/>
            <MudFab Color="MudColor.Primary" Size="MudSize.Small" Label="Month View" Class="" OnClick="MonthsTasks"/>
            <MudSpacer/>
            <label class="e-form-label mt-3">Status:</label>
            <MudItem md="2">
                <MudSelect Dense="true" Margin="MudMargin.Dense" T="string" Variant="Variant.Outlined" ValueChanged="Callback">
                    <MudSelectItem Value="@("All")"/>
                    <MudSelectItem Value="@("Active")"/>
                    <MudSelectItem Value="@("Inactive")"/>
                </MudSelect>
            </MudItem>
        </MudStack>
        <MudStack>
            <DexGrid DataSource="UserTaskList" Loading="_userTaskLoading" Height="300px">
                <DexGridColumns>
                    <GridColumn Field="@nameof(UserTask.TaskDate)" Format="d" Type="ColumnType.DateTime" HeaderText="Task Date" Width="80px"></GridColumn>
                    <GridColumn Field="@nameof(UserTask.Subject)" HeaderText="Subject" Width="100px"></GridColumn>
                    <GridColumn Field="@nameof(UserTask.Subject)" HeaderText="Description" Width="200px"></GridColumn>
                    <GridColumn HeaderText="Assigned By" Width="200px">
                        <Template>
                            @{
                                var item = (context as UserTask);
                                @if (item.AssignedBy != null)
                                {
                                    <MudText Color="MudColor.Primary">
                                        @item.AssignedBy.FullName
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Color="MudColor.Primary">
                                        -
                                    </MudText>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(UserTask.Status)" HeaderText="Status" Width="120px"></GridColumn>
                    <GridColumn HeaderText="Actions" Width="200px">
                        <Template>
                            @{
                                var item = (context as UserTask);
                                @if (item.AssignedById == null)
                                {
                                    <MudIconButton
                                        Size="@MudSize.Small"
                                        Icon="@MudIcons.Material.Outlined.Edit"
                                        Color="MudColor.Primary" OnClick="() => UpsertUserTaskModal(item.Id)"/>
                                    <MudIconButton
                                        Size="@MudSize.Small"
                                        Icon="@MudIcons.Material.Outlined.Delete"
                                        Color="MudColor.Error" OnClick="() => DeleteUserTask(item.Id)"/>
                                }
                                else
                                {
                                    <InputSelect TValue="string" @onchange="e => ChangeStatus(e, item.Id)">
                                        @foreach (var item in UserTaskConstants.TaskStatusList)
                                        {
                                            <option value="@item.Name">@item.Name</option>
                                        }
                                    </InputSelect>
                                }
                            }
                        </Template>
                    </GridColumn>

                </DexGridColumns>
            </DexGrid>
        </MudStack>
    </div>
}

@code {
    private List<UserTask> UserTaskList { get; set; }
    private bool _comLoading;
    private bool _userTaskLoading;

    protected override async Task OnInitializedAsync()
    {
        _comLoading = true;
        await GetUserTasks();
        _comLoading = false;
    }


    private async Task GetUserTasks()
    {
        UserTaskList = new();
        _userTaskLoading = true;
        var list = await UnitOfWork.Messaging.GetUserTaskList();
        UserTaskList = list;
        _userTaskLoading = false;
    }

    private async Task UpsertUserTaskModal(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<UpsertUserTaskDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetUserTasks();
        }
    }

    private async Task DeleteUserTask(Guid id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Messaging.DeleteTask(id);
            var user = UserTaskList.FirstOrDefault(x => x.Id == id);
            UserTaskList.Remove(user);
            StateHasChanged();
            Snackbar.SuccessMessage(userRes.Messages.First());
        }
    }

    private async Task AllTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList();
    }

    private async Task DayTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.DayView);
        StateHasChanged();
    }

    private async Task WeekTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.WeekView);
        StateHasChanged();
    }

    private async Task MonthsTasks()
    {
        UserTaskList = await UnitOfWork.Messaging.GetUserTaskList(UserTaskConstants.MonthView);
        StateHasChanged();
    }


    private async Task Callback(string status)
    {
        var taskList = await UnitOfWork.Messaging.GetUserTaskList();

        switch (status)
        {
            case "Active":
                UserTaskList = taskList.Where(x => x.Status == UserTaskConstants.TaskStatusConstant.Active).ToList();
                break;
            case "Inactive":
                UserTaskList = taskList.Where(x => x.Status == UserTaskConstants.TaskStatusConstant.Inactive).ToList();
                break;
            default:
                UserTaskList = taskList;
                break;
        }
    }

    private async Task ChangeStatus(ChangeEventArgs e, Guid id)
    {
        var res = await UnitOfWork.Messaging.UpdateTaskStatus(id, e.Value.ToString());
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
        }
    }

}
