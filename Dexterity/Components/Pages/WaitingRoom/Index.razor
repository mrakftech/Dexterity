@page "/waiting-room"
@using Dexterity.Components.Pages.PatientManager.Components.Transactions.Dialogs
@using Dexterity.Components.Pages.WaitingRoom.Dialogs
@using Services.Features.PatientManagement.Dtos.Account
@using Services.Features.WaitingRoom.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Dexterity.Components.Pages.WaitingRoom.Components
@layout MainLayout
<TopTitleBar Title="Waiting Room" Image="modules/patient-waiting.svg"/>
    <InnerLayout >
        <NavigationItems>
            <DexMenuItem Text="@($"Patients Expected ({ExpectedPatients.Count})")" Icon="fas fa-person-walking-arrow-right" Click="@(() => ClickChangedTab(0))"/>
            <DexMenuItem Text="@($"Patients Present ({PresentPatients.Count})")" Icon="fas fa-screen-users" Click="@(() => ClickChangedTab(1))"/>
            <DexMenuItem Text="@($"In Consultation ({ConsultationPatients.Count})")" Icon="fas fa-person-walking-arrow-right" Click="@(() => ClickChangedTab(2))"/>
            <DexMenuItem Text="@($"Visit History ({VisitHistoryPatients.Count})")" Icon="fas fa-rectangle-history-circle-user" Click="@(() => ClickChangedTab(3))"/>
            <hr class="hr-custom"/>
            <RadzenPanelMenuItem Text="Patient Status" Icon="@Method.FaIcon("fa-duotone fa-solid fa-image-polaroid-user")">
                @if (_status == AppointmentConstants.WaitingStatus.Expected)
                {
                    <DexMenuItem Disabled="@_disableBtns" Text="@(AppointmentConstants.WaitingStatus.Arrived)" Icon="fas fa-house-return" Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Arrived))"/>
                }
                else
                {
                    <DexMenuItem Disabled="@_disableBtns" Text="@(AppointmentConstants.WaitingStatus.Expected)" Icon="fas fa-house-return"
                                 Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Expected))"/>
                }
                @if (_tabs.ActivePanelIndex == 1)
                {
                    <DexMenuItem Disabled="@_disableConsultationBtn" Text="Begin Consultation" Icon="fas fa-user-doctor-message"
                                 Click="BeginConsultation"/>
                }
                @if (_tabs.ActivePanelIndex == 2)
                {
                    <DexMenuItem Disabled="@_disableConsultationBtn" Text="Finished Consultation" Icon="fas fa-check-circle"
                                 Click="@(() => UpdatePatientStatus(AppointmentConstants.WaitingStatus.Completed))"/>

                    <DexMenuItem Disabled="@_disableConsultationBtn" Text="Edit Consultation" Icon="fas fa-pencil"
                                 Click="@(() => ClickChangedTab(0))"/>
                }
                <DexMenuItem Disabled="@_disableBtns" Text="Cancelled" Icon="fas fa-ban"
                             Click="@CancelAppointment"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Charge Patient" Icon="fas fa-credit-card"
                             Click="@OpenChargeDialog"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom"/>
            <RadzenPanelMenuItem Text="Additional items" Icon="@Method.FaIcon("fa-solid fa-sitemap")">
                <DexMenuItem Disabled="@_disableBtns" Text="Update Visit" Icon="fas fa-clock" Click="@(() => ClickChangedTab(0))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Transfer Patient" Icon="fas fa-right-left" Click="@(() => ClickChangedTab(0))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Patient Summary" Icon="fas fa-clipboard-list-check" Click="@(() => ClickChangedTab(0))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Patient Account" Icon="fas fa-piggy-bank" Click="@(() => ClickChangedTab(0))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="My Queue" Icon="fas fa-people-line" Click="@(() => ClickChangedTab(0))"/>
                <DexMenuItem Disabled="@_disableBtns" Text="Walk In" Icon="fas fa-person-walking-arrow-right" Click="@(() => ClickChangedTab(0))"/>
            </RadzenPanelMenuItem>
        </NavigationItems>
        <DexContentTabs>
            <MudTabs @ref="_tabs">
                <MudTabPanel Text="">
                    <TabTitle Title="@($"Patients Expected ({ExpectedPatients.Count})")">
                        <ActionButtons>
                            <DexSimpleButton Name="Refresh" Click="GetExpectedPatients"/>
                        </ActionButtons>
                    </TabTitle>
                    <PatientInfoCard Patient="_patient"/>
                    <WaitingPatientList Patients="ExpectedPatients"
                                        Loading="_loading"
                                        WaitingPatientGrid="_grid"
                                        RowSelected="GetPatientSelectedRecords"/>
                </MudTabPanel>
                <MudTabPanel Text="">
                    <TabTitle Title="@($"Patients Present ({PresentPatients.Count})")"/>
                    <PatientInfoCard Patient="_patient"/>
                    <WaitingPatientList Patients="PresentPatients"
                                        Loading="_loading"
                                        WaitingPatientGrid="_grid"
                                        RowSelected="GetPatientSelectedRecords"/>
                </MudTabPanel>

                <MudTabPanel Text="">
                    <TabTitle Title="@($"In Consultation ({ConsultationPatients.Count})")"/>
                    <PatientInfoCard Patient="_patient"/>
                    <WaitingPatientList Patients="ConsultationPatients"
                                        Loading="_loading"
                                        WaitingPatientGrid="_grid"
                                        RowSelected="GetPatientSelectedRecords"/>
                </MudTabPanel>

                <MudTabPanel Text="">
                    <TabTitle Title="@($"Visit History ({VisitHistoryPatients.Count})")"/>
                    <PatientInfoCard Patient="_patient"/>
                    <WaitingPatientList Patients="VisitHistoryPatients"
                                        Loading="_loading"
                                        WaitingPatientGrid="_grid"
                                        RowSelected="GetPatientSelectedRecords"/>
                </MudTabPanel>
            </MudTabs>
        </DexContentTabs>
    </InnerLayout>


@code {
    private List<WaitingPatientDto> ExpectedPatients { get; set; } = new();
    private List<WaitingPatientDto> PresentPatients { get; set; } = new();
    private List<WaitingPatientDto> ConsultationPatients { get; set; } = new();
    private List<WaitingPatientDto> VisitHistoryPatients { get; set; } = new();

    private readonly SfGrid<WaitingPatientDto> _grid = new();
    private GetPatientAccountDto AccountDto { get; set; } = new();
    private PatientSummaryDto _patient = new();
    MudTabs _tabs = new();

    private bool _loading;
    private bool _disableBtns = true;
    private bool _disableConsultationBtn = true;


    private Guid _patientId = Guid.Empty;
    private int _appointmentId = 0;
    private string _status;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GetWaitingPatients();

        //will refresh after 45 seconds
        LoadRoomAfterTimer(45);
        _loading = false;
    }

    private void ClickChangedTab(int tabIndex)
    {
        _patientId = Guid.Empty;
        _appointmentId = 0;
        _disableBtns = true;
        _disableConsultationBtn = true;
        _tabs.ActivatePanel(tabIndex);
    }

    private async Task GetAccountDetails()
    {
        AccountDto = await UnitOfWork.Patient.GetPatientAccount(_patientId);
    }

    private async Task GetExpectedPatients()
    {
        ExpectedPatients = await UnitOfWork.WaitingRoom.GetExpectedPatients();
    }

    private async Task GetWaitingPatients()
    {
        ExpectedPatients = await UnitOfWork.WaitingRoom.GetExpectedPatients();
        PresentPatients = await UnitOfWork.WaitingRoom.GetWaitingPatients(AppointmentConstants.WaitingStatus.Arrived);
        ConsultationPatients = await UnitOfWork.WaitingRoom.GetWaitingPatients(AppointmentConstants.WaitingStatus.InConsultation);
        VisitHistoryPatients = await UnitOfWork.WaitingRoom.GetAllWaitingPatients();
    }

    private async Task GetPatient()
    {
        _patient = await UnitOfWork.Patient.GetPatientSummary(_patientId);
    }

    private async Task UpdatePatientStatus(string status)
    {
        var res = await UnitOfWork.WaitingRoom.UpdateWaitingAppointment(_appointmentId, status);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await GetWaitingPatients();
            StateHasChanged();
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }
    }

    private async Task CancelAppointment()
    {
        var parameters = new DialogParameters();
        parameters.Add("AppointmentId", _appointmentId);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<CancelWaitingAppointment>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await GetWaitingPatients();
        }
    }

    private async Task OpenChargeDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("PatientAccount", AccountDto);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<AddChargeModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await GetWaitingPatients();
        }
    }

    public async Task GetPatientSelectedRecords(RowSelectEventArgs<WaitingPatientDto> args)
    {
        if (args.Data.PatientId != Guid.Empty)
        {
            _patientId = args.Data.PatientId;
            _appointmentId = args.Data.AppointmentId;
            _status = args.Data.Status;
            await GetAccountDetails();
            if (_tabs.ActivePanelIndex == 0)
            {
            }

            if (_tabs.ActivePanelIndex == 1)
            {
                _disableConsultationBtn = false;
            }

            if (_tabs.ActivePanelIndex == 2)
            {
                _disableConsultationBtn = false;
            }

            _disableBtns = false;
            await GetPatient();
            StateHasChanged();
        }

        StateHasChanged();
    }

    private async Task BeginConsultation()
    {
        var parameters = new DialogParameters();
        parameters.Add("AppointmentId", _appointmentId);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<BeginConsultationDialog>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await GetWaitingPatients();
        }
    }

    private void LoadRoomAfterTimer(int seconds)
    {
        var startTimeSpan = TimeSpan.Zero;
        var periodTimeSpan = TimeSpan.FromSeconds(seconds);

        var timer = new System.Threading.Timer(async (e) =>
        {
            await GetWaitingPatients();
            //Snackbar.SuccessMessge("Success");
        }, null, startTimeSpan, periodTimeSpan);
    }

}