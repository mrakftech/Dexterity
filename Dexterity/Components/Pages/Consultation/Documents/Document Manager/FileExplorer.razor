<MudStack Row>
    <MudItem md="4">
        <RadzenCard>
            <RadzenTree Data="@entries" Expand="@LoadFiles" Style="width: 100%; height: 300px" Change="@OnChange"
                        @bind-Value="@_selection">
                <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate"/>
            </RadzenTree>
        </RadzenCard>
    </MudItem>
    <MudItem md="8"></MudItem>
</MudStack>

@code {
    IEnumerable<string> entries;
    object _selection;

    protected override void OnInitialized()
    {
        entries = Directory.GetDirectories(UnitOfWork.FileService.GetRootPath())
            .Where(entry =>
            {
                var name = Path.GetFileName(entry);

                return !name.StartsWith(".") && name != "bin" && name != "obj";
            });
    }

    void OnChange()
    {
        var name = Path.GetFileName(_selection.ToString());
        Snackbar.SuccessMessage(name);
    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string) path);
        args.Children.Template = FileOrFolderTemplate;
        args.Children.Checkable = o => false;
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string) data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, nameof(RadzenIcon.Icon), isDirectory ? "folder" : "insert_drive_file");
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

}