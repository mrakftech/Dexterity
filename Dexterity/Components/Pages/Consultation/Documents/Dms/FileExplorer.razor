@using Domain.Entities.Settings.Templates.Dms
@using Domain.Entities.Consultation.Documents
<MudStack>
    <MudItem>
        <MudStack Row>
            <MudItem md="4">
                <RadzenCard>
                    <RadzenTree Data="@_documentCategories"  
                                Expand="OnExpand" 
                                Style="height: 300px;font-size: 16px">
                        <RadzenTreeLevel TextProperty="@nameof(DocumentCategory.Name)"/>
                    </RadzenTree>
                </RadzenCard>
            </MudItem>
            <MudItem md="8">
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="4">
        <SfGrid DataSource="_scannedDocuments" Height="200" AllowPaging="false">
            <GridEvents TValue="ScannedDocument" RowSelected="SelectDocument"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(ScannedDocument.ScanDate)" Format="d" Type="ColumnType.DateOnly" HeaderText="Date"/>
                <GridColumn Field="@nameof(ScannedDocument.Type)"/>
                <GridColumn Field="@nameof(ScannedDocument.Description)"/>
            </GridColumns>
        </SfGrid>
    </MudItem>
    <MudItem>
        <MudStack Row>
            @if (_docId != Guid.Empty)
            {
                <MudItem>
                    <button class="btn btn-sm btn-primary" @onclick="() => OpenScanForm(_docId)">Edit</button>
                </MudItem>
                <MudItem>
                    <button class="btn btn-sm btn-primary" disabled="disabled">Email</button>
                </MudItem>
                <MudItem>
                    <button class="btn btn-sm btn-primary" disabled="disabled">Print</button>
                </MudItem>
            }
            <MudItem>
                <button class="btn btn-sm btn-primary" @onclick="() => OpenScanForm(Guid.Empty)" disabled="disabled">New Scan</button>
            </MudItem>
            <MudItem>
                <button class="btn btn-sm btn-primary" @onclick="() => OpenScanForm(Guid.Empty, true)">Attach File</button>
            </MudItem>
            <MudItem>
                <button class="btn btn-sm btn-primary" disabled="disabled">Save</button>
            </MudItem>
        </MudStack>
    </MudItem>
</MudStack>


@code {
    Guid _docId;
    private List<ScannedDocument> _scannedDocuments = new();
    private List<DocumentCategory> _documentCategories = new();

    protected override async void OnInitialized()
    {
        await GetScannedDocuments();
        await GetCategories();
        StateHasChanged();
    }

    private async Task GetCategories()
    {
        _documentCategories = await UnitOfWork.Setting.GetAllCategoriesWithHierarchy();
    }

    private async Task GetScannedDocuments()
    {
        _scannedDocuments = await UnitOfWork.Consultation.GetScannedDocuments();
    }

    private void SelectDocument(RowSelectEventArgs<ScannedDocument> args)
    {
        if (args.Data is not null)
        {
            _docId = args.Data.Id;
        }
    }

    void OnExpand(TreeExpandEventArgs args)
    {
        var category = args.Value as DocumentCategory;

        if (category.SubCategories.Count>0)
        {
            args.Children.Data = category.SubCategories;
            args.Children.TextProperty = "Name";
            args.Children.HasChildren = (_) => false;
        }
       

        /* Optional template
        args.Children.Template = context => builder => {
            builder.OpenElement(1, "strong");
            builder.AddContent(2, (context.Value as Product).ProductName);
            builder.CloseElement();
        };
        */
    }

    private async Task OpenScanForm(Guid id, bool isAttachFile = false)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("IsAttachFile", isAttachFile);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<ScanForm>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetScannedDocuments();
        }
    }

}