@using Services.Features.Settings.Dtos
@using Services.Features.Consultation.Dto
<DexDialog>
    <DialogTitle>
        Begin Consultation
    </DialogTitle>
    <Content>
        <DexForm Model="ConsultationDto" OnValidSubmit="BeginConsultation">
            <Fields>
                <FormItem Field="@nameof(BeginConsultationDto.PatientName)" IsEnabled="false" LabelText="Patient Name"/>
                <FormItem Field="@nameof(BeginConsultationDto.DoctorName)" IsEnabled="false" LabelText="HCP"/>
                <FormItem Field="@nameof(BeginConsultationDto.ConsultationDate)" IsEnabled="false" EditorType="FormEditorType.DateTimePicker" LabelText="Date"/>
                <FormItem Field="@nameof(BeginConsultationDto.ConsultationClass)" IsEnabled="false" LabelText="Class"/>
                <FormItem Field="@nameof(BeginConsultationDto.ConsultationType)" IsEnabled="false" LabelText="Type"/>
                <FormItem Field="@nameof(BeginConsultationDto.ClinicSiteId)" ColumnSpan="1">
                    <Template>
                        <label class="e-form-label">Site:</label>
                        <SfDropDownList TValue="int" TItem="ClinicSiteDto" Placeholder="Select Site" DataSource="@ClinicSites" @bind-Value="@ConsultationDto.ClinicSiteId">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </Template>
                </FormItem>
            </Fields>
            <Buttons>
                <DexLoadingButton Name="Save" Type="MudButtonType.Submit" Processing="_loading"/>
            </Buttons>
        </DexForm>
    </Content>
</DexDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDiloag { get; set; }
    private BeginConsultationDto ConsultationDto { get; set; } = new();
    private List<ClinicSiteDto> ClinicSites { get; set; } = new();
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await GetClinicSites();
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private async Task BeginConsultation()
    {
        _loading = true;
        var res = await UnitOfWork.Consultation.BeginConsultation(ConsultationDto);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDiloag.Close();
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }

        _loading = false;
    }

}