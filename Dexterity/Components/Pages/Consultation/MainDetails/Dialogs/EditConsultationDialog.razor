@using Services.Features.Settings.Dtos
@using Services.Features.Consultation.Dto
<DexDialog>
    <DialogTitle>
        Edit Consultation
    </DialogTitle>
    <Content>
        @if (ConsultationDto.ConsultationDate == DateTime.Now)
        {
            <DexForm Model="ConsultationDto" OnValidSubmit="BeginConsultation">
                <Fields>
                    <FormItem Field="@nameof(EditConsultationDto.PatientName)" IsEnabled="false" LabelText="Patient Name" />
                    <FormItem Field="@nameof(EditConsultationDto.DoctorName)" IsEnabled="false" LabelText="HCP" />
                    <FormItem Field="@nameof(EditConsultationDto.ConsultationDate)" IsEnabled="false" EditorType="FormEditorType.DateTimePicker" LabelText="Date" />
                    <FormItem Field="@nameof(EditConsultationDto.ConsultationClass)" IsEnabled="false" LabelText="Class" />
                    <FormItem Field="@nameof(EditConsultationDto.ConsultationType)" IsEnabled="false" LabelText="Type" />
                    <FormItem Field="@nameof(EditConsultationDto.ClinicSiteId)" ColumnSpan="1">
                        <Template>
                            <label class="e-form-label">Site:</label>
                            <SfDropDownList TValue="Guid" TItem="ClinicSiteDto" Placeholder="Select Site" DataSource="@ClinicSites" @bind-Value="@ConsultationDto.ClinicSiteId">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </FormItem>
                </Fields>
                <Buttons>
                    <DexLoadingButton Name="Save" Type="MudButtonType.Submit" Processing="_loading" />
                </Buttons>
            </DexForm>
        }
        else
        {
            <MudText Color="MudColor.Error">This record can't be edit</MudText>
        }
    </Content>
</DexDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDiloag { get; set; }
    [Parameter] public Guid Id { get; set; }
    private EditConsultationDto ConsultationDto { get; set; } = new();
    private List<ClinicSiteDto> ClinicSites { get; set; } = new();
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await GetClinicSites();
        if (Id !=Guid.Empty)
        {

            ConsultationDto = await UnitOfWork.Consultation.GetConsultationDetail(Id);
        }
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.Auth.CurrentUser.ClinicId);
    }

    private async Task BeginConsultation()
    {
        _loading = true;
        var res = await UnitOfWork.Consultation.EditConsultation(Id, ConsultationDto);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDiloag.Close();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        _loading = false;
    }

}