@using Domain.Entities.Settings.Consultation
@using Services.Features.Settings.Dtos
@using Services.Features.Consultation.Dto.Notes
<DexDialog>
    <DialogTitle>
        Notes Details
    </DialogTitle>
    <Content>
        <DexForm Model="NoteDto" ColumnCount="5" OnValidSubmit="SaveNote">
            <Fields>
                <FormItem Field="@nameof(UpsertConsultationNoteDto.HealthCodeId)" ColumnSpan="2">
                    <Template>
                        <label class="e-form-label">ICPC-2 OR ICD-10</label>
                        <SfAutoComplete TValue="string" TItem="HealthCode" Placeholder="ICPC-2 OR ICD-10" DataSource="@HealthCodes" @bind-Value="_healthCode">
                            <AutoCompleteFieldSettings Value="Code" Text="Code"/>
                            <AutoCompleteEvents TValue="string" TItem="HealthCode" ValueChange="ChangeHealthCode"></AutoCompleteEvents>
                        </SfAutoComplete>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(UpsertConsultationNoteDto.Date)" ColumnSpan="3">
                    <Template>
                        <label class="e-form-label">Description</label>
                        <DexInputBox @bind-FieldDataSource="_healthCodeDescription"/>
                    </Template>
                </FormItem>
                <FormItem ColumnSpan="1" Field="@nameof(UpsertConsultationNoteDto.Date)" EditorType="FormEditorType.DatePicker"></FormItem>
                <FormItem ColumnSpan="4" Field="@nameof(UpsertConsultationNoteDto.Date)">
                    <Template>
                        <label class="e-form-label">[Select Template Note]</label>
                        <SfDropDownList TValue="int" TItem="NoteTemplateDto" Placeholder="Select a note template" DataSource="@NoteTemplates">
                            <DropDownListFieldSettings Value="Id" Text="Note"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="NoteTemplateDto" ValueChange="OnValueChange"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </FormItem>
                <FormItem ColumnSpan="1" LabelText="Past History" Field="@nameof(UpsertConsultationNoteDto.IsPastHistory)" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem ColumnSpan="1" LabelText="Family History" Field="@nameof(UpsertConsultationNoteDto.IsFamilyHistory)" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem ColumnSpan="1" LabelText="Active Condition" Field="@nameof(UpsertConsultationNoteDto.IsActiveCondition)" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem ColumnSpan="1" LabelText="Social History" Field="@nameof(UpsertConsultationNoteDto.IsSocialHistory)" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem ColumnSpan="1" LabelText="Private" Field="@nameof(UpsertConsultationNoteDto.IsPrivate)" EditorType="FormEditorType.Checkbox"></FormItem>
                <FormItem ColumnSpan="5" Field="@nameof(UpsertConsultationNoteDto.Notes)" EditorType="FormEditorType.TextArea"></FormItem>


            </Fields>
            <Buttons>
                @if (_id == 0)
                {
                    <DexLoadingButton Name="@("Save")" Type="MudButtonType.Submit"/>
                }
                else
                {
                    <DexLoadingButton Name="@("Update")" Type="MudButtonType.Submit"/>
                    <DexLoadingButton Name="New" Click="NewNote"/>
                }
            </Buttons>
        </DexForm>
        <div class="m-2">
            <SfGrid DataSource="Notes" Height="200">
                <GridEvents RowSelected="RowSelected" TValue="ConsultationNoteDto"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(ConsultationNoteDto.Date)" Format="g" Type="ColumnType.DateTime" HeaderText="Date" Width="150px"></GridColumn>
                    <GridColumn Field="@nameof(ConsultationNoteDto.Type)" HeaderText="Type"/>
                    <GridColumn Field="@nameof(ConsultationNoteDto.Notes)" HeaderText="Note"/>
                    <GridColumn Field="@nameof(ConsultationNoteDto.IsActiveCondition)" HeaderText="Status">
                        <Template>
                            @{
                                var item = (context as ConsultationNoteDto);
                                @if (item!.IsActiveCondition)
                                {
                                    <MudText Color="MudColor.Primary"> Active</MudText>
                                }
                                else
                                {
                                    <MudText Color="MudColor.Error"> None</MudText>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(ConsultationNoteDto.DoctorName)" HeaderText="HCP"/>
                </GridColumns>
                <SfSpinner @bind-Visible="@_loading">
                </SfSpinner>
            </SfGrid>
        </div>
    </Content>
</DexDialog>

@code{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public int ConsultationId { get; set; }
    private UpsertConsultationNoteDto NoteDto { get; set; } = new();
    private List<ConsultationNoteDto> Notes { get; set; } = new();
    private List<HealthCode> HealthCodes { get; set; } = new();
    private List<NoteTemplateDto> NoteTemplates { get; set; } = new();
    private bool _loading;
    private string _healthCode = "";
    private string _healthCodeDescription = "No Codes selected";
    private int _id;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        HealthCodes = await UnitOfWork.Consultation.GetHealthCodes();
        NoteTemplates = await UnitOfWork.Setting.GetAllNoteTemplates();
        await GetNotes();
        _loading = false;
    }

    private async Task GetNotes()
    {
        Notes = await UnitOfWork.Consultation.GetConsultationNotes();
        
    }

    private void ChangeHealthCode(ChangeEventArgs<string, HealthCode> args)
    {
        if (args.ItemData is not null)
        {
            var healthCode = args.ItemData;
            _healthCodeDescription = healthCode.Description;
            NoteDto.HealthCodeId = healthCode.Id;
        }
    }

    private async Task SaveNote()
    {
        NoteDto.ConsultationDetailId = ConsultationId;
        var res = await UnitOfWork.Consultation.UpsertConsultationNote(_id, NoteDto);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await GetNotes();
            NoteDto = new UpsertConsultationNoteDto();
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());
        }
    }

    public void OnValueChange(ChangeEventArgs<int, NoteTemplateDto> args)
    {
        NoteDto.Notes = args.ItemData.Note;
        NoteDto.HealthCodeId = args.ItemData.HealthCodeId!;
    }

    public async Task RowSelected(RowSelectEventArgs<ConsultationNoteDto> args)
    {
        if (args.Data.Id > 0)
        {
            _id = args.Data.Id;
            _healthCode = args.Data.HealthCode.Code;
            _healthCodeDescription = args.Data.HealthCode.Description;
            NoteDto = await UnitOfWork.Consultation.GetConsultationEditNote(_id);
        }
        else
        {
            _id = 0;
        }

        StateHasChanged();
    }

    private void NewNote()
    {
        NoteDto = new UpsertConsultationNoteDto();
        _id = 0;
        _healthCode = string.Empty;
        _healthCodeDescription = string.Empty;
    }

}