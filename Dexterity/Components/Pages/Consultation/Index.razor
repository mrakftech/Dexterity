@layout MainLayout
@page "/consultation"
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.Consultation.Dto
@using Dexterity.Components.Pages.Consultation.Options
@using Dexterity.Components.Pages.PatientManager.Components.Allergies
@using Dexterity.Components.Pages.Consultation.Notes
@using Services.Features.Consultation.Dto.Notes
@using Dexterity.Components.Pages.Consultation.MainDetails.Dialogs
@using Dexterity.Components.Pages.Consultation.MainDetails
<TopTitleBar Title="Consultation" Image="modules/consultation.svg"></TopTitleBar>

@if (!_loading)
{
    <InnerLayout DrawerWidth="260px">
        <TopBarItems>
            @if (Patient.NkaFlag)
            {
                <SfButton Content="Allergies/Drug Allergies" @onclick="OpenAllergyDialog" CssClass="mr-3"/>
            }
            else
            {
                <DexSimpleButton Color="MudColor.Secondary" Name="Allergies/Drug Allergies" Class="mr-3" Click="OpenAllergyDialog"/>
            }
            <SfButton Content="Refresh" @onclick="GetPatientSummary"/>
            <SfButton Content="@($"Tasks ({_taskCount})")" @onclick="CheckTasks"/>
            <SfButton style="color: crimson;font-weight: bolder" Content="@($"Sms ({_smsHistoryCount})")" @onclick="CheckSmsHistory"/>
            <SfButton Content="@($"Reminders ({_reminderCount})")" @onclick="CheckReminder"/>
        </TopBarItems>
        <NavigationItems>
            <RadzenPanelMenuItem Text="Consultation Details" Icon="@Method.FaIcon("fas fa-user-doctor-message")">
                <DexMenuItem Text="Find Patient" Icon="fa-user-magnifying-glass" Click="FindPatient"/>
                <DexMenuItem Text="Patient Summary" Icon="fas fa-rectangle-list" Click="OpenPatientSummaryModal"/>
                <hr class="hr-custom"/>
                <DexMenuItem Text="Begin Consultation" Icon="fas fa-person-booth" Click="OpenBeginConsultationDialog"/>
                <DexMenuItem Text="Edit Consultation" Icon="fas fa-pencil" Disabled="@(!_isConsultationSelected)" Click="() => EditBeginConsultationDialog(_consultationId)"/>
                @if (!_isConsultationFinish)
                {
                    <DexMenuItem Text="Finish Consultation" Icon="fas fa-flag-checkered" Disabled="@(!_isConsultationSelected)" Click="() => FinishConsultationDialog(_consultationId)"/>
                }
                <hr class="hr-custom"/>
                <DexMenuItem Text="Open Consultation" Icon="fas fa-users"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            @* <RadzenPanelMenuItem Text="Procedures" Icon="@Method.FaIcon("fas fa-user-doctor-message")"> *@
            @*     <DexMenuItem Text="Find Patient" Icon="fas fa-users"/> *@
            @* </RadzenPanelMenuItem> *@
            <RadzenPanelMenuItem Text="Notes" Icon="@Method.FaIcon("fas fa-notes-medical")">
                <DexMenuItem Text="Save Note" Icon="fas fa-note" Disabled="@(!_isConsultationSelected)" Click="OpenUpsertNotesDialog"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Immunisations" Icon="@Method.FaIcon("fas fa-syringe")">
                <DexMenuItem Text="Add a Schedule" Icon="fas fa-clock-rotate-left"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Medications" Icon="@Method.FaIcon("fas fa-user-doctor-message")">
                <DexMenuItem Text="Find Patient" Icon="fas fa-users"/>
            </RadzenPanelMenuItem>
        </NavigationItems>
        <DexContentTabs>
            <PatientConsultationCard Patient="Patient"/>
            <ConsultationDetails Consultations="Consultations" RowSelected="RowSelectHandler" ActiveDiagnosis="ActiveDiagnosis" PastMedicalHistory="PastMedicalHistory"/>
        </DexContentTabs>
    </InnerLayout>
}


@code {
    public PatientSummaryDto Patient { get; set; } = new();
    private List<GetConsultationDetailDto> Consultations { get; set; } = new();
    private List<ConsultationNoteDto> PastMedicalHistory { get; set; } = new();
    private List<ConsultationNoteDto> ActiveDiagnosis { get; set; } = new();
    readonly MudTabs _tabs = new();
    private bool _loading;
    private int _consultationId = 0;
    private bool _isConsultationFinish;
    private bool _isConsultationSelected;
    private int _reminderCount;
    private int _smsHistoryCount;
    private int _taskCount;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        if (ApplicationState.SelectedPatientId != Guid.Empty)
        {
            _reminderCount = await UnitOfWork.Consultation.GetActiveRemindersCount();
            _smsHistoryCount = await UnitOfWork.Messaging.GetSmsHistoryCount(ApplicationState.SelectedPatientId);
            _taskCount = await UnitOfWork.Messaging.GetUserTasksCountByPatient(ApplicationState.SelectedPatientId);
            await GetPatientSummary();
            await GetConsultations();
            await GetConsultationNotes();
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/select-patient/consultation");
        }

        _loading = false;
    }


    private void ClickChangedTab(int tabIndex)
    {
        _tabs.ActivatePanel(tabIndex);
    }


    #region Patient

    private async Task GetPatientSummary()
    {
        Patient = await UnitOfWork.Patient.GetPatientSummary(ApplicationState.SelectedPatientId);
        ApplicationState.SelectedPatientSummary = Patient;
    }

    private void FindPatient()
    {
        NavigationManager.NavigateTo("/select-patient/consultation");
        StateHasChanged();
    }

    private async Task OpenPatientSummaryModal()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<PatientSummary>("", parameters, options);
    }

    #endregion

    #region Consultation

    private async Task GetConsultations()
    {
        Consultations = await UnitOfWork.Consultation.GetConsultationDetails(ApplicationState.SelectedPatientId);
    }

    private async Task OpenBeginConsultationDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<BeginConsultationDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetConsultations();
        }
    }

    private async Task EditBeginConsultationDialog(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<EditConsultationDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetConsultations();
        }
    }

    private async Task FinishConsultationDialog(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to complete this Consultation?");
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Consultation.FinishConsultation(id);
            if (userRes.Succeeded)
            {
                var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
                await DialogService.ShowAsync<FinishConsultationDialog>("", new DialogParameters(), options);
            }
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<GetConsultationDetailDto> args)
    {
        if (args.Data.Id > 0)
        {
            _isConsultationSelected = true;
            _consultationId = args.Data.Id;
            _isConsultationFinish = args.Data.IsFinish;
        }
        else
        {
            _isConsultationSelected = false;
            _consultationId = 0;
        }

        StateHasChanged();
    }

    #endregion

    #region Others

    private async Task GetReminderCount()
    {
        _reminderCount = await UnitOfWork.Consultation.GetActiveRemindersCount();
    }

    private async Task CheckReminder()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<ReminderDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetReminderCount();
        }
    }

    private async Task CheckSmsHistory()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<SmsHistoryDialog>("", parameters, options);
    }

    private async Task CheckTasks()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<TasksDialog>("", parameters, options);
    }


    private async Task OpenAllergyDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<AllergiesDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (result.Canceled)
        {
            await GetPatientSummary();
            StateHasChanged();
        }
    }

    #endregion

    #region Notes

    private async Task GetConsultationNotes()
    {
        PastMedicalHistory = await UnitOfWork.Consultation.GetPastMedicalHistory();
        ActiveDiagnosis = await UnitOfWork.Consultation.GetActiveDiagonsisByPatient();
        StateHasChanged();
    }

    private async Task OpenUpsertNotesDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ConsultationId", _consultationId);
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium, FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<UpsertNoteFormDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (result.Canceled)
        {
            await GetConsultations();
            await GetConsultationNotes();
        }
    }

    #endregion


}