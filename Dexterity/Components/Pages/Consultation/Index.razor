@layout MainLayout
@page "/consultation"
@using Services.Features.Consultation.Dto.Immunisations
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.Consultation.Dto
@using Dexterity.Components.Pages.Consultation.Options
@using Dexterity.Components.Pages.PatientManager.Components.Allergies
@using Dexterity.Components.Pages.Consultation.Notes
@using Services.Features.Consultation.Dto.Notes
@using Dexterity.Components.Pages.Consultation.MainDetails.Dialogs
@using Dexterity.Components.Pages.Consultation.MainDetails
@using Dexterity.Components.Pages.Consultation.Immunisations
@using Dexterity.Components.Pages.Consultation.Prescriptions
@using Dexterity.Components.Pages.Consultation.PatientInvestigations
@using Dexterity.Components.Pages.Consultation.Documents.Letter
@using Dexterity.Components.Pages.Consultation.Documents
<TopTitleBar Title="Consultation | Patient Summary" Image="modules/consultation.svg"></TopTitleBar>

@if (!_loading)
{
    <InnerLayout DrawerWidth="260px" >
        <TopBarItems>
            @if (Patient.NkaFlag)
            {
                <DexSfButton Click="OpenAllergyDialog" Name="Allergies/Drug Allergies" Icon="drug-allergy.png"/>
            }
            else
            {
                <DexSfButton Style="background-color:crimson;color:white" Click="OpenAllergyDialog"
                             Name="Allergies/Drug Allergies" Icon="drug-allergy.png"/>
            }
            <DexSfButton Click="GetPatientSummary" Name="Refresh" Icon="refresh.png"/>
            <DexSfButton Click="CheckTasks" Name="@($"Tasks ({_taskCount})")" Icon="task.png"/>
            <DexSfButton Click="CheckSmsHistory" Name="@($"SMS ({_smsHistoryCount})")" Icon="sms.png"
                         Style="color: crimson;font-weight: bolder"/>
            <DexSfButton Click="CheckReminder" Name="@($"Reminders ({_reminderCount})")" Icon="reminder.png"/>
        </TopBarItems>
        <NavigationItems>
            <RadzenPanelMenuItem Text="Consultation Details"
                                 Icon="@DexHelperMethod.FaIcon("consultation-icon")"
                                 Click="() => ClickChangedTab(0)">

                <DexMenuItem Text="Patient Summary"
                             Icon="fas fa-rectangle-list"
                             Click="OpenPatientSummaryModal"/>
                <hr class="hr-custom"/>
                <DexMenuItem Text="Begin Consultation" Icon="fas fa-person-booth" Click="OpenBeginConsultationDialog"/>
                <DexMenuItem Text="Edit Consultation" Icon="fas fa-pencil" Disabled="@(!_isConsultationSelected)"
                             Click="() => EditBeginConsultationDialog(ApplicationState.SelectedConsultation.Id)"/>
                @if (!_isConsultationFinish)
                {
                    <DexMenuItem Text="Finish Consultation" Icon="fas fa-flag-checkered"
                                 Disabled="@(!_isConsultationSelected)"
                                 Click="() => FinishConsultationDialog(ApplicationState.SelectedConsultation.Id)"/>
                }
                <hr class="hr-custom"/>
                <DexMenuItem Text="Open Consultation" Icon="fas fa-users"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Notes" Icon="@DexHelperMethod.FaIcon("consultation-notes-icon")">
                <DexMenuItem Text="Save Note" Icon="fas fa-note"
                             Disabled="@(!_isConsultationSelected)"
                             Click="() => ClickChangedTab(1)"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Immunisations" Icon="@DexHelperMethod.FaIcon("consultation-immunisation-icon")"
                                 Click="() => ClickChangedTab(2)">
                <DexMenuItem Text="Add a Schedule" Icon="fas fa-clock-rotate-left" Click="OpenAdministerScheduleDialog"
                             Disabled="@(!_isConsultationSelected)"/>

                <DexMenuItem Text="Print Schedule" Icon="fas fa-print"
                             Disabled="@(!_isConsultationSelected)"/>
                <DexMenuItem Text="Print Leaflet" Icon="fas fa-print"
                             Disabled="@(!_isConsultationSelected)"/>
                <DexMenuItem Text="Print Given Shots" Icon="fa-thin fa-syringe"
                             Disabled="@(!_isConsultationSelected)"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Prescriptions" Icon="@DexHelperMethod.FaIcon("consultation-prescription-icon")"
                                 Click="() => ClickChangedTab(3)">
                <DexMenuItem Text="Add new" Icon="fas fa-prescription-bottle-medical"/>
                <DexMenuItem Text="Print" Icon="fas fa-print"/>
                <DexMenuItem Text="Reprint" Icon="fas fa-print"/>
                <DexMenuItem Text="Re-Issue" Icon="fas fa-arrows-rotate"/>
                <DexMenuItem Text="Complete Prescription" Icon="fas fa-check"/>
                <DexMenuItem Text="Cancel Prescription" Icon="fas fa-cancel"/>
                <hr class="hr-custom m-1"/>
                <DexMenuItem Text="Drug Card" Icon="fas fa-prescription-bottle-medical"/>
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Investigations"
                                 Icon="@DexHelperMethod.FaIcon("consultation-investigations-icon")"
                                 Click="() => ClickChangedTab(4)">
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1"/>
            <RadzenPanelMenuItem Text="Documents" Icon="@DexHelperMethod.FaIcon("documents-icon")"
                                 Click="() => ClickChangedTab(5)">
            </RadzenPanelMenuItem>
            <hr class="hr-custom m-1" />
            <RadzenPanelMenuItem Text="Find Patient"
                                 Icon="@DexHelperMethod.FaIcon("find-patient-icon")"
                                 Click="FindPatient">
            </RadzenPanelMenuItem>
        </NavigationItems>
        <DexContentTabs>
            <PatientConsultationCard Patient="Patient"/>
            <MudTabs @ref="_tabs">
                <MudTabPanel Text="">
                    <ConsultationDetails Consultations="Consultations"
                                         RowSelected="SelectConsultationRow"
                                         ActiveDiagnosis="ActiveDiagnosis"
                                         PastMedicalHistory="PastMedicalHistory"/>
                </MudTabPanel>
                <MudTabPanel>
                    <NoteDetails/>
                </MudTabPanel>
                <MudTabPanel Text="">
                    <ImmunisationsScreen ImmunisationsSchedules="_immunisationsSchedules"/>
                </MudTabPanel>
                <MudTabPanel Text="">
                    <PrescriptionDetail/>
                </MudTabPanel>
                <MudTabPanel Text="">
                    <InvestigationTab/>
                </MudTabPanel>
                <MudTabPanel Text="">
                    <DocumentTab/>
                </MudTabPanel>
            </MudTabs>
        </DexContentTabs>
    </InnerLayout>
}


@code {
    public PatientSummaryDto Patient { get; set; } = new();
    private List<GetConsultationDetailDto> Consultations { get; set; } = new();
    private List<ConsultationNoteDto> PastMedicalHistory { get; set; } = new();
    private List<ConsultationNoteDto> ActiveDiagnosis { get; set; } = new();
    private List<ImmunisationScheduleDto> _immunisationsSchedules = [];

    MudTabs _tabs = new();

    private bool _loading;
    private bool _isConsultationFinish;
    private bool _isConsultationSelected;
    private int _reminderCount;
    private int _smsHistoryCount;
    private int _taskCount;

    protected override async Task OnInitializedAsync()
    {
        ClickChangedTab(0);
        _loading = true;
        if (ApplicationState.SelectedPatient.PatientId != Guid.Empty)
        {
            _reminderCount = await UnitOfWork.Consultation.GetActiveRemindersCount();
            _smsHistoryCount = await UnitOfWork.Messaging.GetSmsHistoryCount(ApplicationState.SelectedPatient.PatientId);
            _taskCount = await UnitOfWork.Messaging.GetUserTasksCountByPatient(ApplicationState.SelectedPatient.PatientId);
            await GetPatientSummary();
            await GetConsultations();
            await GetConsultationNotes();
            await GetImmunisationSchedules();
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/select-patient/consultation");
        }

        _loading = false;
    }


    private void ClickChangedTab(int tabIndex)
    {
        _tabs.ActivatePanel(tabIndex);
    }


    #region Patient

    private async Task GetPatientSummary()
    {
        Patient = await UnitOfWork.Patient.GetPatientSummary(ApplicationState.SelectedPatient.PatientId);
        ApplicationState.SelectedPatient.PatientSummary = Patient;
    }

    private void FindPatient()
    {
        NavigationManager.NavigateTo("/select-patient/consultation");
        StateHasChanged();
    }

    private async Task OpenPatientSummaryModal()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<PatientSummary>("", parameters, options);
    }

    #endregion

    #region Consultation

    private async Task GetConsultations()
    {
        Consultations = await UnitOfWork.Consultation.GetConsultationDetails(ApplicationState.SelectedPatient.PatientId);
    }

    private async Task OpenBeginConsultationDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<BeginConsultationDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetConsultations();
        }
    }

    private async Task EditBeginConsultationDialog(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<EditConsultationDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetConsultations();
        }
    }

    private async Task FinishConsultationDialog(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to complete this Consultation?");
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled && Convert.ToBoolean(result.Data.ToString()))
        {
            var userRes = await UnitOfWork.Consultation.FinishConsultation(id);
            if (userRes.Succeeded)
            {
                var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
                await DialogService.ShowAsync<FinishConsultationDialog>("", new DialogParameters(), options);
            }
        }
    }

    public void SelectConsultationRow(RowSelectEventArgs<GetConsultationDetailDto> args)
    {
        if (args.Data.Id !=Guid.Empty)
        {
            _isConsultationSelected = true;
            ApplicationState.SelectedConsultation.Id = args.Data.Id;
            ApplicationState.SelectedConsultation.Detail = args.Data;
            _isConsultationFinish = args.Data.IsFinish;
        }
        else
        {
            _isConsultationSelected = false;
            ApplicationState.SelectedConsultation.Id = Guid.Empty;
            ApplicationState.SelectedConsultation.Detail = null;
        }

        StateHasChanged();
    }

    #endregion

    #region Notes

    private async Task GetConsultationNotes()
    {
        PastMedicalHistory = await UnitOfWork.Consultation.GetPastMedicalHistory();
        ActiveDiagnosis = await UnitOfWork.Consultation.GetActiveDiagonsisByPatient();
        StateHasChanged();
    }

    #endregion

    #region Immunisations

    private async Task OpenAdministerScheduleDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small, FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<AddAdministerSchedule>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetImmunisationSchedules();
        }
    }

    private async Task GetImmunisationSchedules()
    {
        _immunisationsSchedules = await UnitOfWork.Consultation.GetImmunisationSchedule(ApplicationState.SelectedPatient.PatientId);
    }

    #endregion

    #region Others

    private async Task GetReminderCount()
    {
        _reminderCount = await UnitOfWork.Consultation.GetActiveRemindersCount();
    }

    private async Task CheckReminder()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<ReminderDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetReminderCount();
        }
    }

    private async Task CheckSmsHistory()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<SmsHistoryDialog>("", parameters, options);
    }

    private async Task CheckTasks()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center};
        await DialogService.ShowAsync<TasksDialog>("", parameters, options);
    }

    private async Task OpenAllergyDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<AllergiesDialog>("", parameters, options);
        var result = await dialogresult.Result;
        if (result.Canceled)
        {
            await GetPatientSummary();
            StateHasChanged();
        }
    }

    #endregion

    #region Documents

    private async Task OpenNewLetter()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small, FullWidth = true,
            Position = DialogPosition.Center
        };
        var dialogresult = await DialogService.ShowAsync<LetterForm>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
        }
    }

    #endregion


}