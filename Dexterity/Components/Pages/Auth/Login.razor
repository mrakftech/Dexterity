@layout AuthLayout
@page "/"
@using Domain.Entities.UserAccounts
@using global::Services.Features.UserAccounts.Dtos.Auth

@if (HubConnection.State == HubConnectionState.Connected)
{
    <div class="d-lg-flex half" style="height: 15px">

        <div class="bg order-1 order-md-2"
             style="background-image: url('assets/images/login-screen-image.png');border-top-right-radius: 20px;border-bottom-right-radius:20px ">
        </div>
        <div class="contents order-2 order-md-1"
             style="border-top-left-radius: 20px;border-bottom-left-radius:20px ">
            <div class="container">
                <div class="row align-items-center justify-content-center">
                    <div class="col-md-7">
                        <img src="assets/images/large_logo.png" alt="logo" class="img-fluid logo"/>
                        <h1 style="color: crimson;font-size: 28px">
                            <strong>General Practice</strong>
                        </h1>
                        <h3 style="color: darkblue;font-size: 20px">
                            <strong>Management Software</strong>
                        </h3>
                        <div class="mt-5">
                            <MudItem Style="@($"display:{LoginBoxDisplay}")">
                                <DexForm Model="@_loginDto" OnValidSubmit="LoginUser">
                                    <Fields>
                                        <FormItem Field="@nameof(_loginDto.Username)"
                                                  LabelText="Username"></FormItem>
                                        <FormItem Field="@nameof(_loginDto.Password)" LabelText="Password"
                                                  EditorType="FormEditorType.Password"></FormItem>
                                    </Fields>
                                    <Buttons>
                                        <DexLoadingButton Name="Login" Processing="_processing"
                                                          Type="MudButtonType.Submit"
                                                          Icon="fas fa-sign-in"></DexLoadingButton>

                                    </Buttons>
                                </DexForm>

                            </MudItem>
                            <MudItem Style="@($"display:{ClinicBoxDisplay}")">
                                <label>Select Practice:</label>
                                <SfDropDownList TValue="int" Placeholder="Select Practice" TItem="UserClinic"
                                                @bind-Value="@_clinicId" DataSource="@Clinics">
                                    <DropDownListFieldSettings Value="ClinicId"
                                                               Text="Clinic.Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <DexLoadingButton Name="Proceed" Processing="_processing"
                                                  Click="NavigateToDashboard"></DexLoadingButton>
                                <DexButton Name="Back" Click="BackToLogin" Class="mt-3"/>
                            </MudItem>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
}
else
{
    <div class="element-center">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Class="validation-message text-bold">SERVER ERROR!</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText> No server connection has been made.
                </MudText>
            </MudCardContent>
            <MudCardActions>
                <DexLoadingButton Name="Reconnect to server" Processing="_processing"
                                  Click="ReconnectToServer"/>
            </MudCardActions>
        </MudCard>
    </div>
}



@code {
    [CascadingParameter] public HubConnection HubConnection { get; set; }
    private readonly LoginDto _loginDto = new();
    private bool _processing;
    private string LoginBoxDisplay { get; set; } = "";
    private string ClinicBoxDisplay { get; set; } = "none";
    int _clinicId = 0;
    private List<UserClinic> Clinics { get; set; } = [];

    private async Task LoginUser()
    {
        try
        {
            _processing = true;
            var res = await UnitOfWork.User.LoginAsync(_loginDto);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessage(res.Messages.First());
                await Task.Delay(500);
                LoginBoxDisplay = "none";
                ClinicBoxDisplay = "";
                Clinics = await UnitOfWork.User.GetUserClinics(ApplicationState.Auth.CurrentUser.UserId);
            }
            else
            {
                Snackbar.FailMessage(res.Messages.First());

                foreach (var item in res.Messages)
                {
                    Console.WriteLine(item);
                }
            }

            _processing = false;
        }
        catch (Exception e)
        {
            _processing = false;
            Console.WriteLine(e);
        }
    }

    private async Task NavigateToDashboard()
    {
        _processing = true;
        try
        {
            if (_clinicId > 0)
            {
                ApplicationState.Auth.CurrentUser.ClinicId = _clinicId;
                await Task.Delay(500);
                if (ApplicationState.Auth.CurrentUser.ClinicId > 0)
                {
                    NavigationManager.NavigateTo("/home");
                }
            }
            else
            {
                Snackbar.FailMessage("Select Clinic");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        _processing = false;
    }

    private async Task ReconnectToServer()
    {
        _processing = true;
        await Task.Delay(500);
        try
        {
            HubConnection = HubConnection.TryInitialize(NavigationManager);
            await HubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Snackbar.FailMessage(e.Message);
            Console.WriteLine(e);
        }
        _processing = false;
    }

    private void BackToLogin()
    {
        LoginBoxDisplay = "";
        ClinicBoxDisplay = "none";
    }

}