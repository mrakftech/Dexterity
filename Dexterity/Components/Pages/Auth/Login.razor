@layout AuthLayout
@page "/"
@using Domain.Entities.Settings
@using Domain.Entities.UserAccounts
@using Syncfusion.Blazor.DropDowns
@using global::Services.Features.UserAccounts.Dtos.Auth
@using Services.Features.Settings.Dtos
@using Services.State
<div class="d-lg-flex half" style="height: 15px">

    <div class="bg order-1 order-md-2"
         style="background-image: url('assets/images/login-screen-image.png');border-top-right-radius: 20px;border-bottom-right-radius:20px ">
    </div>
    <div class="contents order-2 order-md-1" style="border-top-left-radius: 20px;border-bottom-left-radius:20px ">
        <div class="container">
            <div class="row align-items-center justify-content-center">
                <div class="col-md-7">
                    <img src="assets/images/large_logo.png" alt="logo" class="img-fluid logo"/>
                    <h1 style="color: crimson;font-size: 28px">
                        <strong>General Practice</strong>
                    </h1>
                    <h3 style="color: darkblue;font-size: 20px">
                        <strong>Management Software</strong>
                    </h3>
                    <div class="mt-5">
                        <MudItem Style="@($"display:{LoginBoxDisplay}")">
                            <DexForm Model="@_loginDto" OnValidSubmit="LoginUser">
                                <Fields>
                                    <FormItem Field="@nameof(_loginDto.Username)" LabelText="Username"></FormItem>
                                    <FormItem Field="@nameof(_loginDto.Password)" LabelText="Password" EditorType="FormEditorType.Password"></FormItem>
                                </Fields>
                                <Buttons>
                                    <DexLoadingButton Name="Login" Processing="_processing" Type="MudButtonType.Submit" Icon="fas fa-sign-in"></DexLoadingButton>
                                </Buttons>
                            </DexForm>

                        </MudItem>
                        <MudItem Style="@($"display:{ClinicBoxDisplay}")">
                            <label>Select Practice:</label>
                            <SfDropDownList TValue="int" Placeholder="Select Practice" TItem="UserClinic"
                                            @bind-Value="@_clinicId" DataSource="@_clinics">
                                <DropDownListFieldSettings Value="Id" Text="Clinic.Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <DexLoadingButton Name="Proceed" Processing="_processing" Click="NavigateToDashboard"></DexLoadingButton>
                        </MudItem>
                    </div>
                </div>

            </div>
        </div>
    </div>

</div>
<div id="scrollbox">
    <div class="container">
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-2">User</div>
            <div class="col-4"><input placeholder="Your name .." @bind="@_username" /></div>
        </div>
        <div class="row">
            <div class="col-2">Message</div>
            <div class="col-4"><input placeholder="Your message .." @bind="@_message" /></div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">
                <button @onclick="@(() => SendAsync(_username,_message))">Send</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <ul>
                @foreach (var item in _messages)
                {
                <li>
                    <label>@item.ToString()</label>
                </li>
                }
            </ul>
        </div>
    </div>
</div>
@code {
    private LoginDto _loginDto = new();
    private bool _processing;
    private string LoginBoxDisplay { get; set; } = "";
    private string ClinicBoxDisplay { get; set; } = "none";
    int _clinicId = 0;
    private List<UserClinic> _clinics { get; set; } = new();


    private async Task LoginUser()
    {
        _processing = true;
        var res = await UnitOfWork.User.LoginAsync(_loginDto);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            await Task.Delay(1500);
            LoginBoxDisplay = "none";
            ClinicBoxDisplay = "";
            _clinics = await UnitOfWork.User.GetUserClinics(ApplicationState.CurrentUser.UserId);
        }
        else
        {
            Snackbar.FailMessge(res.Messages.First());

            foreach (var item in res.Messages)
            {
                Console.WriteLine(item);
            }
        }

        await Task.Delay(2500);

        _processing = false;
    }

    private async Task NavigateToDashboard()
    {
        _processing = true;
        if (_clinicId > 0)
        {
            ApplicationState.CurrentUser.ClinicId = _clinicId;
            await Task.Delay(1500);
            if (ApplicationState.CurrentUser.ClinicId > 0)
            {
                NavigationManager.NavigateTo("/home");
            }

            _processing = false;
        }
        else
        {
            Snackbar.FailMessge("Select Clinic");
            _processing = false;
        }
    }
    private string _username = string.Empty;
    private string _message = string.Empty;
    private List<string> _messages = new List<string>();

    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _messages.Clear();

            var ip = "localhost";
            _hubConnection = new HubConnectionBuilder().WithUrl($"https://{ip}:7177/chatHub").Build();

            _hubConnection.On<string, string>("ReceiveMessage", MessageReceived);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            // Some error handling.
        }
    }


    private void MessageReceived(string username, string message)
    {
        _messages.Add(username + " said " + message);

        StateHasChanged();
    }

    private async Task SendAsync(string username, string message)
    {

        await _hubConnection.SendAsync("SendMessage", username, message);

        _username = string.Empty;
        _message = string.Empty;

    }
}