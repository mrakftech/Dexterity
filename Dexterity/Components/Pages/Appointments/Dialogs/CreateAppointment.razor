@using Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Services.State
@using Services.Features.Appointments.Dtos
<MudDialog>
    <TitleContent>
        <MudText Align="Align.Center" Style="font-weight: bolder">New Appointment</MudText>
        
    </TitleContent>
    <DialogContent>

        <MudStack>
            <MudItem>
                <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"></PatientAutoComplete>
            </MudItem>
            <MudItem>
                <MudStack Row>
                    <MudItem md="6">
                        <Field >
                            <FieldLabel ColumnSize="ColumnSize.Is2">Start Date</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <DateEdit TValue="DateTime" @bind-Date="@Appointment.StartDate"/>
                            </FieldBody>
                        </Field>
                    </MudItem>
                    <MudItem md="6">
                        <Field >
                            <FieldLabel ColumnSize="ColumnSize.Is2">Start Time</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TimeEdit TValue="TimeSpan" @bind-Time="@Appointment.StartTime"/>
                            </FieldBody>
                        </Field>
                    </MudItem>
                </MudStack>
            </MudItem>
            <MudItem>
                <MudStack Row>
                    <MudItem md="6">

                        <Field >
                            <FieldLabel ColumnSize="ColumnSize.Is2">HCP</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <MudSelect T="Guid"
                                           Variant="Variant.Outlined"
                                           Margin="MudMargin.Dense"
                                           @bind-Value="Appointment.HcpId">
                                    <MudSelectItem Value="@(Guid.Empty)">Select Hcp</MudSelectItem>
                                    
                                    @foreach (var item in HealthCares)
                                    {
                                        <MudSelectItem Value="@(item.Id)">@item.FullName</MudSelectItem>
                                    }
                                </MudSelect>
                            </FieldBody>
                        </Field>
                    </MudItem>
                    <MudItem md="6">
                        <Field >
                            <FieldLabel ColumnSize="ColumnSize.Is2">Duration</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <NumericEdit Label="Duration" TValue="int" @bind-Value="@Appointment.Duration"/>
                            </FieldBody>
                        </Field>
                    </MudItem>
                   
                </MudStack>
            </MudItem>
            <MudItem>
                <FieldLabel>Content</FieldLabel>
                <MemoEdit @bind-Text="@Appointment.Notes"/>
            </MudItem>
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public DateTime StartDate { get; set; }
    private List<PatientListDto> PatientList { get; set; } = new();
    private AppointmentDto Appointment { get; set; } = new();
    private List<HealthcareDto> HealthCares { get; set; } = new();
    private Guid _patientId;

    protected override async Task OnInitializedAsync()
    {
        Appointment.StartDate = StartDate;
        Appointment.StartTime = StartDate.TimeOfDay;
        await GetPatients();
        await GetHealthCares();
    }

    private void ChangePatient(PatientListDto obj)
    {
        if (obj.Id != Guid.Empty)
        {
            _patientId = obj.Id;
        }
    }

    private async Task GetPatients()
    {
        await Task.Delay(2000);
        PatientList = await UnitOfWork.Patient.GetPatients();
    }

    private async Task GetHealthCares()
    {
        HealthCares = await UnitOfWork.User.GetUsersByClinic(ApplicationState.CurrentUser.ClinicId);
    }

}