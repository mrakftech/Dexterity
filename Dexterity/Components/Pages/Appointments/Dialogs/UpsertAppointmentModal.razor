@using Services.Features.Appointments.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.Settings.Dtos
@using Services.Features.UserAccounts.Dtos.User
@if (!_loadScreen)
{
    <DexDialog>
        <DialogTitle>
            @_title
        </DialogTitle>
        <Content>
            <MudItem>
                <CascadingValue Value="Appointment.PatientId" Name="PatientId">
                    <PatientAlertBar AlertType="@AlertType.Appointment.ToString()"/>
                </CascadingValue>
            </MudItem>
            <DexForm Model="@Appointment" OnValidSubmit="SaveAppointment" ColumnCount="2">
                <Fields>
                    <FormItem Field="@nameof(AppointmentDto.PatientId)" ColumnSpan="2">
                        <Template>
                            <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"
                                                 SelectedPatientName="@SelectedPatientName"></PatientAutoComplete>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.StartTime)" ColumnSpan="2">
                        <Template>
                            <label class="e-form-label">Start Time:</label>
                            <SfDateTimePicker Min="@DateTime.Today" TValue="DateTime" Value="@Appointment.StartTime">
                                <DateTimePickerEvents TValue="DateTime" ValueChange="@OnChange">
                                </DateTimePickerEvents>
                            </SfDateTimePicker>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.AppointmentTypeId)" ColumnSpan="1">
                        <Template>
                            <label class="e-form-label">Appointment Type:</label>
                            <SfDropDownList TValue="int" TItem="AppointmentTypeDto" Placeholder="Select type"
                                            DataSource="@AppointmentTypes" @bind-Value="@Appointment.AppointmentTypeId">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="AppointmentTypeDto"
                                                    ValueChange="OnAppointmentTypeChanged"></DropDownListEvents>
                            </SfDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.ClinicSiteId)" ColumnSpan="1">
                        <Template>
                            <label class="e-form-label">Site Or Room:</label>
                            <SfDropDownList TValue="int" TItem="ClinicSiteDto" Placeholder="Select Site"
                                            DataSource="@ClinicSites" @bind-Value="@Appointment.ClinicSiteId">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="ClinicSiteDto"
                                                    ValueChange="OnClinicSiteChanged"></DropDownListEvents>
                            </SfDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.HcpId)" ColumnSpan="1">
                        <Template>
                            <label class="e-form-label">HCP:</label>
                            <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="Select Hcp"
                                            DataSource="@HealthCares" @bind-Value="@Appointment.HcpId">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.Duration)" ColumnSpan="1">
                        <Template>
                            <label class="e-form-label">Duration:</label>
                            <SfNumericTextBox TValue="int" Value=@Appointment.Duration Min="5" Step="5"
                                              Max="60"></SfNumericTextBox>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(AppointmentDto.Description)" ColumnSpan="2">
                        <Template>
                            <label class="e-form-label">Description:</label>
                            <SfTextBox @bind-Value="@Appointment.Description" Multiline></SfTextBox>
                        </Template>
                    </FormItem>
                </Fields>
                <Buttons>
                    <DexLoadingButton Name="Save Appointment" Type="MudButtonType.Submit" Processing="_processing"
                                      Icon="fas fa-floppy-disk"></DexLoadingButton>
                </Buttons>
            </DexForm>
        </Content>
        <ActionButtons>
            @if (Id != 0)
            {
                <DexSimpleButton Name="Cancel Appointment" Click="@CancelAppointment" Icon="fas fa-ban" FullWidth=false
                                 Color="MudColor.Secondary"></DexSimpleButton>
                <DexSimpleButton Name="Delete Appointment" Click="() => DeleteAppointment(Id)" Icon="fas fa-trash"
                                 FullWidth=false Color="MudColor.Secondary"></DexSimpleButton>
            }
        </ActionButtons>
    </DexDialog>
}
else
{
    <p class="m-3">Processing....</p>
}


@code {

    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public Guid HcpId { get; set; }
    [Parameter] public Guid SelectedPatientId { get; set; } = Guid.Empty;
    [Parameter] public DateTime StartDate { get; set; }
    [Parameter] public List<PatientListDto> PatientList { get; set; }
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    private AppointmentDto Appointment { get; set; } = new();
    private List<AppointmentTypeDto> AppointmentTypes { get; set; } = new();
    private List<ClinicSiteDto> ClinicSites { get; set; } = new();
    private string _title;
    private bool _processing;
    private bool _loadScreen;
    private string SelectedPatientName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loadScreen = true;
        await Task.Delay(2000);
        await GetAppointmentTypes();
        await GetClinicSites();

        //For New Appointment
        if (Id == 0)
        {
            _title = "New Appointment";
            Appointment.StartTime = StartDate;
            Appointment.HcpId = HcpId;
            Appointment.PatientId = SelectedPatientId;
            Appointment.PatientName = SelectedPatientName;
        }
        else
        {
            _title = "Edit Appointment";
            var res = await UnitOfWork.Appointment.GetAppointment(Id);
            if (res.Succeeded)
            {
                Appointment = Mapper.Map<AppointmentDto>(res.Data);
                var patient = PatientList.FirstOrDefault(x => x.Id == Appointment.PatientId);
                Appointment.Type = AppointmentTypes.FirstOrDefault(x => x.Id == Appointment.AppointmentTypeId)!.Name;
                Appointment.PatientName = patient!.FullName;
                SelectedPatientName = patient!.FullName;
                Appointment.Location = ClinicSites.FirstOrDefault(x => x.Id == Appointment.ClinicSiteId)!.Name;
            }
        }

        _loadScreen = false;
        StateHasChanged();
        MudDialog.StateHasChanged();
    }


    private async Task GetAppointmentTypes()
    {
        AppointmentTypes = await UnitOfWork.Setting.GetAppointmentTypes();
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private async Task SaveAppointment()
    {
        _processing = true;
        await Task.Delay(2500);
        var res = await UnitOfWork.Appointment.SaveAppointment(Id, Appointment);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDialog.Close();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
        }

        _processing = false;
    }

    private void ChangePatient(ChangeEventArgs<string, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            Appointment.PatientId = patient.Id;
            Appointment.PatientName = patient.FullName;
            SelectedPatientName = patient.FullName;
            StateHasChanged();
        }
        else
        {
            Appointment.PatientId = Guid.Empty;
        }

        MudDialog.StateHasChanged();
    }

    Task OnClinicSiteChanged(ChangeEventArgs<int, ClinicSiteDto> args)
    {
        var clinicSite = args.ItemData;
        Appointment.ClinicSiteId = clinicSite.Id;
        Appointment.Location = clinicSite.Name;
        return Task.CompletedTask;
    }

    Task OnAppointmentTypeChanged(ChangeEventArgs<int, AppointmentTypeDto> args)
    {
        var appointmentType = AppointmentTypes.FirstOrDefault(x => x.Id == args.Value);
        Appointment.AppointmentTypeId = appointmentType.Id;
        Appointment.Duration = appointmentType.Duration;
        Appointment.Type = appointmentType.Name;
        return Task.CompletedTask;
    }

    private async Task CancelAppointment()
    {
        var parameters = new DialogParameters();
        parameters.Add("AppointmentId", Id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<CancelAppointment>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            MudDialog.Close();
        }
    }

    private async Task DeleteAppointment(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await UnitOfWork.Appointment.DeleteAppointment(id);
            MudDialog.Close();
        }
    }

    private void OnChange(ChangedEventArgs<DateTime> args)
    {
        Appointment.StartTime = args.Value;
        StateHasChanged();
    }

}