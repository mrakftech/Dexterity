@using Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Services.State
@using Services.Features.Appointments.Dtos
@using Services.Features.Settings.Dtos
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Schedule
<MudDialog>
    <TitleContent>
        <MudStack>
            <MudItem>
                <MudText Color="MudColor.Primary" Align="Align.Center" Style="font-weight: bolder">Appointment Details</MudText>
            </MudItem>

        </MudStack>
    </TitleContent>
    <DialogContent>
        @if (!_loadScreen)
        {
            <MudStack>
                <MudItem>
                    <MudStack Row>
                        @if (Id != 0)
                        {
                            <DexSimpleButton Name="Cancel Appointment" Click="@CancelAppointment" Icon="fas fa-ban" FullWidth=false Color="MudColor.Secondary"></DexSimpleButton>
                            <DexSimpleButton Name="Delete Appointment" Click="()=>DeleteAppointment(Id)" Icon="fas fa-trash" FullWidth=false Color="MudColor.Secondary"></DexSimpleButton>
                        }
                    </MudStack>
                </MudItem>
                <MudItem>
                    <Validations @ref="_validationsRef" Mode="ValidationMode.Manual" Model="@Appointment">
                        <MudStack>
                            @if (Id != 0)
                            {
                                <PatientAppointmentCard Patient="_patient" />

                            }
                            <MudItem>
                                <MudText Color="MudColor.Error" Class="text-bold">@_error</MudText>
                            </MudItem>
                            <MudItem>
                                <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"></PatientAutoComplete>
                            </MudItem>

                            <MudItem>
                                <MudStack Row>
                                    <MudItem md="12">
                                        <Label>Start Time:</Label>
                                        <SfDateTimePicker Min="@DateTime.Today" TValue="DateTime" Value="@Appointment.StartTime"></SfDateTimePicker>
                                    </MudItem>
                                </MudStack>
                            </MudItem>
                            <MudItem md="12">
                                <MudStack Row>
                                    <MudItem md="6">
                                        <Label>Appointment Type:</Label>
                                        <SfDropDownList TValue="int" TItem="AppointmentTypeDto" Placeholder="Select type" DataSource="@AppointmentTypes" @bind-Value="@Appointment.AppointmentTypeId">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="int" TItem="AppointmentTypeDto" ValueChange="OnAppointmentTypeChanged"></DropDownListEvents>
                                        </SfDropDownList>
                                    </MudItem>
                                    <MudItem md="6">
                                        <Label>Site:</Label>
                                        <SfDropDownList TValue="int" TItem="ClinicSiteDto" Placeholder="Select Site" DataSource="@ClinicSites" @bind-Value="@Appointment.ClinicSiteId">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="int" TItem="ClinicSiteDto" ValueChange="OnClinicStieChanged"></DropDownListEvents>

                                        </SfDropDownList>
                                    </MudItem>
                                </MudStack>
                            </MudItem>
                            <MudItem>
                                <MudStack Row>
                                    <MudItem md="6">
                                        <Label>HCP:</Label>
                                        <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="Select Hcp" DataSource="@HealthCares" @bind-Value="@Appointment.HcpId">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </MudItem>
                                    <MudItem md="6">
                                        <Label>Duration</Label>
                                        <SfNumericTextBox TValue="int" Value=@Appointment.Duration Min="5" Step="5" Max="60"></SfNumericTextBox>
                                    </MudItem>

                                </MudStack>
                            </MudItem>
                            <MudItem md="12">
                                <SfRecurrenceEditor Value="@Appointment.RecurrenceRule" EndTypes="@Endtypes" ValueChanged="HandleRecurrenceEditorChange"></SfRecurrenceEditor>
                            </MudItem>
                            <MudItem>
                                <FieldLabel>Notes</FieldLabel>
                                <SfTextBox @bind-Value="@Appointment.Description" Multiline></SfTextBox>
                            </MudItem>
                        </MudStack>
                    </Validations>

                </MudItem>
            </MudStack>

        }
        else
        {
            <CommonLoader />
        }


    </DialogContent>
    <DialogActions>

        @if (!_loadScreen)
        {


            <DexLoadingButton Name="Save Appointment" Click="@SaveAppointment" Processing="_processing" Icon="fas fa-floppy-disk"></DexLoadingButton>
        }

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public Guid HcpId { get; set; }
    [Parameter] public DateTime StartDate { get; set; }
    [Parameter] public List<PatientListDto> PatientList { get; set; }
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    private AppointmentDto Appointment { get; set; } = new();
    private List<AppointmentTypeDto> AppointmentTypes { get; set; } = new();
    private List<ClinicSiteDto> ClinicSites { get; set; } = new();
    PatientListDto _patient;
    Validations _validationsRef;
    private string _error;
    private string _title;
    private bool _processing;
    private bool _loadScreen;
    List<RepeatType> Repeats = new List<RepeatType>() { RepeatType.None, RepeatType.Daily, RepeatType.Weekly };
    List<EndType> Endtypes = new List<EndType>() { EndType.Until, EndType.Count };
    protected override async Task OnInitializedAsync()
    {
        _loadScreen = true;
        await GetAppointmentTypes();
        await GetClinicSites();

        //For New Appointment
        if (Id == 0)
        {
            _title = "New Appointment";
            Appointment.StartTime = StartDate;
            Appointment.HcpId = HcpId;
        }
        else
        {
            _title = "Edit Appointment";
            var res = await UnitOfWork.Appointment.GetAppointment(Id);
            if (res.Succeeded)
            {

                Appointment = Mapper.Map<AppointmentDto>(res.Data);
                _patient = PatientList.FirstOrDefault(x => x.Id == Appointment.PatientId);
                Appointment.Type = AppointmentTypes.FirstOrDefault(x => x.Id == Appointment.AppointmentTypeId).Name;
                Appointment.PatientName = _patient.FullName;
                Appointment.Location = ClinicSites.FirstOrDefault(x => x.Id == Appointment.ClinicSiteId).Name;
            }
        }

        _loadScreen = false;

    }

    private void ChangePatient(PatientListDto patient)
    {
        if (patient != null)
        {
            Appointment.PatientId = patient.Id;
            Appointment.PatientName = patient.FullName;
        }

    }

    private async Task GetAppointmentTypes()
    {
        AppointmentTypes = await UnitOfWork.Setting.GetAppointmentTypes();
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private async Task SaveAppointment()
    {

        _processing = true;
        _error = "";
        if (Appointment.PatientId == Guid.Empty)
        {
            _error = "Please select patient";
            Snackbar.FailMessge("Please select patient");
            _processing = false;
            return;

        }
        if (Appointment.AppointmentTypeId == 0)
        {
            _error = "Please select appointment type";
            Snackbar.FailMessge("Please select appointment type");
            _processing = false;
            return;

        }
        if (Appointment.HcpId == Guid.Empty)
        {
            _error = "Please select Health care professional";
            Snackbar.FailMessge("Please select Health care professional");
            _processing = false;
            return;
        }
        if (await _validationsRef.ValidateAll())
        {
            await Task.Delay(2500);
            var res = await UnitOfWork.Appointment.SaveAppointment(Id, Appointment);
            if (res.Succeeded)
            {
                Snackbar.SuccessMessge(res.Messages.First());
                MudDialog.Close();
            }
            await _validationsRef.ClearAll();
        }

        _processing = false;
    }
    Task OnClinicStieChanged(ChangeEventArgs<int, ClinicSiteDto> args)
    {
        var clinicSite = ClinicSites.FirstOrDefault(x => x.Id == args.Value);
        Appointment.ClinicSiteId = clinicSite.Id;
        Appointment.Location = clinicSite.Name;
        return Task.CompletedTask;
    }
    Task OnAppointmentTypeChanged(ChangeEventArgs<int, AppointmentTypeDto> args)
    {
        var appointmentType = AppointmentTypes.FirstOrDefault(x => x.Id == args.Value);
        Appointment.AppointmentTypeId = appointmentType.Id;
        Appointment.Duration = appointmentType.Duration;
        Appointment.Type = appointmentType.Name;
        return Task.CompletedTask;
    }
    private async Task CancelAppointment()
    {
        var parameters = new DialogParameters();
        parameters.Add("AppointmentId", Id);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogResult = await DialogService.ShowAsync<CancelAppointment>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            MudDialog.Close();
        }

    }
    void HandleRecurrenceEditorChange(string value)
    {
        Appointment.RecurrenceRule = value;
    }


    private async Task DeleteAppointment(int id)
    {
        var parameters = new DialogParameters();
        var dialogresult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            var res = await UnitOfWork.Appointment.DeleteAppointment(id);
            if (res.Succeeded)
            {
                MudDialog.Close();
            }
            else
            {
                Snackbar.FailMessge(res.Messages.First());
            }
        }
    }
}