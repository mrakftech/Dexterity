@layout MainLayout
@page "/appointments"
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.UserAccounts.Dtos.User
@using Dexterity.Components.Pages.Appointments.ResourceAvailbility
@using Dexterity.Components.Pages.Appointments.Scheduler.Dialogs
@using Dexterity.Components.Pages.Appointments.Recurrence
@using Dexterity.Components.Pages.Appointments.Scheduler

<TopTitleBar Title="Appointments"
             Image="modules/appointment.svg">
</TopTitleBar>

<style>
    .e-calendar {
        border-spacing: 0;
        max-width: 200px;
        min-width: 230px !important;
        padding: 12px;
    }
</style>
<div class="">
    @if (_loading)
    {
        <DexProgressBar/>
    }
    else
    {
        <InnerLayout DrawerWidth="250px">
            <NavigationItems>
                <DexMenuItem Text="Appointments" Icon="appointments-icon" Click="@(() => ClickChanged(0))"/>
                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Create))
                {
                    <DexMenuItem Text="New Appointment" Icon="new-appointment-icon"
                                 Click="@(() => NewAppointment(new DateTime(2025, 1, 1, 0, 0, 0)))"/>

                    <DexMenuItem Text="Recurring Appointments" Icon="repeat-appointment-icon"
                                 Click="@(() => ClickChanged(1))"/>
                    <DexMenuItem Text="Find Slot" Icon="find-slot-icon" Click="FindSlot"/>
                }
                @if (UnitOfWork.User.CheckPermission(PermissionConstants.Read))
                {
            
                    <DexMenuItem Text="Find Appointments" Icon="find-appointment-icon"
                                 Click="@(() => ClickChanged(2))"/>
                }
              
                <DexMenuItem Text="Resource Availability" Icon="resource-availability-icon"
                             Click="OpenResourceAvailabilityCenter"/>
                <div class="m-2">
                    <SfCalendar TValue="DateTime" @bind-Value="@DateValue"
                                CssClass="mini-calendar"/>
                </div>
            </NavigationItems>
            <DexContentTabs>
                <MudTabs @ref="_tabs">
                    <MudTabPanel Text="">
                        <DexScheduler HealthCares="HealthCares" PatientList="PatientList" SelectedDate="DateValue"/>
                    </MudTabPanel>
                    <MudTabPanel Text="">
                        <RecurringAppointments HealthCares="HealthCares" PatientList="PatientList"/>
                    </MudTabPanel>
                    <MudTabPanel Text="">
                        <FindAppointments/>
                    </MudTabPanel>
                </MudTabs>
            </DexContentTabs>
        </InnerLayout>
    }
</div>

@code {
    private List<HealthcareDto> HealthCares { get; set; } = new();
    private List<PatientListDto> PatientList { get; set; }
    MudTabs _tabs;
    private DateTime DateValue { get; set; } = DateTime.Now;
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        ApplicationState.SelectedAppointment.Id = Guid.Empty;
        ApplicationState.SelectedAppointment.Appointment = null;
        ApplicationState.SelectedPatient.Id = Guid.Empty;
        await GetHealthCares();
        await GetPatients();
        _loading = false;
    }

    private void ClickChanged(int tabIndex)
    {
        _tabs.ActivatePanel(tabIndex);
    }

    private async Task GetHealthCares()
    {
        HealthCares = await UnitOfWork.User
            .GetDoctors(ApplicationState.Auth.CurrentUser.ClinicId);
    }

    private async Task GetPatients()
    {
        PatientList = await UnitOfWork.Patient.GetPatients();
    }

    private async Task NewAppointment(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        parameters.Add("StartDate", dateTime);
        parameters.Add("PatientList", PatientList);
        parameters.Add("HealthCares", HealthCares);
        parameters.Add("HcpId", ApplicationState.Auth.CurrentUser.UserId);
        parameters.Add("SelectedPatientId", ApplicationState.SelectedPatient.Id);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
        }
    }

    private async Task OpenResourceAvailabilityCenter()
    {
        var parameters = new DialogParameters();
        parameters.Add("HealthCares", HealthCares);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<ResourceAvailabilityDialog>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
        }
    }

    private async Task FindSlot()
    {
        var parameters = new DialogParameters();
        parameters.Add("HealthCares", HealthCares);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<FindSlot>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
        }
    }

    

    

   

}