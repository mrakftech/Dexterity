@layout MainLayout
@page "/appointments"
@using Dexterity.Components.Pages.Appointments.Components
@using Dexterity.Components.Pages.Appointments.Components.Recurrence
@using Dexterity.Components.Pages.Appointments.Dialogs
@using Services.Features.PatientManagement.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.UserAccounts.Dtos.User

<TopTitleBar Title="Appointments"
             Image="modules/appointment.svg">
</TopTitleBar>

<div class="">
    @if (_loading)
    {
        <CommonLoader/>
    }
    else
    {
        <InnerLayout>
            <NavigationItems>
                <MudNavLink Match="NavLinkMatch.All" Icon="fas fa-calendar-range" IconColor="MudColor.Info"
                            @onclick="@(() => ClickChanged(0))">
                    Appointments
                </MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="fas fa-calendar-circle-plus" IconColor="MudColor.Info"
                            @onclick="@(() => NewAppointment(DateTime.Now))">
                    New Appointment
                </MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="fas fa-calendar-range" IconColor="MudColor.Info"
                            @onclick="@(() => ClickChanged(1))">
                    Recurring Appointments
                </MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="fas fa-magnifying-glass" IconColor="MudColor.Info"
                            @onclick="@(() => ClickChanged(2))">
                    Find Appointments
                </MudNavLink>
            </NavigationItems>

            <DexContentTabs>
                <div class="d-flex justify-center align-center mt-lg-5" style="width: 100%!important;">
                    <MudTabs @ref="_tabs">
                        <MudTabPanel Text="">
                            <DexScheduler HealthCares="HealthCares" PatientList="PatientList"/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <RecurringAppointments HealthCares="HealthCares" PatientList="PatientList"/>
                        </MudTabPanel>
                        <MudTabPanel Text="">
                            <FindAppointments/>
                        </MudTabPanel>
                    </MudTabs>
                </div>

            </DexContentTabs>
        </InnerLayout>
    }

</div>

@code {
    private List<HealthcareDto> HealthCares { get; set; } = new();
    private List<PatientListDto> PatientList { get; set; }
    MudTabs _tabs;

    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GetHealthCares();
        await GetPatients();
        _loading = false;
    }

    private void ClickChanged(int tabIndex)
    {
        _tabs.ActivatePanel(tabIndex);
    }

    private async Task GetHealthCares()
    {
        HealthCares = await UnitOfWork.User
            .GetUsersByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private async Task GetPatients()
    {
        PatientList = await UnitOfWork.Patient.GetPatients();
    }

    private async Task NewAppointment(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        parameters.Add("StartDate", dateTime);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
        }
    }

}