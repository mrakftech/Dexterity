@using Dexterity.Components.Pages.Appointments.Components.Recurrence.Dialogs
@using Services.Features.Appointments.Dtos
@using Services.Features.PatientManagement.Dtos.Details
@using Services.Features.Settings.Dtos
@using Services.Features.UserAccounts.Dtos.User

<TabTitle Title="Add Recurrence"></TabTitle>
<MudStack>
    
    <MudItem>
        <MudText Color="MudColor.Error" Class="text-bold">@_error</MudText>
    </MudItem>
    <MudItem>
        <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"></PatientAutoComplete>
    </MudItem>
    <MudItem>
        <label>HCP:</label>
        <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="Select Hcp" DataSource="@HealthCares" @bind-Value="@Appointment.HcpId">
            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
        </SfDropDownList>
    </MudItem>
    <MudItem md="12">
        <MudStack Row>
            <MudItem md="6">
                <label>Appointment Type:</label>
                <SfDropDownList TValue="Guid" TItem="AppointmentTypeDto" Placeholder="Select type" DataSource="@AppointmentTypes" @bind-Value="@Appointment.AppointmentTypeId">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="Guid" TItem="AppointmentTypeDto" ValueChange="OnAppointmentTypeChanged"></DropDownListEvents>
                </SfDropDownList>
            </MudItem>
            <MudItem md="6">
                <label>Start Time:</label>
                <SfDateTimePicker Min="@DateTime.Today" TValue="DateTime" Value="@Appointment.StartTime">
                    <DateTimePickerEvents TValue="DateTime" ValueChange="@OnChange">
                    </DateTimePickerEvents>
                </SfDateTimePicker>

            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12">
        <MudStack Row>
            <MudItem md="6">
                <label>Site:</label>
                <SfDropDownList TValue="Guid" TItem="ClinicSiteDto" Placeholder="Select Site" DataSource="@ClinicSites" @bind-Value="@Appointment.ClinicSiteId">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="Guid" TItem="ClinicSiteDto" ValueChange="OnClinicSiteChanged"></DropDownListEvents>
                </SfDropDownList>
            </MudItem>
            <MudItem md="6">
                <label>Duration</label>
                <SfNumericTextBox TValue="int" Value="@Appointment.Duration" Min="5" Step="5" Max="60"></SfNumericTextBox>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12">
        <MudStack Row>
            <MudItem md="12">
                <label>Description:</label>
                <SfTextBox @bind-Value="@Appointment.Description" Multiline></SfTextBox>
            </MudItem>
         
        </MudStack>
    </MudItem>
    <MudItem Class="mt-3">
        @* <MudText>@Appointment.RecurrenceRule</MudText> *@
        <SfRecurrenceEditor @bind-Value="@Appointment.RecurrenceRule" Frequencies="_repeats" EndTypes="@_endtypes"></SfRecurrenceEditor>
    </MudItem>
    <DexSimpleButton Name="Validate" Click="ValidateAppointments" FullWidth="false"></DexSimpleButton>
</MudStack>


@code {
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = [];
    [Parameter] public List<PatientListDto> PatientList { get; set; } = [];
    private AppointmentDto Appointment { get; set; } = new();
    private List<AppointmentTypeDto> AppointmentTypes { get; set; } = [];
    private List<ClinicSiteDto> ClinicSites { get; set; } = [];
    string RecurrenceRule { get; set; } = "";
    List<RepeatType> _repeats = [RepeatType.None, RepeatType.Daily, RepeatType.Weekly, RepeatType.Monthly];
    readonly List<EndType> _endtypes = [EndType.Until, EndType.Count];
    private string _error;

    protected override async Task OnInitializedAsync()
    {
        await GetAppointmentTypes();
        await GetClinicSites();
    }

    private async Task GetAppointmentTypes()
    {
        AppointmentTypes = await UnitOfWork.Setting.GetAppointmentTypes();
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.Auth.CurrentUser.ClinicId);
    }

    private void ChangePatient(ChangeEventArgs<string, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
            Appointment.PatientId = patient.Id;
            Appointment.PatientName = patient.FullName;
            Appointment.StartTime = new DateTime(2025, 1, 1, 0, 0, 0);
        }
    }

    Task OnAppointmentTypeChanged(ChangeEventArgs<Guid, AppointmentTypeDto> args)
    {
        var appointmentType = args.ItemData;
        Appointment.AppointmentTypeId = appointmentType.Id;
        Appointment.Duration = appointmentType.Duration;
        Appointment.Type = appointmentType.Name;
        return Task.CompletedTask;
    }

    Task OnClinicSiteChanged(ChangeEventArgs<Guid, ClinicSiteDto> args)
    {
        var clinicSite = args.ItemData;
        Appointment.Location = clinicSite.Name;
        return Task.CompletedTask;
    }

    private async Task ValidateAppointments()
    {
        _error = "";
        if (Appointment.PatientId == Guid.Empty)
        {
            _error = "Please select patient";
            return;
        }

        if (Appointment.AppointmentTypeId == Guid.Empty)
        {
            _error = "Please select appointment type";
            return;
        }

        if (Appointment.HcpId == Guid.Empty)
        {
            _error = "Please select Health care professional";
            return;
        }

        if (!string.IsNullOrWhiteSpace(Appointment.RecurrenceRule))
        {
            var recurrenceDates = RecurringHelper.GetRecurrenceDateTimeCollection(Appointment.RecurrenceRule, Appointment.StartTime, 20).ToList();
            var parameters = new DialogParameters
            {
                {"Appointment", Appointment},
                {"RecurrencDates", recurrenceDates}
            };
            var options = new DialogOptions()
                {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center};
            var dialogresult =  await DialogService.ShowAsync<ValidateAppointmentsDialog>("", parameters, options);
            var result = await dialogresult.Result;
            if (!result.Canceled)
            {
            }
        }
        else
        {
            _error = "Please select Recurrence";
            return;
        }
    }

    private void OnChange(ChangedEventArgs<DateTime> args)
    {
        Appointment.StartTime = args.Value;
        StateHasChanged();
    }

}