@using Services.Features.Appointments.Dtos
@using Services.Features.PatientManagement.Dtos
@using Services.Features.Settings.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Services.State
@using Shared.Helper
@using Syncfusion.Blazor.Calendars
<MudText Style="margin: 3%" Align="Align.Center" Typo="Typo.h4" Class="text-bold">Recurring Appointments</MudText>
<MudStack>
    <MudItem >
        <PatientAutoComplete PatientList="PatientList" OnChangePatient="ChangePatient"></PatientAutoComplete>
    </MudItem>
    <MudItem>
        <Label>HCP:</Label>
        <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="Select Hcp" DataSource="@HealthCares" @bind-Value="@Appointment.HcpId">
            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
        </SfDropDownList>
    </MudItem>
    <MudItem md="12">
        <MudStack Row>
            <MudItem md="6">
                <Label>Appointment Type:</Label>
                <SfDropDownList TValue="int" TItem="AppointmentTypeDto" Placeholder="Select type" DataSource="@AppointmentTypes" @bind-Value="@Appointment.AppointmentTypeId">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="int" TItem="AppointmentTypeDto" ValueChange="OnAppointmentTypeChanged"></DropDownListEvents>
                </SfDropDownList>
            </MudItem>
            <MudItem md="6">
                <Label>Time:</Label>
                <SfTimePicker TValue="DateTime" PlaceHolder="Select a time" Value="@Appointment.StartTime"></SfTimePicker>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12">
        <MudStack Row>
            <MudItem md="6">
                <Label>Site:</Label>
                <SfDropDownList TValue="int" TItem="ClinicSiteDto" Placeholder="Select Site" DataSource="@ClinicSites" @bind-Value="@Appointment.ClinicSiteId">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                </SfDropDownList>
            </MudItem>
            <MudItem md="6">
                <Label>Duration</Label>
                <SfNumericTextBox TValue="int" Value=@Appointment.Duration Min="5" Step="5" Max="60"></SfNumericTextBox>
            </MudItem>

        </MudStack>
    </MudItem>
    <MudItem Class="mt-3">
        <SfRecurrenceEditor @bind-Value="@RecurrenceRule"></SfRecurrenceEditor>
    </MudItem>
    <DexSimpleButton Name="Validate" Click="ValidateAppointments"></DexSimpleButton>
</MudStack>
@code {
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = [];
    [Parameter] public List<PatientListDto> PatientList { get; set; } = [];
    private AppointmentDto Appointment { get; set; } = new();
    private List<AppointmentTypeDto> AppointmentTypes { get; set; } = [];
    private List<ClinicSiteDto> ClinicSites { get; set; } = [];
    string RecurrenceRule { get; set; } = "";
    List<RepeatType> _repeats = [RepeatType.None, RepeatType.Daily, RepeatType.Weekly];

    protected override async Task OnInitializedAsync()
    {
        await GetAppointmentTypes();
        await GetClinicSites();
    }
    
    private async Task GetAppointmentTypes()
    {
        AppointmentTypes = await UnitOfWork.Setting.GetAppointmentTypes();
    }

    private async Task GetClinicSites()
    {
        ClinicSites = await UnitOfWork.Setting.GetSitesByClinic(ApplicationState.CurrentUser.ClinicId);
    }

    private void ChangePatient(ChangeEventArgs<Guid, PatientListDto> args)
    {
        var patient = args.ItemData;
        if (patient != null)
        {
        }
    }
    
    Task OnAppointmentTypeChanged(ChangeEventArgs<int, AppointmentTypeDto> args)
    {
        var appointmentType = args.ItemData;
        Appointment.AppointmentTypeId = appointmentType.Id;
        Appointment.Duration = appointmentType.Duration;
        Appointment.Type = appointmentType.Name;
        return Task.CompletedTask;
    }
    private void ValidateAppointments()
    {
        var dateCollection = RecurringHelper.GetRecurrenceDateTimeCollection(RecurrenceRule, DateTime.Now);
    }
    
}