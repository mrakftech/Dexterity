@using Services.Features.Appointments.Dtos
@using TextAlign = Syncfusion.Blazor.Grids.TextAlign
<MudDialog>
    <DialogContent>
        <p class="validation-message">@_error</p>
        <SfGrid DataSource="@Slots" AllowPaging="true">
            <GridColumns>
                <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="20">
                    <Template>
                        @{
                            var slot = (context as AppointmentSlotDto);
                            if (slot.IsAvailable)
                            {
                                <MudBadge Color="MudColor.Success" Overlap="true" Class="mx-6 my-4">
                                </MudBadge>
                            }
                            else
                            {
                                <MudBadge Color="MudColor.Secondary" Overlap="true" Class="mx-6 my-4">
                                </MudBadge>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(AppointmentSlotDto.StartTime)"
                            HeaderText="Appointment Date"
                            TextAlign="TextAlign.Left"
                            Width="80"></GridColumn>
                <GridColumn HeaderText="Actions" Width="60">
                    <Template>
                        @{
                            var item = (context as AppointmentSlotDto);
                            if (!item.IsAvailable)
                            {
                                <MudButton Size="@MudSize.Small" Color="MudColor.Primary"
                                           OnClick="() => CheckFreeSlot(item.Id)">Check Free Slot
                                </MudButton>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </DialogContent>
    <DialogActions>
        <DexLoadingButton Processing="_isProcessing" Name="Schedule" FullWidth="false"
                          Click="ScheduleAppointments"></DexLoadingButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<DateTime> RecurrencDates { get; set; }
    [Parameter] public AppointmentDto Appointment { get; set; } = new();
    private List<AppointmentSlotDto> Slots { get; set; } = new();
    private bool _isProcessing;
    private string _error ;

    protected override async Task OnInitializedAsync()
    {
        await UnitOfWork.Appointment.ClearRecurrenceEventsSlots();
        await UnitOfWork.Appointment.AddRecurrenceEventsSlot(RecurrencDates, Appointment.StartTime, Appointment.HcpId);
        await GetAppointmentSlots();
    }

    private async Task GetAppointmentSlots()
    {
        Slots = await UnitOfWork.Appointment.GetAllFreeSlots();
    }

    private async Task ScheduleAppointments()
    {
        _isProcessing = true;
        _error = string.Empty;
        var res = await UnitOfWork.Appointment.AddRecurrenceEvents(Slots, Appointment);
        if (res.Succeeded)
        {
            Snackbar.SuccessMessage(res.Messages.First());
            MudDialog.Close();
            await UnitOfWork.Appointment.ClearRecurrenceEventsSlots();
        }
        else
        {
            Snackbar.FailMessage(res.Messages.First());
            _error = res.Messages.First();
        }

        _isProcessing = false;
    }

    private async Task CheckFreeSlot(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("HcpId", Appointment.HcpId);
        parameters.Add("StartDate", Slots.Select(x => x.StartTime).Max().AddDays(1));
        parameters.Add("Duration", Appointment.Duration);
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, Position = DialogPosition.Center};
        var dialogresult = await DialogService.ShowAsync<CheckSlot>("", parameters, options);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await GetAppointmentSlots();
            _error = string.Empty;
        }
    }

}