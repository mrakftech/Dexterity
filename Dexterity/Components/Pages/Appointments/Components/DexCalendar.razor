@* @using Dexterity.Components.Pages.Appointments
@using Dexterity.Components.Pages.Appointments.Dialogs
@using Services.Features.Appointments.Dtos
@using Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Services.State
@using Shared.Constants.Module
<style>
    .cell-template {
        width: 100%;
        height: 100%;
        border: 2px solid #0077B5;
        cursor: pointer
    }

        .cell-template:hover {
            border: 2px solid #000;
        }

            .cell-template:hover > .cell-header {
                background-color: #000
            }


    .cell-header {
        background-color: #0077B5
    }
</style>
<MudStack>
    <MudItem Class="mt-3">
        <MudStack Row>
            <MudItem>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">View</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select TValue="string" SelectedValueChanged="@OnStatusSelectedValueChanged">
                            <SelectItem Value="@(AppointmentConstants.Status.Active)">@AppointmentConstants.Status.Active</SelectItem>
                            <SelectItem Value="@(AppointmentConstants.Status.Cancelled)">@AppointmentConstants.Status.Cancelled</SelectItem>
                        </Select>
                    </FieldBody>
                </Field>
            </MudItem>
            <MudItem>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">HCP</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select TValue="Guid" SelectedValueChanged="@ChangeHcp">
                            <SelectItem Value="@(Guid.Empty)">Filter By HCP</SelectItem>
                            @foreach (var item in HealthCares)
                            {
                                <SelectItem Value="@(item.Id)">@item.FullName</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </MudItem>
            <MudItem>
                <MudButton StartIcon="fa fa-refresh" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="RefreshAppointments">Refresh</MudButton>
            </MudItem>
            <MudSpacer />
            <MudItem>
                <MudIconButton Icon="fas fa-print" Color="MudColor.Primary"></MudIconButton>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12">

        <MudCalendar Items="@Appointments"
                     Color="MudColor.Primary"
                     Elevation="1"
                     ShowTodayButton="true"
                     ShowWeek="false"
                     ShowMonth="false"
                     ShowWorkWeek
                     FirstDayOfWeek="DayOfWeek.Monday"
                     DayTimeInterval="CalendarTimeInterval.Minutes15"
                     CellClicked="CellClicked" MonthCellMinHeight="100" EnableResizeItems>
            <CellTemplate>
                <div class="cell-template" @onclick="() => UpdateModal(((GetAppointmentDto)context).Id)">
                    <div class="cell-header">
                        <MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">
                            @($"{((GetAppointmentDto)context).Start.TimeOfDay} - {((GetAppointmentDto)context).End.Value.TimeOfDay} | {((GetAppointmentDto)context).Patient.FullName}")
                        </MudText>
                    </div>
                    <div class="pa-2">
                        <MudText Typo="Typo.body2">@($"Appointment Type: {((GetAppointmentDto)context).Type}")</MudText>
                        <MudText Typo="Typo.body2">@($"DOB: {((GetAppointmentDto)context).Patient.DateOfBirth:d}")</MudText>
                    </div>
                </div>
            </CellTemplate>
        </MudCalendar>
    </MudItem>
</MudStack>
@code {
    [Parameter] public List<PatientListDto> PatientList { get; set; }
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    private List<GetAppointmentDto> Appointments { get; set; } = new();
    private Guid _hcpId;
    protected override async Task OnInitializedAsync()
    {
        await GetCalendarItems();
    }

    private async Task GetCalendarItems(string status = null)
    {
        Appointments = await UnitOfWork.Appointment.GetAppointments(status);
    }

    private async Task CellClicked(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        parameters.Add("StartDate", dateTime);
        parameters.Add("PatientList", PatientList);
        parameters.Add("HealthCares", HealthCares);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await GetCalendarItems();
        }

    }


    private async Task UpdateModal(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await GetCalendarItems();
        }
    }

    private async Task RefreshAppointments()
    {
        await GetCalendarItems();
    }

    private async Task OnStatusSelectedValueChanged(string status)
    {
        await GetCalendarItems(status);
    }

    private async Task ChangeHcp(Guid hcpId)
    {
        Appointments = await UnitOfWork.Appointment.GetAppointmentsByHcp(hcpId);
    }

} *@