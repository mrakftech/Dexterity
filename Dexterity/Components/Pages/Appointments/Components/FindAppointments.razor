@using Services.Features.Appointments.Dtos
@using Services.Features.UserAccounts.Dtos.User

<TabTitle Title="Find Appointments"/>

<DexGrid DataSource="AppointmentList" Loading="_loading">
    <DexGridColumns >
        <GridColumn Field="@nameof(SearchAppointmentDto.StartTime)" Format="g" Type="ColumnType.DateTime" HeaderText="Date" Width="120px"/>
        <GridColumn Field="@nameof(SearchAppointmentDto.PatientName)" HeaderText="Full Name" Width="120px"/>
        <GridColumn Field="@nameof(SearchAppointmentDto.DateOfBirth)" Format="d" Type="ColumnType.DateTime" HeaderText="Date of Birth" Width="120px"/>
        <GridColumn Field="@nameof(SearchAppointmentDto.Status)" HeaderText="Status" Width="120px"/>
    </DexGridColumns>
</DexGrid>

@code {
    private List<SearchAppointmentDto> AppointmentList { get; set; } = new();
    private string _searchString;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GetAppointments();
        _loading = false;
    }

    private Func<SearchAppointmentDto, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.PatientName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.StartTime.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    private async Task GetAppointments()
    {
        AppointmentList = await UnitOfWork.Appointment.FindAppointments();
    }

}