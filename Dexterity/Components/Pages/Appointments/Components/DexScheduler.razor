@using System.Globalization
@using Dexterity.Components.Pages.Appointments.Dialogs
@using Services.Features.Appointments.Dtos
@using Services.Features.Appointments.Service
@using Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User


<MudStack>
    <MudItem Class="mt-3">
        <MudStack Row>
            <MudItem md="3">
                <SfDropDownList TValue="string" TItem="string" Placeholder="View" DataSource="@AppointmentStatusList" @bind-Value="@StatusSearchValue">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                </SfDropDownList>
            </MudItem>
            <MudItem md="3">
                <SfDropDownList TValue="Guid" TItem="HealthcareDto" Placeholder="HCP" DataSource="@HealthCares" @bind-Value="@HcpSearchValue">
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                </SfDropDownList>
            </MudItem>
            <MudItem>
                <DexSimpleButton Click="OnSearchClick" Name="Search" FullWidth="false" />
                <DexSimpleButton Click="OnClearClick" Name="Clear" FullWidth="false" />
            </MudItem>
            <MudSpacer />
            <MudItem>
                <MudIconButton Icon="fas fa-refresh" Color="MudColor.Primary" OnClick="OnPrint"></MudIconButton>
                <MudIconButton Icon="fas fa-print" Color="MudColor.Primary" OnClick="OnPrint"></MudIconButton>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12" Style="@(ShowSchedule ? string.Empty : "display:none")">
        <SfSchedule @ref="ScheduleRef" TValue="AppointmentDto" Width="100%" Height="650px" SelectedDate="@SelectedDate"
                    AllowDragAndDrop="true" ShowQuickInfo="true" EnableAutoRowHeight="true"  ShowWeekend=false>

            <ScheduleEventSettings TValue="AppointmentDto" AllowDeleting AllowAdding EnableTooltip>
                <SfDataManager AdaptorInstance="@typeof(AppointmentDataAdaptor)" Adaptor="Adaptors.CustomAdaptor">
                </SfDataManager>
            </ScheduleEventSettings>
            <ScheduleResources>
                <ScheduleResource TItem="HealthcareDto" TValue="Guid[]" DataSource="@HealthCares" Field="HcpId" Title="Name" 
                Name="Healthcares" TextField="Name" IdField="Id" AllowMultiple="true" 
                WorkDaysField="WorkingDays" StartHourField="StartHour" EndHourField="EndHour"></ScheduleResource>
            </ScheduleResources>
            <ScheduleGroup EnableCompactView="false" Resources="@groupData"></ScheduleGroup>
            <ScheduleViews>
                <ScheduleView Option="View.Day"></ScheduleView>
                <ScheduleView Option="View.WorkWeek"></ScheduleView>
            </ScheduleViews>
            <ScheduleTemplates>
                <ResourceHeaderTemplate>
                    @{
                        var airlineData = context.ResourceData as HealthcareDto;
                        <div class='template-wrap'>
                            <div class="airline-details">
                                <div class="airline-name">@(airlineData.Name)</div>
                            </div>
                        </div>
                    }
                </ResourceHeaderTemplate>
            </ScheduleTemplates>
            <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                <HeaderTemplate>
                    <div class="quick-info-header">
                        <div class="quick-info-header-content" style="align-items: center; color: #919191;">
                            <div class="quick-info-title">
                            </div>
                        </div>
                    </div>
                </HeaderTemplate>
                <ContentTemplate>
                    <div class="e-event-popup">
                        <div class="e-popup-header">
                            <div class="e-header-icon-wrapper">
                            </div>
                            <div class="e-subject-wrap">
                                @* <div class="e-subject e-text-ellipsis"></div> *@
                            </div>
                        </div>
                        <div class="e-popup-content">
                            <div class="e-date-time">
                                <div class="e-date-time-icon e-icons"></div>
                                <div class="e-date-time-wrapper e-text-ellipsis">
                                    <div class="e-date-time-details e-text-ellipsis">@(GetEventDetails((context as AppointmentDto)))</div>
                                </div>
                            </div>
                            <div class="e-description">
                            </div>
                        </div>
                        <div class="e-popup-footer">
                            <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="()=>CellClicked(((AppointmentDto)context).StartTime)">Create Appointment</MudButton>
                            <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="@(e => OnCloseClick(e, context as AppointmentDto))">Close</MudButton>
                        </div>
                    </div>

                </ContentTemplate>
                <FooterTemplate>
                    <div class="cell-footer">
                    </div>
                </FooterTemplate>
            </ScheduleQuickInfoTemplates>
            <ScheduleEvents TValue="AppointmentDto" OnPopupOpen="PopupOpen"></ScheduleEvents>
        </SfSchedule>

    </MudItem>
    <MudItem>
        @if (!ShowSchedule)
        {
            <SfGrid DataSource="gridDataSource" Width="auto" Height="505px">
                <GridColumns>
                    <GridColumn Field="Subject" HeaderText="Subject" Width="120px"></GridColumn>
                    <GridColumn Field="Location" HeaderText="Location" Width="120px"></GridColumn>
                    <GridColumn Field="StartTime" HeaderText="StartTime" Width="120px" Format="g" Type="ColumnType.DateTime"></GridColumn>
                    <GridColumn Field="EndTime" HeaderText="EndTime" Width="120px" Format="g" Type="ColumnType.DateTime"></GridColumn>
                </GridColumns>
            </SfGrid>
        }
    </MudItem>
</MudStack>


@code {
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    private List<AppointmentDto> DataSource = new();
    private List<AppointmentDto> gridDataSource = new();
    SfSchedule<AppointmentDto> ScheduleRef;

    private string[] groupData = new string[] { "Healthcares" };
    private bool ShowSchedule { get; set; } = true;

    DateTime SelectedDate { get; set; } = DateTime.Now;


    List<string> AppointmentStatusList = new List<string>
    {
        $"{@AppointmentConstants.Status.Active}",
        $"{@AppointmentConstants.Status.Cancelled}",
    };


    private string GetEventDetails(AppointmentDto data)
    {
        return data.StartTime.ToString("dddd dd, MMMM yyyy", CultureInfo.InvariantCulture) + " (" + data.StartTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + "-" + data.EndTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + ")";
    }

    private async Task PopupOpen(PopupOpenEventArgs<AppointmentDto> args)
    {
        if (args.Type == PopupType.Editor)
        {
            args.Cancel = true; //to prevent the default editor window
            var action = args.Data.Id == 0 ? "CellClick" : "AppointmentClick"; //to check whether the window opens on cell or appointment
            var parameters = new DialogParameters();
            parameters.Add("StartDate", args.Data.StartTime);
            parameters.Add("PatientList", PatientList);
            parameters.Add("HealthCares", HealthCares);
            var options = new MudBlazor.DialogOptions()
                { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };

            if (action == "CellClick")
            {
                parameters.Add("HcpId", args.Data.HcpId);
                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await ScheduleRef.RefreshAsync();
                }
            }
            else
            {
                parameters.Add("Id", args.Data.Id);
                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await ScheduleRef.RefreshAsync();
                }
            }
        }
        if (args.Type == PopupType.QuickInfo)
        {
            //args.Cancel = true;
        }


    }
    private async Task RefreshAppointments()
    {
        await ScheduleRef.RefreshAsync();
    }
    private async Task CellClicked(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        parameters.Add("StartDate", dateTime);
        parameters.Add("PatientList", PatientList);
        parameters.Add("HealthCares", HealthCares);
        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await ScheduleRef.RefreshAsync();
        }
    }
    private async Task OnCloseClick(MouseEventArgs args, AppointmentDto data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
    }

    #region Search Appointments
    private string StatusSearchValue;
    private Guid HcpSearchValue;
    public async Task OnSearchClick()
    {
        var hcp = HcpSearchValue.ToString();
        DateTime? startDate = null;
        DateTime? endDate = null;
        List<WhereFilter> searchObj = new List<WhereFilter>();
        if (!string.IsNullOrEmpty(StatusSearchValue))
        {
            searchObj.Add(new WhereFilter() { Field = "Status", Operator = "equal", value = StatusSearchValue, Condition = "or", IgnoreCase = true });
        }
        if (HcpSearchValue != Guid.Empty)
        {
            searchObj.Add(new WhereFilter() { Field = "HcpId", Operator = "equal", value = HcpSearchValue, Condition = "or", IgnoreCase = true });
        }
        if (searchObj.Count > 0)
        {
            Query query = new Query().Where(new WhereFilter() { Condition = "and", IsComplex = true, predicates = searchObj });
            List<AppointmentDto> eventCollections = await ScheduleRef.GetEventsAsync(startDate, endDate, true);
            object data = await new DataManager() { Json = eventCollections }.ExecuteQuery<AppointmentDto>(query);
            List<AppointmentDto> resultData = (data as List<AppointmentDto>);
            gridDataSource = resultData;
            ShowSchedule = false;
        }
        else
        {
            ShowSchedule = true;
        }
    }
    public void OnClearClick()
    {
        ShowSchedule = true;
        StatusSearchValue = string.Empty;
    }
    public async Task OnPrint()
    {
        await ScheduleRef.PrintAsync();
    }
    #endregion
}
<style>
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
</style>

