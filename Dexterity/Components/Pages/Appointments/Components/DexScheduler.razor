@using Dexterity.Components.Pages.Appointments.Dialogs
@using Services.Features.Appointments.Dtos
@using Services.Features.Appointments.Service
@using Services.Features.PatientManagement.Dtos
@using Services.Features.UserAccounts.Dtos.User
@using Shared.Constants.Module
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Schedule
@using System.ComponentModel.DataAnnotations
@using System.Globalization
<MudStack>
    <MudItem Class="mt-3">
        <MudStack Row>
            <MudItem>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">View</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select TValue="string" SelectedValueChanged="@OnStatusSelectedValueChanged">
                            <SelectItem Value="@(AppointmentConstants.Status.Active)">@AppointmentConstants.Status.Active</SelectItem>
                            <SelectItem Value="@(AppointmentConstants.Status.Cancelled)">@AppointmentConstants.Status.Cancelled</SelectItem>
                        </Select>
                    </FieldBody>
                </Field>
            </MudItem>
            <MudItem>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">HCP</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select TValue="Guid" SelectedValueChanged="@ChangeHcp">
                            <SelectItem Value="@(Guid.Empty)">Filter By HCP</SelectItem>
                            @foreach (var item in HealthCares)
                            {
                                <SelectItem Value="@(item.Id)">@item.Name</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </MudItem>
            <MudItem>
                <MudButton StartIcon="fa fa-refresh" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="RefreshAppointments">Refresh</MudButton>
            </MudItem>
            <MudSpacer />
            <MudItem>
                <MudIconButton Icon="fas fa-print" Color="MudColor.Primary"></MudIconButton>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem md="12">
        <SfSchedule @ref="ScheduleRef" TValue="AppointmentDto" Width="100%" Height="650px" SelectedDate="@CurrentDate" AllowDragAndDrop="true" ShowQuickInfo="true" EnableAutoRowHeight="true">
            <ScheduleEventSettings TValue="AppointmentDto" AllowDeleting AllowAdding EnableTooltip>
                <SfDataManager  AdaptorInstance="@typeof(AppointmentDataAdaptor)" Adaptor="Adaptors.CustomAdaptor">
                </SfDataManager>
            </ScheduleEventSettings>
            <ScheduleEvents TValue="AppointmentDto" OnPopupOpen="@PopupOpen" ></ScheduleEvents>
            <ScheduleViews>
                <ScheduleView Option="View.Day"></ScheduleView>
                <ScheduleView Option="View.WorkWeek"></ScheduleView>
            </ScheduleViews>
            <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                <HeaderTemplate>
                    <div class="quick-info-header">
                        <div class="quick-info-header-content" style="align-items: center; color: #919191;">
                            <div class="quick-info-title">
                            </div>
                        </div>
                    </div>
                </HeaderTemplate>
                <ContentTemplate>
                    <div class="e-event-popup">
                        <div class="e-popup-header">
                            <div class="e-header-icon-wrapper">
                            </div>
                            <div class="e-subject-wrap">
                                @* <div class="e-subject e-text-ellipsis"></div> *@
                            </div>
                        </div>
                        <div class="e-popup-content">
                            <div class="e-date-time">
                                <div class="e-date-time-icon e-icons"></div>
                                <div class="e-date-time-wrapper e-text-ellipsis">
                                    <div class="e-date-time-details e-text-ellipsis">@(GetEventDetails((context as AppointmentDto)))</div>
                                </div>
                            </div>
                            <div class="e-description">
                            </div>
                        </div>
                        <div class="e-popup-footer">
                            <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="()=>CellClicked(((AppointmentDto)context).StartTime)">Create Appointment</MudButton>
                            <MudButton Size="MudSize.Small" Variant="Variant.Filled" Color="MudColor.Primary" OnClick="@(e => OnCloseClick(e, context as AppointmentDto))">Close</MudButton>
                        </div>
                    </div>

                </ContentTemplate>
                <FooterTemplate>
                    <div class="cell-footer">
                    </div>
                </FooterTemplate>
            </ScheduleQuickInfoTemplates>

        </SfSchedule>
    </MudItem>
</MudStack>


@code {
    [Parameter] public List<HealthcareDto> HealthCares { get; set; } = new();
    [Parameter] public List<PatientListDto> PatientList { get; set; } = new();
    private List<AppointmentDto> DataSource = new();
    SfSchedule<AppointmentDto> ScheduleRef;
    private string Action;
    DateTime CurrentDate = DateTime.Now;

    private string GetEventDetails(AppointmentDto data)
    {
        return data.StartTime.ToString("dddd dd, MMMM yyyy", CultureInfo.InvariantCulture) + " (" + data.StartTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + "-" + data.EndTime.ToString("hh:mm tt", CultureInfo.InvariantCulture) + ")";
    }
    private async Task PopupOpen(PopupOpenEventArgs<AppointmentDto> args)
    {

        if (args.Type == PopupType.Editor)
        {
            args.Cancel = true; //to prevent the default editor window
            Action = args.Data.Id == 0 ? "CellClick" : "AppointmentClick"; //to check whether the window opens on cell or appointment

            var parameters = new DialogParameters();
            parameters.Add("StartDate", args.Data.StartTime);
            parameters.Add("PatientList", PatientList);
            parameters.Add("HealthCares", HealthCares);
            parameters.Add("Action", Action);
            var options = new MudBlazor.DialogOptions()
                { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };

            if (Action == "CellClick")
            {
                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await ScheduleRef.RefreshAsync();
                }
            }
            else
            {
                parameters.Add("Id", args.Data.Id);

                var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
                var result = await dialogResult.Result;
                if (!result.Canceled)
                {
                    await ScheduleRef.RefreshAsync();
                }
            }
        }
        if (args.Type == PopupType.QuickInfo)
        {
            //args.Cancel = true;
        }


    }


    private async Task ChangeHcp(Guid hcpId)
    {
        DataSource = await UnitOfWork.Appointment.GetAppointmentsByHcp(hcpId);
    }
    private async Task RefreshAppointments()
    {
        await ScheduleRef.RefreshAsync();
    }
    private async Task OnStatusSelectedValueChanged(string status)
    {
        // await GetCalendarItems(status);
    }
    private async Task CellClicked(DateTime dateTime)
    {
        var parameters = new DialogParameters();
        parameters.Add("StartDate", dateTime);
        parameters.Add("PatientList", PatientList);
        parameters.Add("HealthCares", HealthCares);
        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center };
        var dialogResult = await DialogService.ShowAsync<UpsertAppointmentModal>("", parameters, options);
        var result = await dialogResult.Result;
        if (!result.Canceled)
        {
            await ScheduleRef.RefreshAsync();
        }

    }
    private async Task OnCloseClick(MouseEventArgs args, AppointmentDto data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
    }
}
<style>
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
</style>

