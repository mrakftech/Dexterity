// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CancelReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicSiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecurrenceID")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ClinicSiteId");

                    b.HasIndex("HcpId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", "Scheduler");
                });

            modelBuilder.Entity("Domain.Entities.Appointments.AppointmentCancellationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentCancellationReasons", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Appointments.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.AdministerShot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConsultationDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GivenDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImmunisationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstShot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGiven")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ShotBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationDetailId");

                    b.HasIndex("HcpId");

                    b.HasIndex("ImmunisationScheduleId");

                    b.HasIndex("ShotBatchId");

                    b.ToTable("AdministerShots", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.BaselineDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AbdominalCircumference")
                        .HasColumnType("real");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Bmi")
                        .HasColumnType("real");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("real");

                    b.Property<string>("CurrentOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diastolic")
                        .HasColumnType("int");

                    b.Property<DateTime>("DrinkingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DrinkingStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ExSmokerYears")
                        .HasColumnType("int");

                    b.Property<bool>("FamilyCvdHistory")
                        .HasColumnType("bit");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Hdl")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Ldl")
                        .HasColumnType("real");

                    b.Property<bool>("Lvh")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PeakFlow")
                        .HasColumnType("int");

                    b.Property<int>("Pulse")
                        .HasColumnType("int");

                    b.Property<string>("PulseRhythm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("SmokePerDay")
                        .HasColumnType("int");

                    b.Property<bool>("SmokerStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SmokingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubtanceMisuse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Systolic")
                        .HasColumnType("int");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<int>("WeeklyAlcohol")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("HcpId");

                    b.HasIndex("PatientId");

                    b.ToTable("BaselineDetails", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicSiteId")
                        .HasColumnType("int");

                    b.Property<string>("ConsultationClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConsultationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsultationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pomr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicSiteId");

                    b.HasIndex("HcpId");

                    b.HasIndex("PatientId");

                    b.ToTable("Details", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LetterDt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LetterTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LetterTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HcpId");

                    b.HasIndex("LetterTemplateId");

                    b.ToTable("Letters", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultationDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HealthCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamilyHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPastHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoialHistory")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationDetailId");

                    b.HasIndex("HealthCodeId");

                    b.ToTable("Notes", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ImmunisationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImmunisationProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImmunisationProgramId");

                    b.HasIndex("PatientId");

                    b.ToTable("ImmunisationSchedule", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.InvestigationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HcpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientInvestigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientInvestigationId");

                    b.ToTable("InvestigationAudits", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.InvestigationResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvestigationDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientInvestigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationDetailId");

                    b.HasIndex("PatientInvestigationId");

                    b.ToTable("InvestigationResults", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.LetterReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConsultationLetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationLetterId");

                    b.ToTable("LetterReplies", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.PatientInvestigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvestigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAbnormal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HcpId");

                    b.HasIndex("InvestigationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientInvestigations", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("GenericOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Indication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Initiated")
                        .HasColumnType("int");

                    b.Property<string>("Instruction1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInReview")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministerShotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministerShotId");

                    b.ToTable("Reactions", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemindDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HcpId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reminders", "Consultation");
                });

            modelBuilder.Entity("Domain.Entities.Messaging.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("ChatMessages", "Messaging");
                });

            modelBuilder.Entity("Domain.Entities.Messaging.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasks", "Messaging");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Alert.AlertCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlertCategories", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Alert.PatientAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlertCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlertCategoryId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAlerts", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Allergies.PatientAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllergyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PatientAllergies", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Allergies.PatientDrugAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugAllergyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("DrugType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PatientDrugAllergies", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Billing.PatientAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientAccounts", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Billing.PatientTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PatientAccountType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientAccountId");

                    b.ToTable("PatientTransactions", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.DoctorVisitCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DvDistanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DvNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DvReviewDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DvReviewNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorVisitCards", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContacts", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientHospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitals", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientOccupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientOccupations", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.RelatedHcp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("RelatedHcps", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Family.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCarer")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationshipToPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("FamilyMembers", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Group.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GroupHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Group.GroupPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationshipToPatient")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PatientId");

                    b.ToTable("GroupPatients", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Options.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlsoKnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthBoard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Options.SmsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSmsHistories", "PM");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseOfDeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyMedicalScheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEnrollment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DisRegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisRegistrationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DispensingStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DrugPaymentSchemeDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormerFamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HcpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IhiNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCardDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherMaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NkaFlag")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ppsn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateHealthInsuranceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HcpId");

                    b.ToTable("Patients", "PM");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Account.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Clinic.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clinic", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Clinic.ClinicSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicSites", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.HealthCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeathCodes", "Setting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Chapter = "General and Unspecified",
                            Code = "A01",
                            Description = "Pain general/multiple sites"
                        },
                        new
                        {
                            Id = 2,
                            Chapter = "General and Unspecified",
                            Code = "A02",
                            Description = "Chills"
                        },
                        new
                        {
                            Id = 3,
                            Chapter = "General and Unspecified",
                            Code = "A03",
                            Description = "Fever"
                        },
                        new
                        {
                            Id = 4,
                            Chapter = "General and Unspecified",
                            Code = "A04",
                            Description = "Weakness/tiredness general"
                        },
                        new
                        {
                            Id = 5,
                            Chapter = "General and Unspecified",
                            Code = "A05",
                            Description = "Feeling ill"
                        },
                        new
                        {
                            Id = 6,
                            Chapter = "General and Unspecified",
                            Code = "A06",
                            Description = "Fainting/syncope"
                        },
                        new
                        {
                            Id = 7,
                            Chapter = "General and Unspecified",
                            Code = "A07",
                            Description = "Coma"
                        },
                        new
                        {
                            Id = 8,
                            Chapter = "General and Unspecified",
                            Code = "A08",
                            Description = "Swelling"
                        },
                        new
                        {
                            Id = 9,
                            Chapter = "General and Unspecified",
                            Code = "A09",
                            Description = "Sweating problem"
                        },
                        new
                        {
                            Id = 10,
                            Chapter = "General and Unspecified",
                            Code = "A10",
                            Description = "Bleeding/haemorrhage NOS"
                        },
                        new
                        {
                            Id = 11,
                            Chapter = "General and Unspecified",
                            Code = "A11",
                            Description = "Chest pain NOS"
                        },
                        new
                        {
                            Id = 12,
                            Chapter = "General and Unspecified",
                            Code = "A13",
                            Description = "Concern/fear medical treatment"
                        },
                        new
                        {
                            Id = 13,
                            Chapter = "General and Unspecified",
                            Code = "A16",
                            Description = "Irritable infant"
                        },
                        new
                        {
                            Id = 14,
                            Chapter = "General and Unspecified",
                            Code = "A18",
                            Description = "Concern about appearance"
                        },
                        new
                        {
                            Id = 15,
                            Chapter = "General and Unspecified",
                            Code = "A20",
                            Description = "Euthanasia request/discussion"
                        },
                        new
                        {
                            Id = 16,
                            Chapter = "General and Unspecified",
                            Code = "A21",
                            Description = "Risk factor for malignancy"
                        },
                        new
                        {
                            Id = 17,
                            Chapter = "General and Unspecified",
                            Code = "A23",
                            Description = "Risk factor NOS"
                        },
                        new
                        {
                            Id = 18,
                            Chapter = "General and Unspecified",
                            Code = "A25",
                            Description = "Fear of death/dying"
                        },
                        new
                        {
                            Id = 19,
                            Chapter = "General and Unspecified",
                            Code = "A26",
                            Description = "Fear of cancer NOS"
                        },
                        new
                        {
                            Id = 20,
                            Chapter = "General and Unspecified",
                            Code = "A27",
                            Description = "Fear of other disease NOS"
                        },
                        new
                        {
                            Id = 21,
                            Chapter = "General and Unspecified",
                            Code = "A28",
                            Description = "Limited function/disability NOS"
                        },
                        new
                        {
                            Id = 22,
                            Chapter = "General and Unspecified",
                            Code = "A29",
                            Description = "General symptom/complaint other"
                        },
                        new
                        {
                            Id = 23,
                            Chapter = "General and Unspecified",
                            Code = "A70",
                            Description = "Tuberculosis"
                        },
                        new
                        {
                            Id = 24,
                            Chapter = "General and Unspecified",
                            Code = "A71",
                            Description = "Measles"
                        },
                        new
                        {
                            Id = 25,
                            Chapter = "General and Unspecified",
                            Code = "A72",
                            Description = "Chickenpox"
                        },
                        new
                        {
                            Id = 26,
                            Chapter = "General and Unspecified",
                            Code = "A73",
                            Description = "Malaria"
                        },
                        new
                        {
                            Id = 27,
                            Chapter = "General and Unspecified",
                            Code = "A74",
                            Description = "Rubella"
                        },
                        new
                        {
                            Id = 28,
                            Chapter = "General and Unspecified",
                            Code = "A75",
                            Description = "Infectious mononucleosis"
                        },
                        new
                        {
                            Id = 29,
                            Chapter = "General and Unspecified",
                            Code = "A76",
                            Description = "Viral exanthem other"
                        },
                        new
                        {
                            Id = 30,
                            Chapter = "General and Unspecified",
                            Code = "A77",
                            Description = "Viral disease other/NOS"
                        },
                        new
                        {
                            Id = 31,
                            Chapter = "General and Unspecified",
                            Code = "A78",
                            Description = "Infectious disease other/NOS"
                        },
                        new
                        {
                            Id = 32,
                            Chapter = "General and Unspecified",
                            Code = "A79",
                            Description = "Malignancy NOS"
                        },
                        new
                        {
                            Id = 33,
                            Chapter = "General and Unspecified",
                            Code = "A80",
                            Description = "Trauma/injury NOS"
                        },
                        new
                        {
                            Id = 34,
                            Chapter = "General and Unspecified",
                            Code = "A81",
                            Description = "Multiple trauma/injuries"
                        },
                        new
                        {
                            Id = 35,
                            Chapter = "General and Unspecified",
                            Code = "A82",
                            Description = "Secondary effect of trauma"
                        },
                        new
                        {
                            Id = 36,
                            Chapter = "General and Unspecified",
                            Code = "A84",
                            Description = "Poisoning by medical agent"
                        },
                        new
                        {
                            Id = 37,
                            Chapter = "General and Unspecified",
                            Code = "A85",
                            Description = "Adverse effect medical agent"
                        },
                        new
                        {
                            Id = 38,
                            Chapter = "General and Unspecified",
                            Code = "A86",
                            Description = "Toxic effect non-medicinal substance"
                        },
                        new
                        {
                            Id = 39,
                            Chapter = "General and Unspecified",
                            Code = "A87",
                            Description = "Complication of medical treatment"
                        },
                        new
                        {
                            Id = 40,
                            Chapter = "General and Unspecified",
                            Code = "A88",
                            Description = "Adverse effect physical factor"
                        },
                        new
                        {
                            Id = 41,
                            Chapter = "General and Unspecified",
                            Code = "A89",
                            Description = "Effect prosthetic device"
                        },
                        new
                        {
                            Id = 42,
                            Chapter = "General and Unspecified",
                            Code = "A90",
                            Description = "Congenital anomaly OS/multiple"
                        },
                        new
                        {
                            Id = 43,
                            Chapter = "General and Unspecified",
                            Code = "A91",
                            Description = "Abnormal result investigation NOS"
                        },
                        new
                        {
                            Id = 44,
                            Chapter = "General and Unspecified",
                            Code = "A92",
                            Description = "Allergy/allergic reaction NOS"
                        },
                        new
                        {
                            Id = 45,
                            Chapter = "General and Unspecified",
                            Code = "A93",
                            Description = "Premature newborn"
                        },
                        new
                        {
                            Id = 46,
                            Chapter = "General and Unspecified",
                            Code = "A94",
                            Description = "Perinatal morbidity other"
                        },
                        new
                        {
                            Id = 47,
                            Chapter = "General and Unspecified",
                            Code = "A95",
                            Description = "Perinatal mortality"
                        },
                        new
                        {
                            Id = 48,
                            Chapter = "General and Unspecified",
                            Code = "A96",
                            Description = "Death"
                        },
                        new
                        {
                            Id = 49,
                            Chapter = "General and Unspecified",
                            Code = "A97",
                            Description = "No disease"
                        },
                        new
                        {
                            Id = 50,
                            Chapter = "General and Unspecified",
                            Code = "A98",
                            Description = "Health maintenance/prevention"
                        },
                        new
                        {
                            Id = 51,
                            Chapter = "General and Unspecified",
                            Code = "A99",
                            Description = "General disease NOS"
                        },
                        new
                        {
                            Id = 55,
                            Chapter = "Respiratory",
                            Code = "R01",
                            Description = "Pain respiratory system"
                        },
                        new
                        {
                            Id = 56,
                            Chapter = "Respiratory",
                            Code = "R02",
                            Description = "Shortness of breath/dyspnoea"
                        },
                        new
                        {
                            Id = 57,
                            Chapter = "Respiratory",
                            Code = "R03",
                            Description = "Wheezing"
                        },
                        new
                        {
                            Id = 58,
                            Chapter = "Respiratory",
                            Code = "R04",
                            Description = "Breathing problem, other"
                        },
                        new
                        {
                            Id = 59,
                            Chapter = "Respiratory",
                            Code = "R05",
                            Description = "Cough"
                        },
                        new
                        {
                            Id = 60,
                            Chapter = "Respiratory",
                            Code = "R06",
                            Description = "Nose bleed/epistaxis"
                        },
                        new
                        {
                            Id = 61,
                            Chapter = "Respiratory",
                            Code = "R07",
                            Description = "Sneezing/nasal congestion"
                        },
                        new
                        {
                            Id = 62,
                            Chapter = "Respiratory",
                            Code = "R08",
                            Description = "Nose symptom/complaint other"
                        },
                        new
                        {
                            Id = 63,
                            Chapter = "Respiratory",
                            Code = "R09",
                            Description = "Sinus symptom/complaint"
                        },
                        new
                        {
                            Id = 64,
                            Chapter = "Respiratory",
                            Code = "R21",
                            Description = "Throat symptom/complaint"
                        },
                        new
                        {
                            Id = 65,
                            Chapter = "Respiratory",
                            Code = "R23",
                            Description = "Voice symptom/complaint"
                        },
                        new
                        {
                            Id = 66,
                            Chapter = "Respiratory",
                            Code = "R24",
                            Description = "Haemoptysis"
                        },
                        new
                        {
                            Id = 67,
                            Chapter = "Respiratory",
                            Code = "R25",
                            Description = "Sputum/phlegm abnormal"
                        },
                        new
                        {
                            Id = 68,
                            Chapter = "Respiratory",
                            Code = "R26",
                            Description = "Fear of cancer respiratory system"
                        },
                        new
                        {
                            Id = 69,
                            Chapter = "Respiratory",
                            Code = "R27",
                            Description = "Fear of respiratory disease, other"
                        },
                        new
                        {
                            Id = 70,
                            Chapter = "Respiratory",
                            Code = "R28",
                            Description = "Limited function/disability (r)"
                        },
                        new
                        {
                            Id = 71,
                            Chapter = "Respiratory",
                            Code = "R29",
                            Description = "Respiratory symptom/complaint oth."
                        },
                        new
                        {
                            Id = 72,
                            Chapter = "Respiratory",
                            Code = "R71",
                            Description = "Whooping cough"
                        },
                        new
                        {
                            Id = 73,
                            Chapter = "Respiratory",
                            Code = "R72",
                            Description = "Strep throat"
                        },
                        new
                        {
                            Id = 74,
                            Chapter = "Respiratory",
                            Code = "R73",
                            Description = "Boil/abscess nose"
                        },
                        new
                        {
                            Id = 75,
                            Chapter = "Respiratory",
                            Code = "R74",
                            Description = "Upper respiratory infection acute"
                        },
                        new
                        {
                            Id = 76,
                            Chapter = "Respiratory",
                            Code = "R75",
                            Description = "Sinusitis acute/chronic"
                        },
                        new
                        {
                            Id = 77,
                            Chapter = "Respiratory",
                            Code = "R76",
                            Description = "Tonsillitis acute"
                        },
                        new
                        {
                            Id = 78,
                            Chapter = "Respiratory",
                            Code = "R77",
                            Description = "Laryngitis/tracheitis acute"
                        },
                        new
                        {
                            Id = 79,
                            Chapter = "Respiratory",
                            Code = "R78",
                            Description = "Acute bronchitis/bronchiolitis"
                        },
                        new
                        {
                            Id = 80,
                            Chapter = "Respiratory",
                            Code = "R79",
                            Description = "Chronic bronchitis"
                        },
                        new
                        {
                            Id = 81,
                            Chapter = "Respiratory",
                            Code = "R80",
                            Description = "Influenza"
                        },
                        new
                        {
                            Id = 82,
                            Chapter = "Respiratory",
                            Code = "R81",
                            Description = "Pneumonia"
                        },
                        new
                        {
                            Id = 83,
                            Chapter = "Respiratory",
                            Code = "R82",
                            Description = "Pleurisy/pleural effusion"
                        },
                        new
                        {
                            Id = 84,
                            Chapter = "Respiratory",
                            Code = "R83",
                            Description = "Respiratory infection other"
                        },
                        new
                        {
                            Id = 85,
                            Chapter = "Respiratory",
                            Code = "R84",
                            Description = "Malignant neoplasm bronchus/lung"
                        },
                        new
                        {
                            Id = 86,
                            Chapter = "Respiratory",
                            Code = "R85",
                            Description = "Malignant neoplasm respiratory, other"
                        },
                        new
                        {
                            Id = 87,
                            Chapter = "Respiratory",
                            Code = "R86",
                            Description = "Benign neoplasm respiratory"
                        },
                        new
                        {
                            Id = 88,
                            Chapter = "Respiratory",
                            Code = "R87",
                            Description = "Foreign body nose/larynx/bronch"
                        },
                        new
                        {
                            Id = 89,
                            Chapter = "Respiratory",
                            Code = "R88",
                            Description = "Injury respiratory other"
                        },
                        new
                        {
                            Id = 90,
                            Chapter = "Respiratory",
                            Code = "R89",
                            Description = "Congenital anomaly respiratory"
                        },
                        new
                        {
                            Id = 91,
                            Chapter = "Respiratory",
                            Code = "R90",
                            Description = "Hypertrophy tonsils/adenoids"
                        },
                        new
                        {
                            Id = 92,
                            Chapter = "Respiratory",
                            Code = "R92",
                            Description = "Neoplasm respiratory unspecified"
                        },
                        new
                        {
                            Id = 93,
                            Chapter = "Respiratory",
                            Code = "R95",
                            Description = "Chronic obstructive pulmonary dis"
                        },
                        new
                        {
                            Id = 94,
                            Chapter = "Respiratory",
                            Code = "R96",
                            Description = "Asthma"
                        },
                        new
                        {
                            Id = 95,
                            Chapter = "Respiratory",
                            Code = "R97",
                            Description = "Allergic rhinitis"
                        },
                        new
                        {
                            Id = 96,
                            Chapter = "Respiratory",
                            Code = "R98",
                            Description = "Hyperventilation syndrome"
                        },
                        new
                        {
                            Id = 97,
                            Chapter = "Respiratory",
                            Code = "R99",
                            Description = "Respiratory disease other"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BatchCompleteWhenZero")
                        .HasColumnType("bit");

                    b.Property<int>("BatchCount")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ManfactureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Remaining")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Batches", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.CourseShot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ShotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ShotId");

                    b.ToTable("CourseShots", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ImmunisationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChildhood")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefualt")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImmunisationPrograms", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ProgramCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImmunisationProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ImmunisationProgramId");

                    b.ToTable("ProgramCourses", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.Shot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervalMax")
                        .HasColumnType("int");

                    b.Property<int>("IntervalMin")
                        .HasColumnType("int");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shots", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ShotBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ShotId");

                    b.ToTable("ShotBatches", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.NoteTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HealthCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCodeId");

                    b.ToTable("NoteTemplates", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.PomrGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PomrGroups", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Drugs.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmFam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atc1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atc2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dentist")
                        .HasColumnType("bit");

                    b.Property<string>("DrugCats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GasCharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingrd1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingrd2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("IngredientCostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Manufacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxRrp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NoteAutUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackSize")
                        .HasColumnType("int");

                    b.Property<string>("PackSizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackSizeUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoisonClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductAuthortext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UomSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Warnings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drugs", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.AssignedInvestigationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvestigationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvestigationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationGroupId");

                    b.HasIndex("InvestigationId");

                    b.ToTable("AssignedInvestigationGroups", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.Investigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Investigations", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AbsoluteMaximum")
                        .HasColumnType("float");

                    b.Property<double>("AbsoluteMinimum")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InvestigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvestigationSelectionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaindatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NormalMaximum")
                        .HasColumnType("float");

                    b.Property<double>("NormalMinimum")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationId");

                    b.HasIndex("InvestigationSelectionListId");

                    b.ToTable("InvestigationDetails", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvestigationGroups", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvestigationSelectionList", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvestigationSelectionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationSelectionListId");

                    b.ToTable("InvestigationSelectionValues", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Letter.LetterTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LetterTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LetterTypeId");

                    b.ToTable("LetterTemplates", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Letter.LetterType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LetterTypes", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.SmsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsTemplates", "Setting");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.PermissionClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Allowed")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefualt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForceReset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdatePassword")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mcn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResetPasswordAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.UserClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClinics", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.WaitingRoom.WaitingAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("WaitingAppointments", "Scheduler");
                });

            modelBuilder.Entity("Domain.Entities.Appointments.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Appointments.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Clinic.ClinicSite", "ClinicSite")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Clinic");

                    b.Navigation("ClinicSite");

                    b.Navigation("Hcp");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.AdministerShot", b =>
                {
                    b.HasOne("Domain.Entities.Consultation.ConsultationDetail", "ConsultationDetail")
                        .WithMany()
                        .HasForeignKey("ConsultationDetailId");

                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany("AdministerShots")
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Consultation.ImmunisationSchedule", "ImmunisationSchedule")
                        .WithMany()
                        .HasForeignKey("ImmunisationScheduleId");

                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.ShotBatch", "ShotBatch")
                        .WithMany()
                        .HasForeignKey("ShotBatchId");

                    b.Navigation("ConsultationDetail");

                    b.Navigation("Hcp");

                    b.Navigation("ImmunisationSchedule");

                    b.Navigation("ShotBatch");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.BaselineDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hcp");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationDetail", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Clinic.ClinicSite", "ClinicSite")
                        .WithMany()
                        .HasForeignKey("ClinicSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicSite");

                    b.Navigation("Hcp");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationLetter", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Templates.Letter.LetterTemplate", "LetterTemplate")
                        .WithMany()
                        .HasForeignKey("LetterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hcp");

                    b.Navigation("LetterTemplate");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationNote", b =>
                {
                    b.HasOne("Domain.Entities.Consultation.ConsultationDetail", "ConsultationDetail")
                        .WithMany("Notes")
                        .HasForeignKey("ConsultationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Consultation.HealthCode", "HealthCode")
                        .WithMany()
                        .HasForeignKey("HealthCodeId");

                    b.Navigation("ConsultationDetail");

                    b.Navigation("HealthCode");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ImmunisationSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.ImmunisationProgram", "ImmunisationProgram")
                        .WithMany("ImmunisationSchedules")
                        .HasForeignKey("ImmunisationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany("ImmunisationSchedules")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImmunisationProgram");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.InvestigationAudit", b =>
                {
                    b.HasOne("Domain.Entities.Consultation.PatientInvestigation", "PatientInvestigation")
                        .WithMany("InvestigationAudits")
                        .HasForeignKey("PatientInvestigationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PatientInvestigation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.InvestigationResult", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.InvestigationDetail", "InvestigationDetail")
                        .WithMany()
                        .HasForeignKey("InvestigationDetailId");

                    b.HasOne("Domain.Entities.Consultation.PatientInvestigation", "PatientInvestigation")
                        .WithMany()
                        .HasForeignKey("PatientInvestigationId");

                    b.Navigation("InvestigationDetail");

                    b.Navigation("PatientInvestigation");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.LetterReply", b =>
                {
                    b.HasOne("Domain.Entities.Consultation.ConsultationLetter", "ConsultationLetter")
                        .WithMany()
                        .HasForeignKey("ConsultationLetterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultationLetter");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.PatientInvestigation", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.Investigation", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hcp");

                    b.Navigation("Investigation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Drugs.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Reaction", b =>
                {
                    b.HasOne("Domain.Entities.Consultation.AdministerShot", "AdministerShot")
                        .WithMany()
                        .HasForeignKey("AdministerShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministerShot");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.Reminder", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany()
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hcp");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Messaging.ChatMessage", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "FromUser")
                        .WithMany("ChatMessagesFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "ToUser")
                        .WithMany("ChatMessagesToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Domain.Entities.Messaging.UserTask", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById");

                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Alert.PatientAlert", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Alert.AlertCategory", "AlertCategory")
                        .WithMany()
                        .HasForeignKey("AlertCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertCategory");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Billing.PatientAccount", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithOne("PatientAccount")
                        .HasForeignKey("Domain.Entities.PatientManagement.Billing.PatientAccount", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Billing.PatientTransaction", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Billing.PatientAccount", "PatientAccount")
                        .WithMany("PatientTransactions")
                        .HasForeignKey("PatientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAccount");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.DoctorVisitCard", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientContact", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientHospital", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Options.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany("Hospitals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.PatientOccupation", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Extra.RelatedHcp", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Family.FamilyMember", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Group.GroupPatient", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Group.Group", "Group")
                        .WithMany("RegisteredPatients")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Options.SmsHistory", b =>
                {
                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "Hcp")
                        .WithMany("Patients")
                        .HasForeignKey("HcpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hcp");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Clinic.ClinicSite", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.Batch", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Drugs.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.CourseShot", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Shot");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ProgramCourse", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.ImmunisationProgram", "ImmunisationProgram")
                        .WithMany()
                        .HasForeignKey("ImmunisationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ImmunisationProgram");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ShotBatch", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Consultation.Immunisation.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Shot");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.NoteTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Consultation.HealthCode", "HealthCode")
                        .WithMany()
                        .HasForeignKey("HealthCodeId");

                    b.Navigation("HealthCode");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.AssignedInvestigationGroup", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.InvestigationGroup", "InvestigationGroup")
                        .WithMany()
                        .HasForeignKey("InvestigationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.Investigation", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investigation");

                    b.Navigation("InvestigationGroup");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationDetail", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.Investigation", "Investigation")
                        .WithMany("InvestigationDetails")
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionList", "InvestigationSelectionList")
                        .WithMany()
                        .HasForeignKey("InvestigationSelectionListId");

                    b.Navigation("Investigation");

                    b.Navigation("InvestigationSelectionList");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionValue", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionList", "InvestigationSelectionList")
                        .WithMany("InvestigationSelectionValues")
                        .HasForeignKey("InvestigationSelectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestigationSelectionList");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Letter.LetterTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Templates.Letter.LetterType", "LetterType")
                        .WithMany()
                        .HasForeignKey("LetterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LetterType");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.PermissionClaim", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.User", b =>
                {
                    b.HasOne("Domain.Entities.UserAccounts.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.UserClinic", b =>
                {
                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccounts.User", "User")
                        .WithMany("UserClinics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WaitingRoom.WaitingAppointment", b =>
                {
                    b.HasOne("Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Settings.Clinic.Clinic", "Clinic")
                        .WithMany("WaitingAppointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PatientManagement.Patient", "Patient")
                        .WithMany("WaitingAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.ConsultationDetail", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Domain.Entities.Consultation.PatientInvestigation", b =>
                {
                    b.Navigation("InvestigationAudits");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Billing.PatientAccount", b =>
                {
                    b.Navigation("PatientTransactions");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Group.Group", b =>
                {
                    b.Navigation("RegisteredPatients");
                });

            modelBuilder.Entity("Domain.Entities.PatientManagement.Patient", b =>
                {
                    b.Navigation("FamilyMembers");

                    b.Navigation("Hospitals");

                    b.Navigation("ImmunisationSchedules");

                    b.Navigation("PatientAccount");

                    b.Navigation("WaitingAppointments");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Clinic.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");

                    b.Navigation("WaitingAppointments");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Clinic.ClinicSite", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Consultation.Immunisation.ImmunisationProgram", b =>
                {
                    b.Navigation("ImmunisationSchedules");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.Investigation", b =>
                {
                    b.Navigation("InvestigationDetails");
                });

            modelBuilder.Entity("Domain.Entities.Settings.Templates.Investigations.InvestigationSelectionList", b =>
                {
                    b.Navigation("InvestigationSelectionValues");
                });

            modelBuilder.Entity("Domain.Entities.UserAccounts.User", b =>
                {
                    b.Navigation("AdministerShots");

                    b.Navigation("ChatMessagesFromUsers");

                    b.Navigation("ChatMessagesToUsers");

                    b.Navigation("Patients");

                    b.Navigation("UserClinics");
                });
#pragma warning restore 612, 618
        }
    }
}
